<apex:page showHeader="false" controller="BMCServiceDesk.CategoryTypesController" contentType="{!contetnTypeForIE}" standardStylesheets="false">
<c:CommonIncludes />
    
    <script>
    var enablesavebtn={!isPageAccessible};
	var enablecopybtn = {!copybtnflag};
	var enabledeletebtn = {!deletebtnflag};
    var categoryTypesName;               
    var categoryTypesId;
    var errormsg;
    var chkBoxValue;
    var categoryTypeHeader = '{!JSENCODE($ObjectType.CategoryTypes__c.label)}';
    var wid = '{!JSENCODE($CurrentPage.parameters.wid)}';
	document.onclick = activateWindow; 
	function getWID(){
		return '{!JSENCODE($CurrentPage.parameters.wid)}';
	}
     /*
            Code for handling Data change on Page
            - START
        */
        
    var wid2 = '{!JSENCODE($CurrentPage.parameters.wid)}';
    function afterResetSI(){
	var modName = "{!JSENCODE($CurrentPage.parameters.moduleName)}";  
    	 var parentWid = "{!JSENCODE($CurrentPage.parameters.parentWid)}"; 
	     if(modName != null && modName != '' && typeof(modName) != 'undefined' && parentWid != null && parentWid != '' && typeof(parentWid) != 'undefined' && errormsg=='{!JSENCODE($Label.savedSuccessfully)}'){
	         window.parent.parent.refreshSupportingInformation(parentWid,modName);
	     }
    }
 	function afterSaveAction(){
 	  		var modName = "{!JSENCODE($CurrentPage.parameters.moduleName)}";  
    		var parentWid = "{!JSENCODE($CurrentPage.parameters.parentWid)}";
		  	if(modName != null && modName != '' && typeof(modName) != 'undefined' && parentWid != null && parentWid != '' && typeof(parentWid) != 'undefined' && errormsg=='{!JSENCODE($Label.savedSuccessfully)}'){
		        return true;
		     }else{
		        showError();
		    }
	}
	    var clickedOnce = false;  
	    function handleChange(){
	        if(!clickedOnce){
	            clickedOnce = true;
	            window.parent.registerChange(wid2);
	        }
        }
	        
	    function handleResetChange(){
	    	if(clickedOnce){
               clickedOnce = false;
               window.parent.registerSave(wid2);
           }
	     }
        
		 /*
     		END
     	*/
		
		var resizeGrid= function resizeGrid(){
        if(Ext.getCmp('southPanelSI')!=undefined)
         Ext.getCmp('southPanelSI').setWidth(Ext.getCmp('southPanelSI').getWidth());
        };
		if(window.parent.refreshGridSI!=undefined)
        window.parent.refreshGridSI(wid,resizeGrid);
        
        
     var isLookup = "{!JSENCODE($CurrentPage.parameters.islookup)}";  
     if(isLookup){
            window.parent.changePopUpTitle('{!JSENCODE(objLabel)}');
        }
       
        function getCATTYPid(catId,isSave){
            if(isLookup){
              window.parent.refreshDocs();  
              window.parent.closePopup();
           }else{
               setId(catId,isSave);  
           }
        }
    
    function callNewPage(){
        window.parent.addTab("CategoryTypesPage",categoryTypeHeader,categoryTypeHeader);
    }
    function resetbuttonstatus()
    {
    	if(!enablesavebtn)
        {
           Ext.getCmp('saveId').setDisabled(true);
             
        }
        if(!enablecopybtn)
        {
        	Ext.getCmp('newId').setDisabled(true);
        	Ext.getCmp('copyId').setDisabled(true);
        }
        if(!enabledeletebtn)
        {
        	 Ext.getCmp('deleteId').setDisabled(true);
             Ext.getCmp('deleteId').setIconClass('bmcDeleteDisable');
        }   
    }
    function callCopyPage(){
        /*categoryTypesId  = '{!JSENCODE($CurrentPage.parameters.id)}';*/
        window.parent.addTab("CategoryTypesPage?copyId=" + categoryTypesId,categoryTypeHeader,categoryTypeHeader);
    }

        Ext.onReady(function(){
    
        Ext.QuickTips.init();
        // This function renders a block of buttons
        var NewBtnHandler = function(button,event) {  activeAllWindowFlag=false; openPage('CategoryTypesPage',categoryTypeHeader,categoryTypeHeader);};
        var SaveBtnHandler = function(button,event) {  
         Ext.getCmp('saveId').setDisabled(true);
         waitbox(0); 
         chkBoxValue=Ext.getCmp('idInactive').getValue();
         save(chkBoxValue); 
         };
        var CopyBtnHandler = function(button,event) { activeAllWindowFlag=false; callCopyPage(); };
             var DeleteBtnHandler = function(button,event) {  
                                                        
                                                         Ext.MessageBox.confirm('{!JSENCODE($Label.Delete)}', '{!JSENCODE($Label.DeleteConfirmMessage)}', function(btn){
                                                           if(btn === 'yes'){
                                                                 deleteCategoryTypes();
                                                           }});
                                                         };
        var ResetBtnHandler = function(button,event) {  resetCategoryTypes(); };       
        var NextBtnHandler = function (button,event) { if(document.getElementById('nextId').disabled!=true) nextCategoryTypeBtnHandler1();};
        var PreviuosBtnHandler = function (button,event) {if(document.getElementById('prevId').disabled!=true) previousCategoryTypeBtnHandler1();}; 
   
          var SamplePanel = Ext.extend(Ext.Panel, {
            renderTo: 'btnToolbar',
            defaults: {bodyStyle:'border:0px;padding:0px;margin:0px;zoom:0px;'}
        });
        
        new SamplePanel({
            title: '',
            cls:'toolSpCls',
             bodyStyle:'border:0px;padding:0px;margin:0px;zoom:0px;',
            tbar: [{
                scale: 'medium',
                iconCls: 'bmcNew',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.new)}',
                id:'newId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcNewOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcNew');          
                     }
                    
                } ,
				handler:NewBtnHandler
             
            },' ',{
                scale: 'medium',
                iconCls: 'bmcSave',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.save)}',
                id:'saveId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcSaveOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcSave');          
                     }
                    
                },
				handler:SaveBtnHandler
                
              
            },' ',{
                scale: 'medium',
                iconCls: 'bmcCopy',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.copy)}',
                id:'copyId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcCopyOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcCopy');          
                     }
                     
                },
				handler:CopyBtnHandler
                
             
            },' ','-',' ',{
                scale: 'medium',
                iconCls: 'bmcDelete',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.delete)}',
                id:'deleteId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcDeleteOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcDelete');          
                     }
                    
                },
				handler:DeleteBtnHandler				
                
               
            },' ',{
                scale: 'medium',
                iconCls: 'bmcRefreshDasboard',
                tooltipType : 'title',
                 tooltip: '{!JSENCODE($Label.Refresh)}',
                 id:'resetId',
               
				handler:ResetBtnHandler                
            
            },' ',  new Ext.Toolbar.Fill(), 
            {
                  id :'idInactive',
               xtype  : 'checkbox',
               width  : 93,
               align:'top',
               checked: false,
               boxLabel:'{!JSENCODE($ObjectType.CategoryTypes__c.fields.inactive__c.label)}',
               cls:'chkStyle',
               boxLabel:'<span class="checkboxLabelCls">{!JSENCODE($ObjectType.CategoryTypes__c.fields.inactive__c.label)}</span>',
               /*Added for tooltip*/
               listeners:{
                    render:function(){
                        Ext.QuickTips.register({
                            target:this,
                            dismissDelay: 20000,
                            text:'{!JSENCODE($ObjectType.CategoryTypes__c.fields.inactive__c.label)}'
                        });
                    }               
               }   /*Addtion over*/                
            }, {
               
               
                  xtype : 'box',
                  id    : 'prevId',
                autoEl:  {tag: 'img', 
                          src:('{!$Resource.BMCServiceDesk__SDEFStyles}/SDEFbuttons/b_previous.gif'),   
                         title:'{!JSENCODE($Label.previousRecord)}'
                         },
                          
                cls:'cursorCls',
               listeners : { render: function(f){f.el.on('click', PreviuosBtnHandler);}}
                             
            },{
               
                xtype : 'box',
		        id    : 'nextId',
                autoEl:  {tag: 'img', 
                          src:'{!$Resource.BMCServiceDesk__SDEFStyles}/SDEFbuttons/b_next.gif',
                          title:'{!JSENCODE($Label.nextRecord)}' },
                cls:'cursorSpaceCls',
                listeners : { render: function(f){f.el.on('click', NextBtnHandler)}}
               
                
            }
            ] 
        });

        Ext.getCmp('idInactive').setValue('{!categoryTypes.BMCServiceDesk__inactive__c}');
        
        categoryTypesId = '{!JSENCODE(categoryTypes.Id)}';            
        if(categoryTypesId == null || categoryTypesId == ''){                
        Ext.getCmp('deleteId').setDisabled(true);
		Ext.getCmp('deleteId').setIconClass('bmcDeleteDisable');
        Ext.getCmp('copyId').setDisabled(true);
        Ext.getCmp('resetId').setDisabled(true);
	    Ext.getCmp('prevId').setDisabled(true);
        Ext.getCmp('nextId').setDisabled(true);       
        
        }
       resetbuttonstatus();
  
                    ///////////// // IE7-8 Related Changes
                   var canvasPanel = new Ext.Panel({
                         layout:'border',
                        // width:'auto',    
                          height:Ext.isIE7 ? 670: Ext.isIE ? 674:Ext.isSafari ? 695:680,
                         border:false, 
                         id:'canvasPanelId',
                        cls:'canvasPanelCls',
                         items:[{  
                                xtype: 'panel', // TabPanel itself has no title    
                                  layout: 'fit',                                                   
                                overflow:'auto',
                                autoScroll:true,
                                split:false,
                                width:'auto',    
                                height:500, 
                                cls:'northPanelCls',
                                                                             
                                region: 'center',                   
                               // margins:'2 4 2 0',
                                                       
                                contentEl : Ext.isIE ? 'capsule' : '{!$Component.categoryTypesPageForm}'
                                
                        },{                                                         
                                xtype: 'panel', // TabPanel itself has no title
                                layout: 'fit',  
                                overflow:'auto',
                                 border:false, 
								  id:'southPanelSI',
                                autoScroll:true,
                                split:true,
                                collapsible: true,
                                collapseMode: 'mini',
                                width:'auto',    
                                height:Ext.isIE ?182:180,
                                minHeight:Ext.isIE ?120:150,
                                                                                  
                                region: 'south',
                               listeners : {
                                    resize:function( obj,adjWidth,adjHeight,rawWidth,rawHeight ) { 
                                    
                                        if(Ext.getCmp('south-panel')!=undefined){
                                               Ext.getCmp('south-panel').setHeight(adjHeight); 
                                        }
                                   }
                               },
                              
                               contentEl :'detailsDiv' 
                        }],
						listeners: {
							afterlayout: function(c) {
								c.layout.south.miniSplitEl.dom.qtip = '{!JSENCODE($Label.DragResizeClickCollapse)}';
								c.layout.south.getCollapsedEl();
								c.layout.south.miniCollapsedEl.dom.qtip = '{!JSENCODE($Label.ClickToExpand)}';
							},
							single: true
					   }
                        
                       
                         
                       
                });
            
                     var viewport = new Ext.Viewport({
                     layout:'anchor',
                    // renderTo:'viewPortDiv',
                     width:'auto',
                     id:'viewportId',
                     border:false, 
                    cls:'viewportCanvasCls',          
                     //items:canvasPanel
                     items:[{anchor: '100%', layout:'fit', items:canvasPanel} ]
                    });
/////////////// // End IE7-8 Related Changes
                   if(categoryTypesId == null || categoryTypesId == ''){                
                   document.getElementById('{!$Component.categoryTypesPageForm.catetypeId}').focus();
		   }
    });
       
 var CtypeIdSet;
		if(CtypeIdSet == null || CtypeIdSet == ''){
			if('{!JSENCODE($CurrentPage.parameters.isDirect)}' == ''){
			if(typeof(window.parent.returnListOfId)=='function')
				CtypeIdSet=window.parent.returnListOfId();
		}else{
			if(typeof(window.parent.parent.getIdArray)=='function')
				CtypeIdSet=window.parent.parent.getIdArray();
				window.parent.handleSave('{!JSENCODE($CurrentPage.parameters.wid)}','{!JSENCODE($CurrentPage.parameters.id)}');
			}
		}

        function previousCategoryTypeBtnHandler1(){
            var idSetString='';
            var i=0;
            while(CtypeIdSet.length > i){
                if(idSetString==''){
                    idSetString=CtypeIdSet[i];
                }else{
                    idSetString=idSetString+','+CtypeIdSet[i];
                }
                i++;
            }
            previousCategoryTypeBtnHandler(idSetString);
        
        }

       function nextCategoryTypeBtnHandler1(){
            var idSetString='';
            var i=0;
            while(CtypeIdSet.length > i){
                if(idSetString==''){
                    idSetString=CtypeIdSet[i];
                }else{
                    idSetString=idSetString+','+CtypeIdSet[i];
                }
                i++;
            }
            nextCategoryTypeBtnHandler(idSetString);
        }
        
    function copyCategoryTypes(){
    
    //    copyCategoryTypesNext();
    }
    
    function buttonValidator() {
       
       if((categoryTypesName != null && categoryTypesName != '')&&(errormsg == null||errormsg ==''||errormsg=='{!JSENCODE($Label.savedSuccessfully)}')){   
        
        Ext.getCmp('deleteId').setDisabled(false);
        Ext.getCmp('deleteId').setIconClass('bmcDelete');
        Ext.getCmp('copyId').setDisabled(false);
        Ext.getCmp('resetId').setDisabled(false);
           
       }  
     }
    
    function completeDelete(){
        if(errormsg == '{!JSENCODE($Label.InsufficentDeletePrivilege)}'){
            showError();
        }else{
            closeWindow();
        }
     }
        function closeWindow(){
                window.parent.refreshList();
                window.parent.closeTab(wid);
        }
    
    </script>

    <apex:outputPanel id="titlePanel">
        <script>
        function resetSupportingInformation(isSave){
                var newId = '{!JSENCODE(categoryTypes.Id)}'; 
                getCATTYPid(newId,isSave);   
       	}
            function updateList(){
                
                window.parent.refreshList();
            }
           function updateTitle(){
	           	var newTitle= "{!JSENCODE(categoryTypes.name)}";
	           	if(newTitle != ""){						
	                window.parent.changeTitle(wid,newTitle,categoryTypeHeader);
	            }                          		
            }
        </script>
    </apex:outputPanel>
    <apex:outputPanel id="afterSavePanel">
        <script>
        enablesavebtn={!isPageAccessible};
           function handleSave(){
               var id = "{!JSENCODE(categoryTypes.Id)}"; 
            window.parent.handleSave(wid, id);
        }
          
    		function enableSaveButton() {
        		Ext.getCmp('saveId').setDisabled(false);
      		} 
      		
        </script>
     </apex:outputPanel>
    <apex:outputPanel id="panelId">
        <script>
        
           categoryTypesName = '{!JSENCODE(categoryTypes.name)}';               
           categoryTypesId = '{!JSENCODE(categoryTypes.Id)}';      
        
        </script>
        </apex:outputPanel>
        
         <apex:outputPanel id="errorId">
        <script>
        
           errormsg = '{!JSENCODE(messageString)}';               
                
        
        </script>
        </apex:outputPanel>
        
       
       
       <apex:outputPanel id="inactivePanel">
        <script>
           function updateInactive(){
              Ext.getCmp('idInactive').setValue('{!categoryTypes.BMCServiceDesk__inactive__c}');
        }
          
    
        </script>
    </apex:outputPanel>
 <apex:outputPanel id="categoryTypesPanel">      
 <apex:form id="categoryTypesPageForm" >
<div id="capsule" class="CapsuleDiv1">
    
       
            <c:ValidationComponent errorMsgList="{!messageString}" id="validationComponent"></c:ValidationComponent>
            <apex:actionFunction action="{!save}" name="save" reRender="titlePanel,validationComponent,panelId,errorId,afterSavePanel" oncomplete="waitMsg.hide();afterSaveAction();handleSave();updateList();updateTitle();resetSupportingInformation(true);buttonValidator();handleElemEvent();enableSaveButton();resetbuttonstatus();">
             <apex:param assignTo="{!chkBoxValue}" name="idSetString" value=""/> 
                 </apex:actionFunction>
            <apex:actionFunction action="{!newCategoryTypes}" name="newCategoryTypes" />
            <apex:actionFunction action="{!reset}" name="resetCategoryTypes" rerender="tablePanel, cTypePanelBar,inactivePanel,afterSavePanel" oncomplete="updateInactive();handleResetChange();handleElemEvent();"/>
             <apex:actionFunction action="{!deleteCategoryTypes}" name="deleteCategoryTypes" oncomplete="updateList();resetSupportingInformation(false);completeDelete();" rerender="errorId,validationComponent"/>
             <!-- apex:actionFunction action="{!copyCategoryTypes}" name="copyCategoryTypesNext" rerender="categoryTypesPanel"/--> 
             
             <apex:actionFunction action="{!nextBtnHandler}" name="nextCategoryTypeBtnHandler" 
                                    rerender="tablePanel, cTypePanelBar,inactivePanel,afterSavePanel,titlePanel,validationComponent,panelId,errorId" oncomplete="updateInactive();handleResetChange();handleElemEvent();resetSupportingInformation(false);reloadSupportInfo();updateTitle();">  
                                    <apex:param assignTo="{!tempString}" name="idSetString" value=""/> 
            </apex:actionFunction>
            <apex:actionFunction action="{!previousBtnHandler}" name="previousCategoryTypeBtnHandler" 
                                        rerender="tablePanel, cTypePanelBar,inactivePanel,afterSavePanel,titlePanel,validationComponent,panelId,errorId" oncomplete="updateInactive();handleResetChange();handleElemEvent();resetSupportingInformation(false);reloadSupportInfo();updateTitle();"> 
                                        <apex:param assignTo="{!tempString}" name="idSetString" value=""/> 
            </apex:actionFunction>
             

              <table class="clsMainTableSI" cellspacing="0" cellpadding="0">

                <tr class="clsRowGreyBg">
                    <td>
                    <div id="btnToolbar"></div>
                    </td>
                </tr>

                <tr>
                    <td >
                        <apex:outputPanel id="tablePanel"> 
                        <table class="clsTable" cellspacing="0" cellpadding="0">
                            <tr>
                            <td colspan="2"><div class="div15pxVspacing"/></td>
                            </tr>                             <td></td>
                            <tr>
                            <td class="clsInputLabelTD"><apex:outputLabel value="{!$ObjectType.BMCServiceDesk__CategoryTypes__c.fields.Name.label}" /><span class="clsRequiredBlack">&nbsp;*</span></td>
                            <td class="clsInputTextBoxTD">
                                <apex:inputText title="{!$Label.bmcservicedesk__tooltipcategorytypecategorytypeid}" value="{!categoryTypes.name}" id="catetypeId" styleClass="clsIdInputTextBox" />
                            </td>
                            </tr>
                        </table>
                        
                    
                        <table class="clsTable" cellspacing="0" cellpadding="0">
                            <tr>
                                <td>
                                     <div class="div13pxVspacing"></div>
                                 </td>
                            </tr>                        
                            
                        </table>                    
                </apex:outputPanel> 
             </td>
           </tr>
               
               
            </table>
        
         </div>
        <div class="detailSectinDivCls">
                      <table>
                      <tr >
                            <td >
                                   <c:SupportInformationComponent setinactive="{!categoryTypes.BMCServiceDesk__inactive__c}" objectName="CategoryTypes__c" fKeyValue="{!categoryTypeId}" urlForStaticResource="{!$Resource.BMCServiceDesk__SDEFStyles}" />
                               </td>
                         </tr>
            </table>          
          </div>
          <c:TabOutComponent ></c:TabOutComponent>
        </apex:form>
  
   </apex:outputPanel>
       <style>
   		   .clsInputTextBox {
   		     *height: 19px;
   		  }
   		  
   		  .clsPanelInputTextboxTD1{
   		    *padding-bottom: 5px;
   		  }
   		  
   		   .clsPanelInputTextboxReadOnly {
   		       *height: 19px;
   		    }
   		  
   		  .clsPanelInputTextbox {
   		      *height: 19px;
   		    }
   		  
   		  .clsPanelInputTextAreaReadOnly {
   		   *width: 195px;
   			}
   			.clsIdInputTextBox {
   			   *height: 19px;
   			}
   			.clsInputTextBoxReadOnly {
   				*height: 19px;
   			}
	</style>
</apex:page>