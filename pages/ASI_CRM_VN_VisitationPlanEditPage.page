<apex:page standardController="ASI_HK_CRM_Visitation_Plan_Detail__c" recordSetVar="vPlans" extensions="ASI_CRM_VN_VisitationPlanEditController" action="{!initPage}" title="Visitation Planner" showHeader="true" sidebar="false" showChat="false">
    <apex:stylesheet id="fullCalStyleSheet" value="{!URLFOR($Resource.ASI_HK_CRM_FullCalendar_130516, '/fullcalendar-1.5.4/fullcalendar/fullcalendar.css')}"/>
    <apex:includeScript id="jqueryScript" value="{!URLFOR($Resource.ASI_HK_CRM_FullCalendar_130516, '/fullcalendar-1.5.4/jquery/jquery-1.8.1.min.js')}"/>
    <apex:includeScript id="fullCalScript" value="{!URLFOR($Resource.ASI_HK_CRM_FullCalendar_130516, '/fullcalendar-1.5.4/fullcalendar/fullcalendar.min.js')}"/>
    <apex:includeScript id="floatingHeader" value="{!URLFOR($Resource.ASI_HK_CRM_Common, '/ASI_HK_CRM_Common/scripts/vfFloatingHeaders.js')}"/>
    
    <style type="text/css">
        #calendar .fc-sat {
            background-color: #BF4E3033;
        }
        
        #calendar .fc-sun {
            background-color: #FF82A933;
        }
        
        #calendar .fc-mon,
        #calendar .fc-tue,
        #calendar .fc-wed,
        #calendar .fc-thu,
        #calendar .fc-fri {
            background-color:#FFFFFF;
            height:60px;
        }
        
        #calendar .fc-widget-header {
            background-color:#F2F3F3;
        }

        .visitCheckboxDiv {
            background-color:#E5F4FF;
            /*top: 213px !important;*/
        }
        .visitCheckboxDiv, .visitCheckbox {
            cursor:pointer;
        }
        .outletStrDiv{
            white-space: pre-wrap;
        }
        .visitCheckboxDivClicked {
            background-color:#FFF199;
            font-weight:bold;
        }
        .visitCountDiv {
            background-color:#FFFFFF;
            color:#000000;
            font-size:80%;
        }
        
        .visitTargetTR {
            cursor:pointer;
        }
        .visitTargetTRClicked {
            background-color:#D3E3FF;
        }
        
        #vptTable {
            background-color:#FFFFFF;
            border:solid #E0E3E5;
            border-width:0px 1px 1px 0px;
            border-spacing:0px;
            margin-top:20px;
        }
        #vptTable td, #vptTable th {
            padding:5px;
            width:60px;
            border:solid #E0E3E5;
            border-width: 1px 0px 0px 1px;
        }
        #vptTable .pointTH {
            background-color:#F2F3F3;
        }
        #vptTable .pointTHLeft {
            text-align:right;
        }
        .floatingStyle {
            position:relative;
        }
        
        .outletStrDivDetail {
            padding  : 5px 5px 5px 5px;
        	display  : none;
            position : absolute;
            border   : 1px solid #000;
            width    : 100px;
            z-index  : 9999;
            background : rgba(255, 255, 255, 0.9);
        }
    </style>
    <script type="text/javascript">
        //TODO: Use visitation header year and month
        var targetVisitYear = {!YEAR(visitPlanBeginDate)};
        var targetVisitMonth = {!MONTH(visitPlanBeginDate)};
        var defVisitDay = 1;
        var visitDayDelim = '{!visitDayDelim}';
        var ptKey_total = '{!ptKeyTotal}';
        var isLocked = {!isLocked};
        
        var dailyOutletMap = {};

        // Target Table functions
        
        function clickTR(theTR) {
            $('.visitTargetTRClicked').removeClass('visitTargetTRClicked');
            $(theTR).addClass('visitTargetTRClicked');
            var targetSObjId = searchTargetSObjIdByTR(theTR);
            var targetSObjName = searchTargetSObjNameByTR(theTR);
            if (targetSObjId) {
                refreshCalendar(targetSObjId, targetSObjName);
            }
        }
        function updateTargetTablePoint(sObjId, isChecked) {
            var change = 0;
            var worthPtDiv = $('#tgWorthPt_' + sObjId);
            var reqPtDiv = $('#tgReqPt_' + sObjId);
            var planPtDiv = $('#tgPlanPt_' + sObjId);
            var balancePtDiv = $('#tgBalancePt_' + sObjId);
            if (worthPtDiv && reqPtDiv && planPtDiv && balancePtDiv) {
                var worthPtInt = parseInt(worthPtDiv.text());
                var reqPtInt = parseInt(reqPtDiv.text());
                var planPtInt = parseInt(planPtDiv.text());
                var plusOrMinus = isChecked ? 1 : -1;
                change = plusOrMinus * worthPtInt;
                planPtInt += change
                planPtDiv.text(planPtInt);
                balancePtDiv.text(reqPtInt - planPtInt);
            }
            return change;
        }
        function updateTargetTableVisitDate(sObjId, day, isChecked) {
            var visitDayDiv = $('#visitDayStr_' + sObjId);
            if (typeof(day) === 'string') day = parseInt(day);
            var visitDayInput = visitDayDiv.closest('td').find('input');
            if (visitDayDiv && visitDayInput) {
                var visitDayArray = visitDayToArray(visitDayDiv.text());
                var newVisitDayArray = [];
                if (!visitDayArray)
                    visitDayArray = [];
                if (isChecked) {
                    var inserted = false;
                    for (var i = 0; i < visitDayArray.length; i++) {
                        if (visitDayArray[i] == day)
                            inserted = true;
                        else if (!inserted && parseInt(visitDayArray[i]) > day) {
                            newVisitDayArray.push('' + day);
                            inserted = true;
                        }
                        newVisitDayArray.push(visitDayArray[i]);
                    }
                    if (!inserted) newVisitDayArray.push('' + day);
                } else {
                    for (var i = 0; i < visitDayArray.length; i++) {
                        if (visitDayArray[i] != day)
                            newVisitDayArray.push(visitDayArray[i]);
                    }
                }
                var newVisitDayStr = visitDayToStr(newVisitDayArray);
                visitDayDiv.text(newVisitDayStr);
                visitDayInput.val(newVisitDayStr);
            }
        }
        
        // Point Table Functions
        function updatePointTable(sObjId, change) {
            var ptType = $('#tgType_' + sObjId).text();
            if (ptType) {
                // Update planned points
                var typePlanPt = $('#planPt_' + ptType).text();
                var outletPt = $('#planPt_' + ptType + '_outlet').text();
                var newTypePlanPt = parseInt(typePlanPt) + change;
                $('#planPt_' + ptType).text(newTypePlanPt);
                var realPt = parseInt($('#tgPlanPt_' + sObjId).text());
                if(realPt == 1 && change > 0){
                    var outletNo = parseInt(outletPt) + 1;
                    $('#planPt_' + ptType+'_outlet').text(outletNo);
                }else if(realPt == 0){
                    var outletNo = parseInt(outletPt) - 1;
                    $('#planPt_' + ptType+'_outlet').text(outletNo);
                }
                var totalPlanPt = $('#planPt_' + ptKey_total).text();
                var newTotalPlanPt = parseInt(totalPlanPt) + change;
                $('#planPt_' + ptKey_total).text(newTotalPlanPt);
                // Update balance points
                var typeReqPt = $('#reqPt_' + ptType).text();
                $('#balancePt_' + ptType).text(parseInt(typeReqPt) - newTypePlanPt);
                var totalReqPt = $('#reqPt_' + ptKey_total).text();
                $('#balancePt_' + ptKey_total).text(parseInt(totalReqPt) - newTotalPlanPt);
            }
        }
        
        // Calendar Functions

        // Getter functions! Use them
        /**
         *  Return visit count
         * @param dayOfMonth, should be 1 - 31
         * @return Integer
         */
        function getVisitCountByDay(dayOfMonth) {
            let countSpan = $('#visitCount_' + dayOfMonth);
            return countSpan ? parseInt(countSpan.text()) : 0;
        }
        
        function refreshCalendar(targetObjSFId, targetSObjName) {
            // Gather the visitation info of input row
            var visitDayStrInput = $('#visitDayStr_' + targetObjSFId).closest('td').find('input');
            var visitDayStr = visitDayStrInput.val();
            var hasVisitArray = [];
            if (visitDayStr && visitDayStr.length > 0) {
                var visitDays = visitDayToArray(visitDayStr);
                for (var i = 0; i < visitDays.length; i++)
                    hasVisitArray['key' + visitDays[i]] = true;
            }
            // refresh checkbox
            $('#calendar .visitCheckboxDiv').each(function() {
                var theCheckboxDiv = $(this);
                var day = $(this).attr('id').replace(/^visitCheckboxDiv_/, '');
                if (hasVisitArray['key' + day])
                    setVisitCheckboxDiv(theCheckboxDiv, true);
                else
                    setVisitCheckboxDiv(theCheckboxDiv, false);
                	theCheckboxDiv.attr('onclick', '').off('click');
                	theCheckboxDiv.click(function() {
                    toggleVisitCheckboxDiv(this);
                    renderVisitCheckboxDiv(this, targetObjSFId, targetSObjName);
                });
            });
        }
        
        function renderVisitCheckboxDiv(cbDiv, targetSObjId, targetSObjName) {
            if (cbDiv) {
                if (!(cbDiv instanceof jQuery)) cbDiv = $(cbDiv);
                var rollbackChange = true;
                var isChecked = cbDiv.hasClass('visitCheckboxDivClicked');
                if (!isLocked) {
                    var theDay = cbDiv.attr('id').replace(/^visitCheckboxDiv_/, '');
                    // Update point calculations in table
                    var change = updateTargetTablePoint(targetSObjId, isChecked);
                    //if (change && parseInt(theDay) < 16)
                    if (change) {
                        // Update visitation count
                        updateVisitCount(theDay, isChecked);
                        // Update visitation list
                        updateVisitList(theDay, isChecked, targetSObjId, targetSObjName);
                        // Update visitation date in table
                        updateTargetTableVisitDate(targetSObjId, theDay, isChecked);
                        // Update point table summary
                        updatePointTable(targetSObjId, change);
                        rollbackChange = false;
                    }
                }
                if (rollbackChange) { // Do not allow to change checkbox
                    setVisitCheckboxDiv(cbDiv, !isChecked);
                    return false;
                }
            }
            return true;
        }
        function toggleVisitCheckboxDiv(cbDiv) {
            if (!(cbDiv instanceof jQuery)) cbDiv = $(cbDiv);
            var isChecked = cbDiv.hasClass('visitCheckboxDivClicked');
            setVisitCheckboxDiv(cbDiv, !isChecked);
        }
        function setVisitCheckboxDiv(cbDiv, isChecked) {
            if (isChecked) {
                if (!cbDiv.hasClass('visitCheckboxDivClicked'))
                    cbDiv.addClass('visitCheckboxDivClicked');
                cbDiv.text('{!$Label.ASI_HK_CRM_VF_VISIT_SelectedVisit}');
            } else {
                cbDiv.removeClass('visitCheckboxDivClicked');
                cbDiv.text('{!$Label.ASI_HK_CRM_VF_VISIT_ClickToVisit}');
            }
        }
        function updateVisitCount(day, isChecked) {
            var countSpan = $('#visitCount_' + day);
            if (countSpan) {
                var origCount = parseInt(countSpan.text());
                var changeCount = isChecked ? 1 : -1;
                countSpan.text(origCount + changeCount);
            }
        }
        function updateVisitList(day, isChecked, targetSObjId, targetSObjName) {
            var outletStrSpan = $('#outletStrDiv_' + day);
            if (outletStrSpan) {
                if(isChecked) {
                    if(!dailyOutletMap[day]) {
                    	dailyOutletMap[day] = {};
                    }
                    dailyOutletMap[day][targetSObjId] = targetSObjName;
                } else {
                	delete dailyOutletMap[day][targetSObjId];
                }
                
                var htmlStr = '';
                var outletList = '';
                var count = 0;
                var needToShowMore = false;
                for(var id in dailyOutletMap[day]) {
                	if(count >= 2) {
                        needToShowMore = true;
                    } else {
                        htmlStr += '- <a href="/' + id + '">' + dailyOutletMap[day][id] + '</a>' + '<br />';
                    }
                    outletList += '- <a href="/' + id + '">' + dailyOutletMap[day][id] + '</a>' + '<br />';
                    count ++;
               	}
                if(needToShowMore) {
                    htmlStr += '<div onmouseover="showDetail(this)" onmouseout="hideDetail(this)"><u>more</u>';
                    htmlStr += '<div class="outletStrDivDetail">' + outletList + '</div>'; 
                    htmlStr += '</div>';
                }
                htmlStr += "<br />";

                                
                outletStrSpan.html(htmlStr);
            }
        }
        
        // Event Functions
        function showDetail(outletStrSpan) {
            $(outletStrSpan).children(".outletStrDivDetail").show();
        }
        
        function hideDetail(outletStrSpan) {
            $(outletStrSpan).children(".outletStrDivDetail").hide();
        }
        
        // Help Functions
        
        function searchTargetSObjIdByTR(theTR) {
            var result = null;
            $('.targetObjSFId').each(function() {
                if ($(this).closest('tr')[0].rowIndex == theTR.rowIndex) {
                    result = $(this).text();
                    return false;
                }
            });
            return result;
        }
        
        function searchTargetSObjNameByTR(theTR) {
            var result = null;
            $('.targetObjName').each(function() {
                if ($(this).closest('tr')[0].rowIndex == theTR.rowIndex) {
                    result = $(this).text();
                    return false;
                }
            });
            return result;
        }
        
        function visitDayToArray(visitDayStr) { return strToArray(visitDayStr, visitDayDelim); }
        function strToArray(theStr, delim) {
            var resultElements = [];
            if (theStr && theStr.length > 0) {
                var tempElements = theStr.split(delim);
                for (var i = 0; i < tempElements.length; i++) {
                    resultElements.push(tempElements[i].replace(/^\s+|\s+$/g, ''));
                }
            }
            return resultElements;
        }
        function visitDayToStr(visitDayArray) { return arrayToStr(visitDayArray, visitDayDelim); }
        function arrayToStr(theArray, delim) {
            var resultStr = '';
            if (theArray) {
                for (var i = 0; i < theArray.length; i++)
                    resultStr += delim + theArray[i];
            }
            return resultStr.substring(delim.length);
        }
        String.prototype.format = function () {
            var args = arguments;
            return this.replace(/\{(\d+)\}/g, function (m, n) { return args[n]; });
        };
        
        function noenter(ev)  {
          if (window.event && window.event.keyCode == 13 || ev.which == 13) {
              doSearchName();
              return false;
           } else {
                return true;
           }
       }
       
       function searchGradeChange(ev)  {
           doSearchName();
           return false;
       }
    </script>
    <apex:form id="wholeForm" style="width:1250px;min-height:530px;">
        <apex:actionFunction name="doSearchName" action="{!NameSearch}" />
        <apex:pageMessages id="pageMsgs"/>
        <apex:pageBlock id="wholePageBlock" title="{!$ObjectType.ASI_HK_CRM_Visitation_Plan__c.Label}" rendered="{!NOT(hasError)}">
            <apex:pageBlockButtons id="wholePageBlockBtns" location="top">
                <apex:commandButton action="{!saveChanges}" value="{!$Label.ASI_HK_CRM_VF_COMMON_BTN_Save}" reRender="pageMsgs" rendered="{!isLocked != 'true' && !Contains(visitPlanHeader.recordtype.name,'Submit')}"/>
                <apex:commandButton action="{!quickSaveChanges}" value="{!$Label.ASI_HK_CRM_VF_COMMON_BTN_QuickSave}" reRender="pageMsgs" rendered="{!isLocked != 'true' && !Contains(visitPlanHeader.recordtype.name,'Submit')}"/>
                <apex:commandButton action="{!URLFOR($Action.ASI_HK_CRM_Visitation_Plan__c.View, visitPlanId)}" value="{!IF(isLocked != 'true', $Label.ASI_HK_CRM_VF_COMMON_BTN_Cancel, $Label.ASI_HK_CRM_VF_COMMON_BTN_Back)}"/>
                <apex:commandButton action="{!confirm}" value="Confirm" reRender="pageMsgs" rendered="{!visitPlanHeader.ASI_HK_CRM_Confirmed__c != true && Contains(visitPlanHeader.recordtype.name,'Submit')}"/>
            </apex:pageBlockButtons>
            <apex:outputPanel id="wholePanel">
                <apex:outputPanel id="headerPanel" layout="block" style="width:100%;height:340px;min-width:1150px;">
                    <apex:outputPanel id="calPanel" layout="block" style="float:left;width:1030px;">
                        <div id='calendar'></div>
                        <script type="text/javascript">
                            function createCheckboxEventObj(year, month, day, checked, editable) {
                                var sTitleClickToVisit = '{!$Label.ASI_HK_CRM_VF_VISIT_ClickToVisit}';
                                var sTitleNotAvailable = '{!$Label.ASI_CRM_VF_VISIT_NotAvailable}';
                                var sTitle = editable ? sTitleClickToVisit : sTitleNotAvailable;

                                return {
                                    title: sTitle,
                                    allDay: true,
                                    start: new Date(year, parseInt(month) - 1, day),
                                    editable: false,
                                    color: '#60c9d2',
                                    type: 'checkboxEvent',
                                    checked: checked
                                };
                            }

                            function createOutletStrObj(year, month, day, outletStr) {
                                return {
                                    title: outletStr,
                                    allDay: true,
                                    start: new Date(year, parseInt(month) - 1, day),
                                    editable: false,
                                    type: 'outletStr',
                                    outletStr: outletStr
                                };
                            }

                            function createVisitCountEventObj(year, month, day, visitCount, outletStr) {
                                return {
                                    title: "{!$Label.ASI_HK_CRM_VF_VISIT_VisitCount}".format(visitCount.toString()),
                                    allDay: true,
                                    start: new Date(year, parseInt(month) - 1, day),
                                    editable: false,
                                    type: 'visitCountEvent',
                                    visitCount: visitCount,
                                    outletStr: outletStr
                                };
                            }
                            function createVisitCheckbox(event) {
                                var theDay = $.fullCalendar.parseDate(event.start).getDate();
                                var cbDiv = document.createElement('div');
                                cbDiv.className = 'visitCheckboxDiv';
                                cbDiv.id = 'visitCheckboxDiv_' + theDay;
								var cbText = document.createTextNode('{!$Label.ASI_HK_CRM_VF_VISIT_ClickToVisit}');
                                cbDiv.appendChild(cbText);
                                if (event.checked) {
                                    setVisitCheckboxDiv(cbDiv, true);
                                }
                                return cbDiv;
                            }
                            function createVisitCountElement(event) {
                                var theDay = $.fullCalendar.parseDate(event.start).getDate();
                                
                                var vcDiv = document.createElement('div');
                                vcDiv.className = 'visitCountDiv';
                                vcDiv.id = 'visitCountDiv_' + theDay;
                                
                                if("{!visitPlanHeader.ASI_CRM_VN_Period__c == 'First Half'}" == "true" && theDay > 15) {
                                	return vcDiv;
                                } else if("{!visitPlanHeader.ASI_CRM_VN_Period__c == 'Second Half'}" == "true" && theDay <= 15) {
                                	return vcDiv;      
                                }
                                
                                var htmlStr = "{!$Label.ASI_HK_CRM_VF_VISIT_VisitCount}".format(
                                    '<span id="visitCount_' + theDay + '">'
                                    + event.visitCount
                                    + '</span>'
                                );
                                
                                var outletList = event.outletStr.split(";");
                                for(var index in outletList) {
                                	var outlet = outletList[index];
                                    var outletIdNameArray = outlet.split(":");
                                    if(outletIdNameArray.length === 2) {
                                        if(!dailyOutletMap[theDay]) {
                                    		dailyOutletMap[theDay] = {};
                                        }
                                        dailyOutletMap[theDay][outletIdNameArray[0]] = outletIdNameArray[1];
                                    }
                                }
                                
                                htmlStr += "<br />";
                                htmlStr += '<div id="outletStrDiv_' + theDay + '" width="100%">';
                                var outletList = '';
                                var count = 0;
                                var needToShowMore = false;
                                for(var id in dailyOutletMap[theDay]) {
                                    if(count >= 2) {
                                        needToShowMore = true;
                                    } else {
                                        htmlStr += '- <a href="/' + id + '">' + dailyOutletMap[theDay][id] + '</a>' + '<br />';
                                    }
                                    outletList += '- <a href="/' + id + '">' + dailyOutletMap[theDay][id] + '</a>' + '<br />';
                                    count ++;
                                }
                                if(needToShowMore) {
                                    htmlStr += '<div onmouseover="showDetail(this)" onmouseout="hideDetail(this)"><u>more</u>';
                                    htmlStr += '<div class="outletStrDivDetail">' + outletList + '</div>'; 
                                    htmlStr += '</div>';
                                }
                                htmlStr += '<br />';
                                htmlStr += '</div>';
                                vcDiv.innerHTML = htmlStr;
                                
                                return vcDiv;
                            }
                            function createOutletStrElement(event) {
                                var theDay = $.fullCalendar.parseDate(event.start).getDate();
                                var vcDiv = document.createElement('div');
                                vcDiv.className = 'outletStrDiv';
                                vcDiv.id = 'outletStrDiv_' + theDay;
                                vcDiv.innerHTML = event.outletStr;
                                return vcDiv;
                            }
                        
                            $(document).ready(function() {
                                // Create events for visit checkbox and visit count elements
                                var visitEvents = [];
								var sEditable = false;
                                $('.initVisitCount').each(function() {
                                    var data = $(this).text();
                                    var dataArray = data.split('|');
                                    if (dataArray.length === 5) {
                                        if("{!Contains(visitPlanHeader.recordtype.name,'Submit') == false}" == "true"){
                                            if("{!visitPlanHeader.ASI_CRM_VN_Period__c == 'First Half'}" == "true" && dataArray[2] > 15) {
                                                //Not allow to edit
                                            } else if("{!visitPlanHeader.ASI_CRM_VN_Period__c == 'Second Half'}" == "true" && dataArray[2] <= 15) {
                                                //Not allow to edit 
                                            } else {
                                            	visitEvents.push(createCheckboxEventObj(dataArray[0], dataArray[1], dataArray[2], false, sEditable));
                                            }
                                        }
                                            visitEvents.push(createVisitCountEventObj(dataArray[0], dataArray[1], dataArray[2], dataArray[3], dataArray[4], sEditable));
                                    }
                                });

                                // add holidays to Event
                                let holidays = {!holidays}.map(holiday => {
                                    return {
                                        title: holiday.Name,
                                        start: holiday.ASI_CRM_Date_From__c,
                                        end: holiday.ASI_CRM_Date_To__c
                                    }
                                });
                                
                                // initialize the calendar
                                theCalendar.fullCalendar({
                                    header: {
                                        left: '',
                                        center: 'title',
                                        right: ''
                                    }
                                    , aspectRatio: 2.2
                                    , weekMode: 'fixed'
                                    , year: targetVisitYear
                                    , month: targetVisitMonth - 1
                                    , date: defVisitDay
                                    , events: visitEvents
                                    , eventRender: function(event, element) {
                                        if (event.type === 'checkboxEvent') {
                                            return createVisitCheckbox(event);
                                        } else if (event.type === 'visitCountEvent') {
                                            return createVisitCountElement(event);
                                        }else if(event.type === 'outletStr'){
                                            return createOutletStrElement(event);
                                        } 
                                    },
                                });
                                $('.floatingTable').vfFloatingHeaders();


                                // mark holiday div as RED
                                holidays.forEach(function (holiday) {
                                    var currentDate = new Date(holiday.start);
                                    var endDate = new Date(holiday.end);

                                    while(currentDate <= endDate){
                                        $('.fc-day-number').each(function(index, element){
                                            if($(element).text() == currentDate.getDate() ){
                                                if(!$(element).parent().parent().hasClass('fc-other-month')){
                                                    $(element).parent().parent().css('background-color', 'red');
                                                }
                                            }
                                        });
                                        currentDate.setDate(currentDate.getDate()+1);
                                    }
                                })
                            });
                            var theCalendar = $('#calendar');
                        </script>
                    </apex:outputPanel>
                    <apex:outputPanel id="pointPanel" layout="block" style="float:left;width:120px;margin-left:20px;height:100px;">
                        <table id="vptTable">
                            <thead>
                            
                            </thead>
                            <tbody>
                                <apex:repeat value="{!ptKeyList}" var="ptKey">
                                    <apex:variable var="point" value="{!keyToVisitPointMap[ptKey]}" />
									<tr>
                                        <th class="pointTH pointTHLeft">Type</th>
                                        <td>{!point.type}</td> 
                                    </tr>
                                    <tr>
                                        <th class="pointTH pointTHLeft">No. of Visit</th>
                                        <td id="planPt_{!ptKey}">{!point.plannedPt}</td>
                                    </tr>
                                    <tr>
                                        <th class="pointTH pointTHLeft">No. of Outlet</th>
                                        <td id="planPt_{!ptKey}_outlet">{!point.noOutlet}</td>
                                    </tr>
                                    <tr>
                                        <td colspan="2">
                                        <br />
                                        </td>
                                    </tr>
                                </apex:repeat>
                            </tbody>
                        </table>
                    </apex:outputPanel>
                </apex:outputPanel>
                
                <apex:pageBlock title="Find Account" mode="edit" id="criteria">
                    <table cellpadding="2" cellspacing="2">
                    <tr>
                        <td>{!$ObjectType.Account.Fields.Name.Label}</td>
                        <td>
                            <apex:inputText value="{!searchAccountName}" id="docStrId" onkeypress="return noenter(event);"/>
                        </td>
                        <td>
                            <apex:outputLabel value="Address: "/>
                            <apex:inputText value="{!searchAddress}" />
                        </td>
                        <td>
                            <apex:outputLabel value="Area: " for="areas"/>
                            <apex:selectList html-class="form-control" value="{!selectedArea}" size="1">
                                <apex:selectOptions value="{!areas}"/>
                            </apex:selectList>
                        </td>
                        <td>
                            <apex:outputLabel value="Province: " for="provinces"/>
                            <apex:selectList html-class="form-control" value="{!selectedProvince}" size="1">
                                <apex:selectOptions value="{!provinces}"/>
                            </apex:selectList>
                        </td>
                        <td>
                            <apex:outputLabel value="District: " for="districts"/>
                            <apex:selectList html-class="form-control" value="{!selectedDistrict}" size="1">
                                <apex:selectOptions value="{!districts}"/>
                            </apex:selectList>
                        </td>

                        <td>
                            <apex:commandButton value="Search" action="{!NameSearch}"/>
                            <apex:commandButton value="Reset" action="{!ResetNameSearch}"/>
                        </td>
                    </tr>      
                    </table>
                </apex:pageBlock>
                
                <script type="text/javascript">var headerPanelId = '{!$Component.headerPanel}';</script>
                <apex:outputPanel id="contentPanel" layout="block" style="width:100%;min-height:250px;height:250px;overflow:auto;margin-top:10px;">
                    <apex:pageBlockTable id="visitTargetTable" value="{!visitTableRows}" var="row" styleClass="floatingTable"
                        onRowClick="clickTR(this)" rowClasses="visitTargetTR"
                        columnsWidth="150px, 75px, 130px, 100px, 100px, 75px, 100px, 80px, 70px, 70px, 140px, 80px">
                    
                        <apex:column id="targetNameCol">
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.Account.Fields.Name.Label+' '+ IF(sortExpression=='name',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort1">
                                    <apex:param value="name" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <div class="targetObjName">{!row.targetSObj.Name}</div>
                            <div class="targetObjSFId" style="display:none">{!row.targetSObj.Id}</div>
                            <div id="tgType_{!row.targetSObj.Id}" style="display:none">{!row.customType}</div>
                            <div id="tgWorthPt_{!row.targetSObj.Id}" style="display:none">{!row.worthPt}</div>
                        </apex:column>
                                               
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_VN_OutletType__c.Label + ' ' + IF(sortExpression=='ASI_CRM_VN_OutletType__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort2">
                                    <apex:param value="ASI_CRM_VN_OutletType__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_VN_OutletType__c}"/>
                        </apex:column>
                        
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_Outlet_Sub_Type__c.Label + ' ' + IF(sortExpression=='ASI_CRM_Outlet_Sub_Type__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort3">
                                    <apex:param value="ASI_CRM_Outlet_Sub_Type__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_Outlet_Sub_Type__c}"/>
                        </apex:column>
                        
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_CN_Image__c.Label + ' ' + IF(sortExpression=='ASI_CRM_CN_Image__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort4">
                                    <apex:param value="ASI_CRM_CN_Image__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_CN_Image__c}"/>
                        </apex:column>
                        
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_ServicePack__c.Fields.ASI_CRM_CallFrequency__c.Label + ' ' + IF(sortExpression=='ASI_CRM_Service_Pack__r.ASI_CRM_CallFrequency__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort5">
                                    <apex:param value="ASI_CRM_Service_Pack__r.ASI_CRM_CallFrequency__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputText value="{!IF(row.targetSObj.RecordType.DeveloperName = 'ASI_CRM_VN_Off_Trade_Outlet', row.targetSObj.ASI_CRM_Call_Frequency__c, row.targetSObj.ASI_CRM_Service_Pack__r.ASI_CRM_CallFrequency__c)}"/>
                        </apex:column>
                        
                        <!--><apex:column headervalue="{!$ObjectType.ASI_CRM_ServicePack__c.Fields.ASI_CRM_CallFrequency__c.Label}" value="{!row.targetSObj.Pros_Segmentations__r[0].ASI_CRM_SG_Service_Pack__r.ASI_CRM_CallFrequency__c}"/><-->
                        
                        <apex:column id="targetPlannedPtCol" headerValue="{!$Label.ASI_HK_CRM_VF_VISIT_PlannedPoint}">
                            <div id="tgPlanPt_{!row.targetSObj.Id}">{!row.plannedPt}</div>
                        </apex:column>
                        
                        <apex:column id="visitDayCol" headerValue="{!$Label.ASI_HK_CRM_VF_VISIT_VisitDate}">
                            <div id="visitDayStr_{!row.targetSObj.Id}">{!row.visitDayStr}</div>
                            <apex:inputHidden id="visitDayStrInput" value="{!row.visitDayStr}"/>
                        </apex:column>
                        
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_VN_Region__c.Label + ' ' + IF(sortExpression=='ASI_CRM_VN_Region__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort7">
                                    <apex:param value="ASI_CRM_VN_Region__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_VN_Region__c}"/>
                        </apex:column>
                        
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_Area__c.Label + ' ' + IF(sortExpression=='ASI_CRM_Area__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort8">
                                    <apex:param value="ASI_CRM_Area__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_Area__c}"/>
                        </apex:column>
                        
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_VN_Province__c.Label + ' ' + IF(sortExpression=='ASI_CRM_VN_Province__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort9">
                                    <apex:param value="ASI_CRM_VN_Province__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_VN_Province__c}"/>
                        </apex:column>
                        
                        <!--><apex:column id="targetAddressCol" value="{!row.targetSObj.ASI_CRM_CN_Address__c}"/><-->
                        <apex:column >
                            <apex:facet name="header">   
                                <apex:commandLink action="{!ViewData}" value="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.Fields.ASI_CRM_CN_Address__c.Label + ' ' + IF(sortExpression=='ASI_CRM_CN_Address__c',IF(sortDirection='ASC','▲','▼'),'')}" id="cmdSort6">
                                    <apex:param value="ASI_CRM_CN_Address__c" name="column" assignTo="{!sortExpression}" />
                                </apex:commandLink>
                            </apex:facet>
                            <apex:outputField value="{!row.targetSObj.ASI_CRM_CN_Address__c}"/>
                        </apex:column>
                        
                         <apex:column id="targetRecordTypeCol" headerValue="{!$ObjectType.ASI_CRM_AccountsAdditionalField__c.fields.RecordTypeId.Label}">
                            <div id="tgPlanPt_{!row.targetSObj.RecordType.Name}">{!row.targetSObj.RecordType.Name}</div>
                        </apex:column>
                        
                    </apex:pageBlockTable>
                    <script type="text/javascript">var visitTargetTableId = '{!$Component.visitTargetTable}';</script>
                </apex:outputPanel>
                <script type="text/javascript">var contentPanelId = '{!$Component.contentPanel}';</script>
            </apex:outputPanel>
            <script type="text/javascript">var wholePanelId = '{!$Component.wholePanel}';</script>
        </apex:pageBlock>
    </apex:form>
    <div id="initData" style="display:none;">
        <apex:repeat id="initVisitCountRepeat" value="{!dateToVisitCountMap}" var="theDate">
        <div class="initVisitCount">{!TEXT(YEAR(theDate)) & '|' & TEXT(MONTH(theDate)) & '|' & TEXT(DAY(theDate)) & '|' & TEXT(dateToVisitCountMap[theDate]) & '|' & dateToOutletsMap[theDate]}</div>
        </apex:repeat>
    </div>
    <script type="text/javascript">
        function adjustContentSize() {
            var windowHeight = $(window).height();
            var wholeForm = document.getElementById(wholePanelId);
            if (windowHeight) windowHeight -= 70;
            if (!windowHeight || windowHeight < 590)
                windowHeight = 590;
            wholeForm.style.height = '' + windowHeight + 'px';
            
            var headerPanel = document.getElementById(headerPanelId);
            if (headerPanel) {
                var newHeight = windowHeight - headerPanel.offsetHeight - 20;
                if (newHeight >= 250)
                    document.getElementById(contentPanelId).style.height = '' + newHeight + 'px';
            }
        }
        
        adjustContentSize();
    </script>
</apex:page>