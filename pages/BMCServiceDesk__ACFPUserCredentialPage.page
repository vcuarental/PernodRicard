<apex:page controller="BMCServiceDesk.ACFPUserCredential" standardStylesheets="false" showheader="false" sidebar="false" lightningStylesheets="{!lightningUI}">
 <link rel="stylesheet" type="text/css" href="{!$Resource.SDEFExtJS}/resources/css/ext-all.css" id="ext-all-css"/>
<link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/BMCStyleSheet.css" />
<apex:outputPanel layout="none" rendered="{!If(userLanguage=='iw','true','false')}">
    <link rel="stylesheet" href="{!$Resource.SDEFStyles}/ACFPCredentialPageRTL.css" type="text/css" />
</apex:outputPanel>

<apex:includeScript value="{!$Resource.BMCServiceDesk__SDEFExtJS}/adapter/ext/ext-base.js" id="ext-base-js"/>
<apex:includeScript value="{!$Resource.BMCServiceDesk__SDEFExtJS}/ext-all.js" id="ext-all-js"/>
<apex:outputPanel rendered="{!!lightningUI}">
	<link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/ACFPCredentialPage.css" />
</apex:outputPanel>
<apex:outputPanel rendered="{!lightningUI}">
    <link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/ACFPCredentialPageForLightning.css" />
    <apex:slds />
    <c:RFMessagingComponent />
</apex:outputPanel>
<apex:outputPanel id="errorPanel">
<script>
var errorMsg= '{!JSENCODE(errorString)}';
var changeDiscoveryPwReturnMsg= '{!JSENCODE(changeDiscoveryPwReturnMsg)}';
var resetDiscoveryPwReturnMsg= '{!JSENCODE(resetDiscoveryPwReturnMsg)}';
var isResetDiscoveryPwReturnTrue= {!isResetDiscoveryPwReturnTrue};
var fromStdLayout = '{!JSENCODE($CurrentPage.parameters.standardLayout)}';
var reqContextIdStdLayout = '{!JSENCODE($CurrentPage.parameters.reqContextId)}';
var objectTypeStdLayout = '{!JSENCODE($CurrentPage.parameters.objectType)}';
var isForBCM ='{!JSENCODE($CurrentPage.parameters.isForBCM)}';
var ciActionsScreenWidth = 410;
var ciActionsScreenHeight = 345;
var tabOutImg = "{!$Resource.SDEFExtJS}/resources/images/default/shared/blue-loading.gif";
var waitMsg;
var DiscoveryOldNewPasswordCheck = '{!JSENCODE($Label.DiscoveryOldNewPasswordCheck)}';
var DiscoveryNewPasswordCheck = '{!JSENCODE($Label.DiscoveryNewPasswordCheck)}';
var DiscoveryOldPasswordInvalid = '{!JSENCODE($Label.DiscoveryOldPasswordInvalid)}';
var DiscoveryPasswordChangeSuccessful = '{!JSENCODE($Label.DiscoveryPasswordChangeSuccessful)}';
var DiscoveryPasswordResetSuccessful = '{!JSENCODE($Label.DiscoveryPasswordResetSuccessful)}';
var SSRequiredMsg = '{!JSENCODE($Label.SSRequiredMsg)}';
var passwordValidationMsg = '';
var isPasswordChangedSuccess = {!isPasswordChangedSuccess};

if(fromStdLayout == 'true'){
    if({!isDiscoveryEnabled})
        document.title='{!JSENCODE($Label.RFDisclaunchWindowHeader)}';
    else
        document.title='{!JSENCODE($Label.ACFPlaunchWindowHeader)}';
}
function ciScreenLeft(){
return parseInt((screen.availWidth/2) - (ciActionsScreenWidth/2));
}
function ciScreenTop(){
return parseInt((screen.availHeight/2) - (ciActionsScreenHeight/2));
}

function setParentVar(){
    
    if(errorMsg == null || errorMsg ==''){
        if(fromStdLayout != null && fromStdLayout == 'true'){
            window.opener.location.href = window.opener.location.href;
            if(window.opener.progressWindow){
                window.opener.progressWindow.close();
            }
            window.close();
        }else{
            if(typeof(isForBCM) != 'undefined' && isForBCM != null && isForBCM == 'true'){
                parent.setBCMPopUpVar(true);
            }else{
                parent.setPopUpVar(true);
                window.parent.popUpWindow.close();
            }
        }
    }else{
        if(errorMsg != '{!JSENCODE($Label.ACInvalidCredentialError)}'){
            document.getElementById('errorDiv').style.height = '60px';
            if(Ext.isIE)
                window.parent.popUpWindow.setHeight(272);
            else
                window.parent.popUpWindow.setHeight(257);
        }else{
            document.getElementById('errorDiv').style.height = '30px';
            window.parent.popUpWindow.setHeight(227);
        }
    }
}

function handleSyncPopup(){
    if(errorMsg == null || errorMsg ==''){
        window.parent.location.reload(true);
    }
}

function waitbox(timeout){ 
    if(parseInt(timeout)>0) setTimeout("waitMsg.hide()", timeout);
    waitMsg = new Ext.Window({ 
        height: 100,width: 200,resizable: false, closable: false, header: false,frame: false, modal: true,shadow: false, baseCls: 'waitboxCls', 
        items : [{ xtype:'panel',height:100, width:200, border: false,bodyStyle:'background-color:transparent;border:none;', html: '<div align="center"><img src="' +  tabOutImg +  '"/></div>' }] 
    }); 
    waitMsg.show();
}

function displayMessage(returnMessage)
{
    var errorId = document.getElementById('{!$Component.ACFPCredentialForm.error_id}');
    if(isPasswordChangedSuccess ==  true || isResetDiscoveryPwReturnTrue == true){
    	errorId.className = 'clsSuccessMessage';
    	isPasswordChangedSuccess = false;
    }else{
    	errorId.className = 'clsErrorMessage';
    }
    errorId.style['display']= 'inline';
    errorId.textContent = returnMessage;
	
	if(typeof(waitMsg) != 'undefined' && waitMsg)
        waitMsg.hide();
	
	if(typeof(hideLoadingMask) != 'undefined'){
		hideLoadingMask();
    }
}

function beforelogin(){
    var fpusername=document.getElementById('{!$Component.ACFPCredentialForm.fpUserName}').value;
    var fppassword=document.getElementById('{!$Component.ACFPCredentialForm.fpPassword}').value;
    if(fpusername == null || fpusername == '' ||fppassword== null || fppassword =='' ){
        displayMessage('{!JSENCODE($Label.ACInvalidCredentialError)}');
    }else{
        login();
    }
return false;
}

function beforeSync(){
    var fpusername=document.getElementById('{!$Component.ACFPCredentialForm.fpUserName}').value;
    var fppassword=document.getElementById('{!$Component.ACFPCredentialForm.fpPassword}').value;
    if(fpusername == null || fpusername == '' ||fppassword== null || fppassword =='' ){
        displayMessage('{!JSENCODE($Label.InvalidPassword)}');
    }else{
        synclogin();
    }
return false;
}

function validateDiscoveryOldPw()
{
    var fpOldPw=document.getElementById('{!$Component.ACFPCredentialForm.fpOldPw}').value;
    var fpNewPassword=document.getElementById('{!$Component.ACFPCredentialForm.fpNewPw}').value;
    var fpConfirmPassword=document.getElementById('{!$Component.ACFPCredentialForm.fpConfirmNewPw}').value;
        if(fpOldPw == null || fpOldPw == '' ||fpNewPassword== null || fpNewPassword ==''||fpConfirmPassword== null || fpConfirmPassword =='' )
            {
                displayMessage(SSRequiredMsg);
            }
        else if(!NewPasswordValidation())
            {
                displayMessage(passwordValidationMsg);
            }
         else if(fpNewPassword !=fpConfirmPassword)
            {
                displayMessage(DiscoveryNewPasswordCheck);
            }
        else if(fpNewPassword == fpOldPw)
            {
                displayMessage(DiscoveryOldNewPasswordCheck);
            }
        else{
                validateOldPw(fpOldPw);
            }
}

function beforeChangePw(response){
    if(response == 'false')
    {    
        displayMessage(DiscoveryOldPasswordInvalid);
		if(typeof(hideLoadingMask) != 'undefined'){
            hideLoadingMask();
        }
        return;
    }
    else{
        var fpNewPassword=document.getElementById('{!$Component.ACFPCredentialForm.fpNewPw}').value;
        changePw(fpNewPassword);          
    }
}

function afterPwChange()
{    
    if(changeDiscoveryPwReturnMsg == 'Success')
    {   
        displayMessage(DiscoveryPasswordChangeSuccessful);
    }
    else
    {
        displayMessage(changeDiscoveryPwReturnMsg);
    }
	
	if(typeof(hideLoadingMask) != 'undefined'){
        hideLoadingMask();
    }
}

function NewPasswordValidation(){
    var Valid = true;
    var newPassword=document.getElementById('{!$Component.ACFPCredentialForm.fpNewPw}').value;
    if(newPassword.length < 8) {
    	passwordValidationMsg = '{!JSENCODE($Label.PasswordLengthValidation)}';
        Valid = false;
    }      
    re = /[0-9]/;
    if(!re.test(newPassword)) {
    	passwordValidationMsg = '{!JSENCODE($Label.PasswordNumberValidation)}';
        Valid = false;
    }
    re = /[a-zA-Z]/;
    if(!re.test(newPassword)) {
    	passwordValidationMsg = '{!JSENCODE($Label.PasswordCharValidation)}';
        Valid = false;
    }   
    return Valid;
}

function beforeResetPw(){
    resetDiscoveryPw();
}

function afterPwReset()
{    
    var formHeader = document.getElementById('formheader_Id');
    var resetConfirmLabel = document.getElementById('resetConfirmLabel');
    if(formHeader){
        formHeader.style.display = 'none';
    }
        	
    if(resetConfirmLabel){
        resetConfirmLabel.style.display = 'none';
    }
    if(resetDiscoveryPwReturnMsg == 'Success')
    {   
        displayMessage(DiscoveryPasswordResetSuccessful);
        var buttonYes = document.getElementById('ResetPwButton');
        var buttonNo = document.getElementById('cancelResetPwButton');
        buttonYes.style.display = "none";
        buttonNo.value = "{!JSENCODE($Label.Close)}";
    }
    else
    {
        displayMessage(resetDiscoveryPwReturnMsg);
    }
    
	if(typeof(hideLoadingMask) != 'undefined'){
        hideLoadingMask();
    }
}

function closeWindow(){
    if(fromStdLayout == 'true'){
        if (window.opener) window.opener.close();
        window.close();
    }else{
        window.parent.popUpWindow.close();
    }
}

Ext.onReady(function(){
    var textObj = document.getElementById('{!$Component.ACFPCredentialForm.fpUserName}');
    if(textObj)
    textObj.focus();
    });
    
	if(typeof(hideLoadingMask) != 'undefined'){
        hideLoadingMask();
    }
</script>
</apex:outputPanel> 

<apex:form styleClass="{!IF(userLanguage == 'iw','formClass slds-scope rtlAlignmentCls','formClass slds-scope')}" id="ACFPCredentialForm">
    <apex:actionFunction Name="login" action="{!save}" rerender="errorPanel,errorMessagePanel,fpPassword" onComplete="waitMsg.hide();setParentVar();"/>
    <apex:actionFunction Name="synclogin" action="{!validateDiscoverycreds}" rerender="errorPanel,errorMessagePanel,fpPassword" onComplete="waitMsg.hide();handleSyncPopup();"/>
    <apex:actionFunction Name="changePw" action="{!changeDiscoveryPw}" rerender="errorPanel,errorMessagePanel,fpPassword" onComplete="afterPwChange();">
        <apex:param name="changedDiscoveryPassword" value="" />
     </apex:actionFunction>
     <apex:actionFunction Name="validateOldPw" action="{!validateOldPw}" rerender="none" onComplete="beforeChangePw('{!isValidateDiscoveryPwReturnTrue}');" >
        <apex:param name="oldDiscoveryPassword" value="" />
     </apex:actionFunction>
     <apex:actionFunction Name="resetDiscoveryPw" action="{!resetDiscoveryPw}" rerender="errorPanel,errorMessagePanel" onComplete="afterPwReset();"/>
    
    <div id="formheader_Id" class="headerClass"> <img class="headerIconClass" src="{!$Resource.SDEFStyles}/SDEFicons/{!if(isChangePasswordClicked || isResetPasswordClicked,'sf_login_Lock.png','sf_login_keys.png')}"/>
        <apex:outputLabel value="{!if(isDiscoveryEnabled || SyncPassword, if(isChangePasswordClicked,$Label.bmcservicedesk__sschangepassword,if(isResetPasswordClicked,$Label.bmcservicedesk__discoverypasswordreset,RFCredentialPageHeader)), if(isChangePasswordClicked,$Label.bmcservicedesk__sschangepassword, if(isResetPasswordClicked,$Label.bmcservicedesk__discoverypasswordreset,ACFPCredentialPageHeader)))}" />
    </div>
    <div class="clsFormDiv" id="resetConfirmLabel">
    <apex:outputLabel styleclass="clsFormInfo" value="{!if(isChangePasswordClicked,' ',if(isResetPasswordClicked,$Label.bmcservicedesk__discoverypasswordresetconfirmation,JSENCODE(CredentialPageMsg)))}" />
    </div>
    <apex:outputPanel id="formPanel">
    <apex:outputPanel id="inputPanel" rendered="{!!isChangePasswordClicked && !isResetPasswordClicked }">
    <table class="clsMainTableSI" cellspacing="0" cellpadding="0">
        <tr>
              <td colspan="2"><div class="div15pxVspacing"/></td>
        </tr>
        <tr>
            <td class="clsInputLabelTD paddingRight15Cls">
                <apex:outputLabel value="{!($Label.bmcservicedesk__acusername)}" />
            </td>
            <td class="clsInputTextBoxTD">
                <apex:outputText value="CRUDFLSCheck# False Positive: No relation to any sObject field. This value must always be displayed to end user to enter his username for login" rendered="false" />
                <apex:inputText id="fpUserName" value="{!FPUsername}" maxlength="255"  styleClass="{!IF(lightningUI == true, 'clsInputTextBox slds-input','clsInputTextBox')}" disabled="{!if(SyncPassword, true, false)}"/>
            </td>
        </tr>
        <tr>
            <td class="clsInputLabelTD paddingRight15Cls">
                <apex:outputLabel value="{!($Label.bmcservicedesk__acpassword)}" />
            </td>   
            <td class="clsInputTextBoxTD">
                <apex:inputSecret id="fpPassword" value="{!FPPassword}"  styleClass="{!IF(lightningUI == true, 'clsInputTextBox slds-input','clsInputTextBox')}"  redisplay="false" maxlength="20" /> 
            </td>   
        </tr>
    </table>
    </apex:outputPanel>
    <apex:outputPanel id="ChangePasswordPanel" rendered="{!isChangePasswordClicked}">
    <table class="clsMainTableSI" cellspacing="0" cellpadding="0">
        <tr>
              <td colspan="2"><div class="div15pxVspacing"/></td>
        </tr>
        <tr>
            <td class="clsInputLabelTD paddingRight15Cls">
                <apex:outputLabel value="{!$Label.bmcservicedesk__username}" />
            </td>
        </tr>
        <tr>
            
            <td class="clsInputLabelTD userNameCls">              
                <apex:inputText value="{!OrgId}" disabled="true" styleClass="clsInputTextBox slds-input"/>

            </td>
        </tr>
        <tr>
            <td class="clsInputLabelTD paddingRight15Cls">
                <apex:outputLabel value="{!$Label.bmcservicedesk__oldpassword}*" />
            </td>
        </tr>
        <tr>
            <td class="clsInputTextBoxTD bottomPaddingCls">
                <apex:inputSecret id="fpOldPw" maxlength="20" styleClass="clsInputTextBox slds-input"/>
            </td>
        </tr>
        <tr>
            <td class="clsInputLabelTD paddingRight15Cls">
                <apex:outputLabel value="{!$Label.bmcservicedesk__ssnewpassword}*" />
            </td>   
        </tr>
        <tr>    
            <td class="clsInputTextBoxTD bottomPaddingCls">
                <apex:inputSecret id="fpNewPw" styleClass="clsInputTextBox slds-input" redisplay="false" maxlength="20" /> 
            </td>   
        </tr>
        <tr>
            <td class="clsInputLabelTD paddingRight15Cls">
                <apex:outputLabel value="{!$Label.bmcservicedesk__ssconfirmnewpassword}*" />
            </td>   
        </tr>
        <tr>    
            <td class="clsInputTextBoxTD">
                <apex:inputSecret id="fpConfirmNewPw"  styleClass="clsInputTextBox slds-input" redisplay="false" maxlength="20" /> 
            </td>   
        </tr>
    </table>
        <apex:outputLabel styleClass="clsInputLabelTD paddingRight15Cls wrapText" value="({!$Label.bmcservicedesk__discoverypwdtooltip})" /> 
    </apex:outputPanel>
    
    <div id="errorDiv" class="div30pxVspacing">
        <div class="div10pxVspacing"/>
        <apex:outputPanel id="errorMessagePanel">
			<apex:outputText value="CRUDFLSCheck# False Positive: This element is used to display the error message and must be always displayed." rendered="false" />
            <apex:outputText id="error_id" style="{!IF(errorString!='','display:inline', 'display:none')}" styleClass="clsErrorMessage" value="{!errorString}"/>    
        </apex:outputPanel>
    </div>
    </apex:outputPanel>
    <div align="bottom" class="clsBottomDiv" >
        <table>
            <tr class="clsButtonTR" >
                <apex:outputPanel rendered="{!if(SyncPassword, false, true) && !isChangePasswordClicked && !isResetPasswordClicked}">
                    <td >
                        <input type="submit" id="loginBtn" onclick="waitbox(0);return beforelogin();" value="{!$Label.LogIn}"  class="clsButtonStyle clsPrvBtn bgBtnGrey" />                                          
                    </td>
                    <td >
                        <input type="button" id="cancelButton" onclick="closeWindow();" value="{!$Label.Cancel}" class="clsButtonStyle clsPrvBtn bgBtnGrey"/>
                    </td>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!if(SyncPassword, true, false) && !isChangePasswordClicked && !isResetPasswordClicked}">
                    
                    <td >
                        <input type="button" id="cancelSyncButton" onclick="closeWindow();" value="{!$Label.Cancel}" class="clsButtonStyle clsPrvBtn bgBtnGrey slds-button slds-button_neutral"/>
                    </td>
					<td >
                        <input type="button" id="syncButton" onclick="return beforeSync();" value="{!$Label.Sync}" class="clsButtonStyle clsPrvBtn bgBtnGrey slds-button slds-button_brand"/>
                    </td>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!isChangePasswordClicked  && changeDiscoveryPwReturnMsg != 'Success'}">
                    <td >
                            
                    </td>
                    <td class="{!IF(lightningUI == true, 'cancelPwdCls slds-list_horizontal','cancelPwdCls')}">
                        <input type="button" id="cancelChangePwButton" onclick="closeWindow();" value="{!$Label.Cancel}" class="clsButtonStyle bgBtnGrey slds-button slds-button_neutral"/>
                        <input type="button" id="changePWButton" onclick="showLoadingMask();return validateDiscoveryOldPw();" value="{!$Label.SSChangePassword}" class="clsButtonStyle clsPrvBtn bgBtnGrey slds-button slds-button_brand"/>
                    </td>
                </apex:outputPanel>
                
                <apex:outputPanel rendered="{!isChangePasswordClicked && changeDiscoveryPwReturnMsg == 'Success'}">
                    <td >
                        <input type="button" id="closelButton" onclick="closeWindow();" value="{!$Label.Close}" class="clsButtonStyle clsPrvBtn bgBtnGrey"/>
                    </td>
                </apex:outputPanel>
                <apex:outputPanel id="resetButton" rendered="{!isResetPasswordClicked && !isResetDiscoveryPwReturnTrue }">
                    <td >
                        
                    </td>
                    <td class="{!IF(lightningUI == true, 'buttonsCls slds-list_horizontal','buttonsCls')}">
                        <input type="button" id="cancelResetPwButton" onclick="closeWindow();" value="{!$Label.ExtjsMessageNo}" class="clsButtonStyle bgBtnGrey slds-button slds-button_neutral"/>
                        <input type="button" id="ResetPwButton" onclick="showLoadingMask();return beforeResetPw();" value="{!$Label.ExtjsMessageYes}" class="clsButtonStyle bgBtnGrey slds-button slds-button_brand"/>
                    </td>
                </apex:outputPanel>
                <apex:outputPanel id="closeButton" rendered="{!isResetPasswordClicked && isResetDiscoveryPwReturnTrue }">
                    <td >
                        <input type="button" id="closelButton" onclick="closeWindow();" value="{!$Label.Close}" class="clsButtonStyle clsPrvBtn bgBtnGrey"/>
                    </td>
                </apex:outputPanel>
            </tr>
        </table>
    </div>    
</apex:form>

</apex:page>