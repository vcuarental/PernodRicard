<apex:page standardController="ASI_CRM_Purchase_Contract__c" extensions="ASI_CRM_JP_ManageAll_ContractController" sidebar="false" showheader="true" >
    <apex:outputField value="{!ASI_CRM_Purchase_Contract__c.name}" rendered="false"/>
<head>
<apex:stylesheet value="/sCSS/21.0/sprites/1297816277000/Theme3/default/gc/versioning.css" />   

<apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_jQuery_Lib, '/libs/jquery/css/redmond/jquery-ui-1.10.3.custom.min.css')}" />
<apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_jQuery_Lib, '/styles/common.css')}" />


<link href="{!URLFOR($Resource.ASI_CRM_jQuery_DataTables, 'css/jquery.dataTables.css')}" media="screen" rel="stylesheet" type="text/css" />

<apex:includeScript value="{!URLFOR($Resource.ASI_CRM_jQuery_Lib, '/libs/jquery/js/jquery-1.9.1.min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.ASI_CRM_jQuery_Lib, '/libs/jquery/js/jquery-ui-1.10.3.custom.min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.ASI_CRM_jQuery_DataTables, 'js/jquery.dataTables.js')}"/>

<!-- this guy first -->
<script type="text/javascript">__sfdcSessionId = '{!$Api.Session_Id}';</script>

<!-- this guy second -->
<script src="/soap/ajax/29.0/connection.js" type="text/javascript"></script>

<script>
    $ = jQuery.noConflict();
   
    var isFirstLoad = true;
    var colLabel_Action = "{!$Label.ASI_CRM_JP_Action}";     
    var colLabel_Brand = "Brand";       
    var colLabel_BrandQuality = "Brand Quality"; 
    var colLabel_Volume = "Volume";     
    
    var basicDataTableProperties = {
        "bDestroy":true,
        "bStateSave":true,
        "bSearch":false,
        "bFilter" : false,
        "aLengthMenu":[10,25,50],
        "iDisplayLength":25,
        "bSort" : false,

        "bPaginate": true,
        "bScrollCollapse": true,
        "bJQueryUI": true
    };
    
    var basicDataTablePropertiesSecondTab = {
        "bDestroy":true,
        "bStateSave":true,
        "bSearch":false,
        "bFilter" : false,
        "aLengthMenu":[10,25,50],
        "iDisplayLength":25,
        "bSort" : false,

        "bPaginate": true,
        "bScrollCollapse": true,
        "bJQueryUI": true
    };
    
    //Contract Mechanic Column Definition
    var contractLineItemColumns = [
        {"sTitle": colLabel_Action},
        {"sTitle": colLabel_Brand}
    ]
    
    var contractMechanicColumns = [
        {"sTitle": colLabel_Action},
        {"sTitle": colLabel_Brand}
    ]
    
    //DataTable Variable
    var cliSKU;
    var cliSKURebate;
    var cliExtraFields;
    var cliExtraFieldsRebate;
    var cliSpread;
    
    //Map Table
    var itemGroupMap;
    var directRebateDataMap;
    var ListingListMap;
    var editableSpread;
    var months;
    var unitPricePercentage;
    var unitPriceFactor;
    
    $(document).ready(
        function(){
            console.log("##INIT - Contract Builder Page");
            setTables();
        }
    );
    
    function setMainTabTable(){
    
        var cliSKU_dataTableProperties = basicDataTableProperties;
        if("{!isReadOnly}" != "true") {
        cliSKU_dataTableProperties["aoColumns"] = [
            {"sTitle": colLabel_Action},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_AP_Code__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Payment_Method__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ex_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Direct_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Indirect_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Price__c.Label}"},
            {"sTitle": "{!$Label.ASI_CRM_JP_Cond_of}"},
            {"sTitle": "{!$Label.ASI_CRM_JP_Cond_to}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Target_Volume__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Unit_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Quantity__c.Label}"}
        ];
        }
        else {
        cliSKU_dataTableProperties["aoColumns"] = [
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_AP_Code__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Payment_Method__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ex_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Direct_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Indirect_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Price__c.Label}"},
            {"sTitle": "{!$Label.ASI_CRM_JP_Cond_of}"},
            {"sTitle": "{!$Label.ASI_CRM_JP_Cond_to}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Target_Volume__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Unit_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Quantity__c.Label}"}
        ];
        }
        
        cliSKU =  $("#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}SKU").dataTable(cliSKU_dataTableProperties);

    } 
    
    function setMainTabTableRebate(){
    
        var cliSKURebate_dataTableProperties = basicDataTableProperties;
        if("{!isReadOnly}" != "true") {
            if("{!isIndirectRebate}" == "true") {
            cliSKURebate_dataTableProperties["aoColumns"] = [
            {"sTitle": colLabel_Action},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Pay_To__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Rebate_Type__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ex_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Direct_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Indirect_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Target_Volume_Unit__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Unit_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Net_Price__c.Label}"}
            ];
            } else {
            cliSKURebate_dataTableProperties["aoColumns"] = [
            {"sTitle": colLabel_Action},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Pay_To__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Rebate_Type__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ex_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Direct_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Target_Volume_Unit__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Unit_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Net_Price__c.Label}"}
            ];
            }
        } else {
            if("{!isIndirectRebate}" == "true") {
            cliSKURebate_dataTableProperties["aoColumns"] = [
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Pay_To__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Rebate_Type__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ex_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Direct_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Indirect_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Target_Volume_Unit__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Unit_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Net_Price__c.Label}"}
            ];
            } else {
            cliSKURebate_dataTableProperties["aoColumns"] = [
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Pay_To__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Rebate_Type__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ex_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Current_Direct_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Target_Volume_Unit__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Unit_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Net_Price__c.Label}"}
            ];
            }
        }
        
        
        cliSKURebate =  $("#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}SKURebate").dataTable(cliSKURebate_dataTableProperties);

    } 
    
    function setExtraFieldsTable(){
    
        var cliExtraFields_dataTableProperties = basicDataTablePropertiesSecondTab ;
        cliExtraFields_dataTableProperties["aoColumns"] = [
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Reg_Volume_Monthly__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Net_Net_Price__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Promotion_Amount__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Annual_Turnover__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Ratio__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Remarks__c.Label}"},
        ];
        
        cliExtraFields =  $("#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}ExtraFields").dataTable(cliExtraFields_dataTableProperties);
    
    } 
    
    function setExtraFieldsRebateTable(){
    
        var cliExtraFieldsRebate_dataTableProperties = basicDataTablePropertiesSecondTab ;
        cliExtraFieldsRebate_dataTableProperties["aoColumns"] = [
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Reg_Volume_Monthly__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_RSP_before_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_RSP_after_Rebate__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Remarks__c.Label}"},
        ];
        
        cliExtraFieldsRebate =  $("#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}ExtraFieldsRebate").dataTable(cliExtraFieldsRebate_dataTableProperties);
    
    } 
    
    function setSpreadTable(){
        var cliSpread_dataTableProperties = basicDataTablePropertiesSecondTab;
        cliSpread_dataTableProperties["aoColumns"] = [
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Item_Group__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_1_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_2_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_3_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_4_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_5_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_6_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_7_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_8_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_9_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_10_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_11_Cost__c.Label}"},
            {"sTitle": "{!$ObjectType.ASI_CRM_Purchase_Contract_Line_Item__c.fields.ASI_CRM_Month_12_Cost__c.Label}"},
        ];
        
        cliSpread =  $("#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}Spread").dataTable(cliSpread_dataTableProperties);
    }
    
    function setCellReadOnly(cpiRowCell) {
    
        cpiRowCell.prop("disabled",true);
        cpiRowCell.css("background", "LightGray");
    
    }
    
    function setTables(){
        //Set all line item and contract mechanic tables (for all mechanic type)
        setMainTabTable();
        setMainTabTableRebate();
        setSpreadTable();
        setExtraFieldsTable();
        setExtraFieldsRebateTable();
        
        if("{!isSPTD}" == "true") {
            $('#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}SKU > tbody  > tr').each(function() {
                exPriceAutoFill($(this));
                //currentDirectRebateAutofill($(this));
                
                var uniqueID = $(this).attr('id');
            
                extrafieldsID = uniqueID.replace("SKU", "ExtraFields");
                //regularVolumeAutoFill($(this), $('#'.concat(extrafieldsID)));
                autoCalcExtraFields($(this), $('#'.concat(extrafieldsID)));
                PromoAmtAutoFill($(this), $('#'.concat(extrafieldsID)));
                AnnualTurnAutoFill($(this), $('#'.concat(extrafieldsID)));
                
                var spreadID = uniqueID.replace("SKU", "Spread");
                initSpreadReadOnlyFields($('#'.concat(spreadID)), $(this));
                //calculateSpread($(this), $('#'.concat(spreadID)));
                //recalculateTargetVolume($(this), $('#'.concat(spreadID)));
                //setCellReadOnly($(this).find("input.directRebate"));
                updateItemGroupTabs($(this), $('#'.concat(extrafieldsID)), $('#'.concat(spreadID)));
                if("{!isReadOnly}" == "true") {
                
                    if("{!isSalesPlanning}" != "true") {
                        setCellReadOnly($(this).find("input.apCode"));
                        $(this).find("a.apCode").remove();
                    }
                
                    setCellReadOnly($(this).find("select.paymentMethod"));
                    setCellReadOnly($(this).find("input.ItemGroup"));
                    
                    $(this).find("a.ItemGroup").remove();
                    
                    setCellReadOnly($(this).find("input.directRebate"));
                    setCellReadOnly($(this).find("input.indirectRebate"));
                    setCellReadOnly($(this).find("input.ConditionOf"));
                    setCellReadOnly($(this).find("input.ConditionTo"));
                    setCellReadOnly($(this).find("input.TargetVolume"));
                    setCellReadOnly($(this).find("input.UnitPrice"));
                    setCellReadOnly($(this).find("input.Quantity"));
                    
                    
                    $('#'.concat(extrafieldsID)).find("span.dateFormat").remove();
                    
                    setCellReadOnly($('#'.concat(extrafieldsID)).find("textarea.Remark"));
                    setCellReadOnly($('#'.concat(extrafieldsID)).find("input.RegVolumeMonthly"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P1"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P2"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P3"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P4"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P5"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P6"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P7"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P8"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P9"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P10"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P11"));
                    setCellReadOnly($('#'.concat(spreadID)).find("input.P12"));
                }
                
            });
        }
        
        if("{!isRebate}" == "true") {
            $('#{!CONTRACT_LINE_ITEM_TABLE_PREFIX}SKURebate > tbody  > tr').each(function() {
                exPriceAutoFill($(this));
                //currentDirectRebateAutofill($(this));
                calculateNetPrice($(this));
                calculateNetNetPriceRebate($(this));
                
                var uniqueID = $(this).attr('id');
                var extrafieldsID = uniqueID.replace("SKURebate", "ExtraFieldsRebate");
                //setCellReadOnly($(this).find("input.directRebate"));
                //regularVolumeAutoFill($(this), $('#'.concat(extrafieldsID)));
                
                updateItemGroupTabs($(this), $('#'.concat(extrafieldsID)), '');
                if("{!isReadOnly}" == "true") {
                 
                    setCellReadOnly($(this).find("input.payTo"));
                    $(this).find("a.payTo").remove();
                    setCellReadOnly($(this).find("input.ItemGroup"));
                    $(this).find("a.ItemGroup").remove();
                    setCellReadOnly($(this).find("select.rebateType"));
                    setCellReadOnly($(this).find("input.directRebate"));
                    setCellReadOnly($(this).find("input.indirectRebate"));
                    setCellReadOnly($(this).find("input.TargetVolume"));
                    setCellReadOnly($(this).find("input.UnitPrice"));
                    setCellReadOnly($('#'.concat(extrafieldsID)).find("input.RegVolumeMonthly"));
                    setCellReadOnly($('#'.concat(extrafieldsID)).find("input.rspBeforeRebate"));
                    setCellReadOnly($('#'.concat(extrafieldsID)).find("input.rspAfterRebate"));
                    setCellReadOnly($('#'.concat(extrafieldsID)).find("textarea.Remark"));
                    
                }
                
            });
        }

    }
    
    function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        //return x;
    }
    
    function validateNumber(input){
        input = normalizeFloat(input, [", ", "."]);
        var numRe =  new RegExp("^([+]?)([0-9]*)(\.[0-9]{0})?$"); 
        return numRe.test(input);
    }
    
    function validateFloat(input, precision){
        input = normalizeFloat(input, [", ", "."]);
        var numRe =  new RegExp("^([+]?)([0-9]*)(\.[0-9]{1,"+precision+"})?$"); 
        return numRe.test(input);
    }

    
    function normalizeFloat(number, chars) {
        var lastIndex = -1;
        if(typeof number === 'undefined'){
            return number;
        }
        for(i=0; i < chars.length; i++) {
            t = number.lastIndexOf(chars[i]);

            if (t > lastIndex) {
                lastIndex = t;
            }
        }

        if (lastIndex == -1) {
            lastIndex = number.length;
        }

        var whole = number.substring(0, lastIndex);   
        var precision = number.substring(lastIndex);
        for (i=0; i < chars.length; i++) {
            whole = whole.replace(chars[i], '');
            precision = precision.replace(chars[i],'.');           
        }
        number = whole + precision;
        f = parseFloat(number.replace(/,/g, '')) ;
        //f = parseFloat(number);

        return f;
    }
    
    function precise_round(num,decimals){
        return Math.round(num*Math.pow(10,decimals))/Math.pow(10,decimals);
    }
    
    function loading(val) {
        if (val) {
          document.getElementById('contentLoading').style.display = 'block';
          document.getElementById('contentLoaded').style.display = 'none';
        }
        else {
          document.getElementById('contentLoading').style.display = 'none';
          document.getElementById('contentLoaded').style.display = 'block';
        }
    }
    
    function startLoading(){
        $('#load_scrl').css('top', $(document).scrollTop() + 200);
        $('.loadingBox').show();
    }
    function endLoading(){
             $('.loadingBox').hide();
    }
    
    /* **************************************************************** MAIN TAB: DYNAMICALLY CHANGE FORMULA AND SET SOME FIELDS TO READ ONLY *********************************** */
    function setPaymentDependentFields(cpiRow){
        if (cpiRow!=undefined){
            var readOnlyTypes = [
                "Buyback w/o condition",
                "FOC w/o condition",
                "Other Cash"
            ];
            
            var unitPriceStandardTypes = [
                "FOC w/o condition",
                "FOC w. condition"
            ];
            
            var unitPriceFormulaTypes = [
                "Buyback w/o condition",
                "Buyback w. condition"
            ];
            
            var paymentMethod = cpiRow.find("select.paymentMethod").val();
            
            var readOnlyfound = $.inArray(paymentMethod, readOnlyTypes) > -1;
            var unitStandardfound = $.inArray(paymentMethod, unitPriceStandardTypes) > -1;
            var unitFormulafound = $.inArray(paymentMethod, unitPriceFormulaTypes) > -1;
            if(readOnlyfound) {
                cpiRow.find("input.ConditionOf").prop("readonly",true);
                cpiRow.find("input.ConditionTo").prop("readonly",true);
                cpiRow.find("input.TargetVolume").prop("readonly",true);
                
                cpiRow.find("input.ConditionOf").css("background", "LightGray");
                cpiRow.find("input.ConditionTo").css("background", "LightGray");
                cpiRow.find("input.TargetVolume").css("background", "LightGray");
                
                cpiRow.find("input.ConditionOf").css("width", "40px");
                cpiRow.find("input.ConditionTo").css("width", "40px");
                cpiRow.find("input.TargetVolume").css("width", "50px");
                
                cpiRow.find("input.ConditionOf").val(null);
                cpiRow.find("input.ConditionTo").val(null);
                cpiRow.find("input.TargetVolume").val(null);
                
                cpiRow.find("input.Quantity").css("width", "50px");
                cpiRow.find("input.Quantity").prop("readonly",false);
                cpiRow.find("input.Quantity").css("background", "white");
            } else {
            
                cpiRow.find("input.ConditionOf").prop("readonly",false);
                cpiRow.find("input.ConditionTo").prop("readonly",false);
                cpiRow.find("input.TargetVolume").prop("readonly",false);
                
                cpiRow.find("input.ConditionOf").css("width", "40px");
                cpiRow.find("input.ConditionTo").css("width", "40px");
                cpiRow.find("input.TargetVolume").css("width", "50px");
                cpiRow.find("input.Quantity").css("width", "50px");
                
                cpiRow.find("input.ConditionOf").css("background", "white");
                cpiRow.find("input.ConditionTo").css("background", "white");
                cpiRow.find("input.TargetVolume").css("background", "white");
                
                cpiRow.find("input.Quantity").prop("readonly",true);
                cpiRow.find("input.Quantity").css("background", "LightGray");
                
                calculateQuantity(cpiRow);
            }
            
            if (unitStandardfound) {
                var itemName = cpiRow.find("input.ItemGroup").val();
                if(itemGroupMap == undefined || itemGroupMap == null)
                {
                    initializeItemMap();
                }
                
                unitStandard = 0;
                if(itemName in itemGroupMap) {
                    if(itemGroupMap[itemName].ASI_CRM_Representative_SKU__r.ASI_CRM_Standard_Cost__c == undefined || itemGroupMap[itemName].ASI_CRM_Representative_SKU__r.ASI_CRM_Standard_Cost__c == null){
                        unitStandard = itemGroupMap[itemName].ASI_CRM_Standard_Cost__c;
                    }else{
                        unitStandard = itemGroupMap[itemName].ASI_CRM_Representative_SKU__r.ASI_CRM_Standard_Cost__c * unitPriceFactor;
                    }
                }
                
                unitStandard = parseInt(unitStandard).toFixed(0);
                
                cpiRow.find("input.UnitPrice").val(numberWithCommas(unitStandard));
                cpiRow.find("input.UnitPrice").prop("readonly",true);  
                cpiRow.find("input.UnitPrice").css("width", "80px");
                cpiRow.find("input.UnitPrice").css("background", "LightGray");
                
            } else if (unitFormulafound) {
                var netPrice = cpiRow.find("input.NetPrice").val();
                netPrice = normalizeFloat(netPrice , [",",""]);

                netPrice = (netPrice!=null&&netPrice!=undefined&&!isNaN(netPrice))?parseFloat(netPrice):0;
                var result = netPrice/(1-unitPricePercentage);
                result = (result!=null&&result!=undefined&&!isNaN(result))?parseFloat(result):0;
                result = Math.round(result);
                result = result.toFixed(0);
                cpiRow.find("input.UnitPrice").val(numberWithCommas(result));
                cpiRow.find("input.UnitPrice").prop("readonly",true);
                cpiRow.find("input.UnitPrice").css("width", "80px");
                cpiRow.find("input.UnitPrice").css("background", "LightGray");
            }  else {
                cpiRow.find("input.UnitPrice").prop("readonly",false);
                cpiRow.find("input.UnitPrice").css("width", "80px");
                cpiRow.find("input.UnitPrice").css("background", "white");
                var unitPriceVal = cpiRow.find("input.UnitPrice").val();
                unitPriceVal = normalizeFloat(unitPriceVal, [",",""]);
                unitPriceVal = unitPriceVal.toFixed(0);
                unitPriceVal = (unitPriceVal!=null&&unitPriceVal!=undefined&&!isNaN(unitPriceVal)&&unitPriceVal!='')?unitPriceVal:0;
                cpiRow.find("input.UnitPrice").val(numberWithCommas(unitPriceVal));
            }
            
        }
    }
    
    /* **************************************************************** EXTRA FIELDS TAB: DYNAMICALLY CHANGE FORMULA *********************************** */
    function autoCalcExtraFields(cpiRowMain, cpiRowExtra){
            
        if(itemGroupMap == undefined || itemGroupMap == null)
        {
            initializeItemMap();
        }
        
        if(cpiRowMain != undefined && cpiRowExtra != undefined) {
            
            var itemName = cpiRowMain.find("input.ItemGroup").val();
            
            var NetPrice = cpiRowMain.find("input.NetPrice").val();
            var ConditionOf = cpiRowMain.find("input.ConditionOf").val();
            var ConditionTo = cpiRowMain.find("input.ConditionTo").val();
            var UnitPrice = cpiRowMain.find("input.UnitPrice").val();

            NetPrice = normalizeFloat(NetPrice , [",",""]);
            ConditionOf = normalizeFloat(ConditionOf , [",",""]);
            ConditionTo = normalizeFloat(ConditionTo , [",",""]);
            UnitPrice = normalizeFloat(UnitPrice , [",",""]);
            
            NetPrice = (NetPrice!=null&&NetPrice!=undefined&&!isNaN(NetPrice))?NetPrice:0;
            ConditionOf = (ConditionOf!=null&&ConditionOf!=undefined&&!isNaN(ConditionOf))?ConditionOf:0;
            ConditionTo = (ConditionTo!=null&&ConditionTo!=undefined&&!isNaN(ConditionTo))?ConditionTo:0;
            UnitPrice = (UnitPrice!=null&&UnitPrice!=undefined&&!isNaN(UnitPrice))?UnitPrice:0;
            
            var netnetCalcType1 = [
                "FOC w. condition",
                "Gift Coupon",
                "Promotion fee with target"
            ];
            
            var netnetCalcType2 = [
                "Buyback w. condition"
            ];
            
            var paymentMethod = cpiRowMain.find("select.paymentMethod").val();
            
            var netnetPrice1 = $.inArray(paymentMethod, netnetCalcType1) > -1;
            var netnetPrice2 = $.inArray(paymentMethod, netnetCalcType2) > -1;
            
            var result = 0;
            
            if(netnetPrice1) {
                result = NetPrice - ( UnitPrice * (ConditionTo / ConditionOf ) );
                result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
                result = Math.round(result);
                result = result.toFixed(0);
                cpiRowExtra.find("input.NetNetPrice").val(numberWithCommas(result));
            }else if(netnetPrice2) {
                result = NetPrice - ( UnitPrice * ( ConditionTo / ( ConditionOf + ConditionTo )))
                result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
                result = Math.round(result);
                result = result.toFixed(0);
                cpiRowExtra.find("input.NetNetPrice").val(numberWithCommas(result));
            } else {
               cpiRowExtra.find("input.NetNetPrice").val(0); 
            }
            
        }
                    
    }
    
    /* **************************************************************** EXTRA TAB: Promotion Amount Auto fill*********************************** */
    function PromoAmtAutoFill(cpiRowMain, cpiRowExtra){
        if(cpiRowMain != undefined && cpiRowExtra != undefined) {
        
            var unitPrice = cpiRowMain.find("input.UnitPrice").val();
            var Quantity = cpiRowMain.find("input.Quantity").val();
            
            unitPrice = normalizeFloat(unitPrice, [",",""]);
            Quantity = normalizeFloat(Quantity, [",",""]);
            
            unitPrice = (unitPrice!=null&&unitPrice!=undefined&&!isNaN(unitPrice))?unitPrice:0;
            Quantity = (Quantity!=null&&Quantity!=undefined&&!isNaN(Quantity))?Quantity:0;
            
            var result = 0;
            
            result = unitPrice * Quantity;
            result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
            result = Math.round(result);
            result = result.toFixed(0);
            
            cpiRowExtra.find("input.PromotionAmount").val(numberWithCommas(result));
            
            RatioAutoFill(cpiRowExtra);
        }
    }
    
    /* **************************************************************** EXTRA TAB: Annual Turnover Auto fill*********************************** */
    function AnnualTurnAutoFill(cpiRowMain, cpiRowExtra){
        if(cpiRowMain != undefined && cpiRowExtra != undefined) {
            var unitPrice = cpiRowMain.find("input.UnitPrice").val();
            var RegVolumeMonthly = cpiRowExtra.find("input.RegVolumeMonthly").val();
            
            unitPrice = normalizeFloat(unitPrice, [",",""]);
            RegVolumeMonthly = normalizeFloat(RegVolumeMonthly, [",",""]);
            
            unitPrice = (unitPrice!=null&&unitPrice!=undefined&&!isNaN(unitPrice))?unitPrice:0;
            RegVolumeMonthly = (RegVolumeMonthly!=null&&RegVolumeMonthly!=undefined&&!isNaN(RegVolumeMonthly))?RegVolumeMonthly:0;
            
            var result = 0;
            
            result = unitPrice * RegVolumeMonthly * 12;
            result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
            result = Math.round(result);
            
            result = result.toFixed(0);
            
            cpiRowExtra.find("input.AnnualTurnover").val(numberWithCommas(result));
            
            RatioAutoFill(cpiRowExtra);
        }
    }
    
    /* **************************************************************** EXTRA TAB: RATIO Auto fill*********************************** */
    function RatioAutoFill(cpiRowExtra){
        if(cpiRowExtra != undefined) {
        
            var AnnualTurnover = cpiRowExtra.find("input.AnnualTurnover").val();
            var PromotionAmount = cpiRowExtra.find("input.PromotionAmount").val();
            
            AnnualTurnover = normalizeFloat(AnnualTurnover, [",",""]);
            PromotionAmount = normalizeFloat(PromotionAmount, [",",""]);
            
            AnnualTurnover = (AnnualTurnover!=null&&AnnualTurnover!=undefined&&!isNaN(AnnualTurnover))?AnnualTurnover:0;
            PromotionAmount = (PromotionAmount!=null&&PromotionAmount!=undefined&&!isNaN(PromotionAmount))?PromotionAmount:0;
            
            var result = 0;
            if(AnnualTurnover == 0) {
                cpiRowExtra.find("input.Ratio").val(0);    
            } else {
                result = (PromotionAmount / AnnualTurnover)*100;
                result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
                result = Math.round(result);
                
                if (result != 0) {
                    result = result.toString() + '%';
                }
                
                cpiRowExtra.find("input.Ratio").val(result);
            }
        }
    }
    
    /* **************************************************************** MAIN TAB: EX Price Auto fill*********************************** */
    function exPriceAutoFill(cpiRow){
            
            var itemName = cpiRow.find("input.ItemGroup").val();
            
            if(itemGroupMap == undefined || itemGroupMap == null)
            {
                initializeItemMap();
            }
            
            if(itemName in itemGroupMap) {
     
                var exPrice = itemGroupMap[itemName].ASI_CRM_Ex_Price__c;
                var semiDirectRebatePrice = itemGroupMap[itemName].ASI_CRM_Semi_Direct_Rebate_Price__c;
                
                exPrice = parseInt(exPrice);        
                exPrice = (exPrice!=null&&exPrice!=undefined&&!isNaN(exPrice))?exPrice:0;         
                exPrice = exPrice.toFixed(0);

                semiDirectRebatePrice = parseInt(semiDirectRebatePrice);
                semiDirectRebatePrice = (semiDirectRebatePrice!=null&&semiDirectRebatePrice!=undefined&&!isNaN(semiDirectRebatePrice))?semiDirectRebatePrice:0;
                semiDirectRebatePrice = semiDirectRebatePrice.toFixed(0);
                
                var result = exPrice - semiDirectRebatePrice;
                result = parseInt(result);
                result = result.toFixed(0);
                
                cpiRow.find("input.exPrice").val(numberWithCommas(result));

                if("{!isSPTD}" == "true") {
                    calculateNetPrice(cpiRow);
                }
            }
            else {
                cpiRow.find("input.exPrice").val(0);
                
                if("{!isSPTD}" == "true") {
                    cpiRow.find("input.UnitPrice").val(0);
                    calculateNetPrice(cpiRow);
                }
            }
    }
    
    /* **************************************************************** MAIN TAB: Current Direct Rebate Autofill*********************************** */
    function currentDirectRebateAutofill(cpiRow){
            var result = 0;
            var itemName = cpiRow.find("input.ItemGroup").val();
            
            if("{!isSPTD}" == "false") {
                itemName = itemName + cpiRow.find("input.payTo").val();
            }
            
            if(itemGroupMap == undefined || itemGroupMap == null)
            {
                initializeItemMap();
            }
            
            if(itemName in directRebateDataMap) {
                var directRebatePriceList = directRebateDataMap[itemName];
                for(var i = 0; i < directRebatePriceList.length; i++) { 
                    
                    var unitPrice = directRebatePriceList[i].ASI_CRM_Unit_Price__c;
                    unitPrice = normalizeFloat(unitPrice, [",",""]);
                    unitPrice = (unitPrice!=null&&unitPrice!=undefined&&!isNaN(unitPrice))?unitPrice:0;
                    unitPrice = unitPrice.toFixed(0);
                    result  = (result*1 + unitPrice*1);
                }
                
            }
            cpiRow.find("input.directRebate").val(numberWithCommas(result));
    }
    
function alwaysAddAsNumbers(a, b){
  var m = 0,
      n = 0,
      d = /\./,
      f = parseFloat,
      i = parseInt,
      t = isNaN,
      r = 10;
  m = (d.test(a)) ? f(a) : i(a,r);
  n = (d.test(b)) ? f(b) : i(b,r);
  if (t(m)) m = 0;
  if (t(n)) n = 0;
  return m + n;
}
    
    /* **************************************************************** EXTRA FIELDS TAB: Regular Volume auto fill*********************************** */
    function regularVolumeAutoFill(cpiRow, cpiExtra){
            
            var itemName = cpiRow.find("input.ItemGroup").val();
            
            if(ListingListMap == undefined || ListingListMap == null)
            {
                initializeItemMap();
            }
            
            if(itemName in ListingListMap) {
                
                var regVol = ListingListMap[itemName].ASI_CRM_Reg_Volume_Monthly__c;
                
                regVol = parseInt(regVol);
                
                regVol = regVol.toFixed(0);
                
                cpiExtra.find("input.RegVolumeMonthly").val(numberWithCommas(regVol));
            }
            else {
                cpiExtra.find("input.RegVolumeMonthly").val(0);
            }
    }
    
    /* **************************************************************** MAIN TAB: Net Price AUTO CALCULATE *********************************** */
    function calculateNetPrice(cpiRow) {
        var exPrice = cpiRow.find("input.exPrice").val();
        var directRebate = cpiRow.find("input.directRebate").val();
        var indirectRebate = cpiRow.find("input.indirectRebate").val();
        var result = 0;
        
        exPrice = normalizeFloat(exPrice , [",",""]);
        directRebate = normalizeFloat(directRebate, [",",""]);
        indirectRebate = normalizeFloat(indirectRebate , [",",""]);
        
        exPrice = (exPrice!=null&&exPrice!=undefined&&!isNaN(exPrice))?exPrice:0;
        directRebate = (directRebate!=null&&directRebate!=undefined&&!isNaN(directRebate))?directRebate:0;
        indirectRebate = (indirectRebate!=null&&indirectRebate!=undefined&&!isNaN(indirectRebate))?indirectRebate:0;
        
        result = exPrice - directRebate - indirectRebate;
        result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
        result = result.toFixed(0);
        cpiRow.find("input.NetPrice").val(numberWithCommas(result));
        
        if("{!isSPTD}" == "true") {
            setPaymentDependentFields(cpiRow);
        }
    }
    
    
    /* **************************************************************** MAIN TAB: QUANTITY AUTO CALCULATE *********************************** */
    function calculateQuantity(cpiRow) {
        var conditionOf = cpiRow.find("input.ConditionOf").val();
        var conditionTo = cpiRow.find("input.ConditionTo").val();
        var targetVol = cpiRow.find("input.TargetVolume").val();
        var quantity = 0;
        
        conditionOf = normalizeFloat(conditionOf , [",",""]);
        conditionTo = normalizeFloat(conditionTo , [",",""]);
        targetVol = normalizeFloat(targetVol , [",",""]);
        
        conditionOf = (conditionOf!=null&&conditionOf!=undefined&&!isNaN(conditionOf))?parseFloat(conditionOf):0;
        conditionTo = (conditionTo!=null&&conditionTo!=undefined&&!isNaN(conditionTo))?parseFloat(conditionTo):0;
        targetVol = (targetVol!=null&&targetVol!=undefined&&!isNaN(targetVol))?parseFloat(targetVol):0;
        
        if (conditionOf == 0) {
            cpiRow.find("input.Quantity").val(0);
        }
        else {
            quantity = targetVol * (conditionTo/conditionOf);
            quantity = (quantity!=null&&quantity!=undefined&&!isNaN(quantity)&&quantity!="Infinity")?parseFloat(quantity):0;
            quantity = Math.round(quantity); 
            quantity = quantity.toFixed(0);
            cpiRow.find("input.Quantity").val(numberWithCommas(quantity));
        }
        
    }
    
    /* **************************************************************** MAIN TAB REBATE: Net Net Price AUTO CALCULATE *********************************** */
    function calculateNetNetPriceRebate(cpiRow) {
        var netPrice = cpiRow.find("input.NetPrice").val();
        var unitPrice = cpiRow.find("input.UnitPrice").val();
        var result = 0;
        
        netPrice = normalizeFloat(netPrice , [",",""]);
        unitPrice = normalizeFloat(unitPrice , [",",""]);
        
        netPrice = (netPrice!=null&&netPrice!=undefined&&!isNaN(netPrice))?netPrice:0;
        unitPrice = (unitPrice!=null&&unitPrice!=undefined&&!isNaN(unitPrice))?unitPrice:0;
        
        result = netPrice - unitPrice;
        result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
        result = result.toFixed(0);
        cpiRow.find("input.netnetPrice").val(numberWithCommas(result));
    }
    
    /* **************************************************************** SPREAD TAB: AUTOCALCULATE SPREAD *********************************** */
    function calculateSpread(cpiRow, cpiRowSpread) {

        var readOnlyTypes = [
            "Buyback w/o condition",
            "FOC w/o condition",
            "Other Cash"
        ];
            
        var paymentMethod = cpiRow.find("select.paymentMethod").val();
            
        var readOnlyfound = $.inArray(paymentMethod, readOnlyTypes) > -1;

        var targetVol = cpiRow.find("input.TargetVolume").val();
        
        targetVol = normalizeFloat(targetVol , [",",""]);
        targetVol = (targetVol!=null&&targetVol!=undefined&&!isNaN(targetVol))?targetVol:0;
        
        var result = 0;
        
        result = targetVol/months;
        
        result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
        result = Math.round(result);
        result = result.toFixed(0);
        
        var roundingErr = targetVol - result * months;
        
        var mappedMonths = {};
        mappedMonths[0] = -1;
        mappedMonths[1] = 7;
        mappedMonths[2] = 8;
        mappedMonths[3] = 9;
        mappedMonths[4] = 10;
        mappedMonths[5] = 11;
        mappedMonths[6] = 12;
        mappedMonths[7] = 1;
        mappedMonths[8] = 2;
        mappedMonths[9] = 3;
        mappedMonths[10] = 4;
        mappedMonths[11] = 5;
        mappedMonths[12] = 6;
        
        console.log(editableSpread);
        console.log(readOnlyfound);
        
        console.log(result);
        
        var counter = 0;
        for (index = 1; index <= 12; index++) {
            console.log('mappedMonths[counter] ' + mappedMonths[counter]);
            console.log('mappedMonths[index] ' + mappedMonths[index]);
            console.log('index ' + index);
            console.log('counter ' + counter);
            
            console.log('(index in editableSpread) ' + (index in editableSpread));
            
            if((index in editableSpread) && !readOnlyfound) {
                cpiRowSpread.find("input.".concat(editableSpread[index])).val(numberWithCommas(result));
                
                if(mappedMonths[counter] < mappedMonths[index])
                    counter = index;
            }
        }
        
        if(counter != 0) {
            var newResult = parseInt(result) + parseInt(roundingErr);
            cpiRowSpread.find("input.".concat(editableSpread[counter])).val(numberWithCommas(newResult));
        }
        
    }
    
    /* **************************************************************** SPREAD TAB: RE-AUTOCALCULATE TARGET VOLUME*********************************** */
    function recalculateTargetVolume(cpiRow, cpiRowSpread) {
        
        var readOnlyTypes = [
            "Buyback w/o condition",
            "FOC w/o condition",
            "Other Cash"
        ];
            
        var paymentMethod = cpiRow.find("select.paymentMethod").val();
            
        var readOnlyfound = $.inArray(paymentMethod, readOnlyTypes) > -1;
        
        var result = 0;
        
        for (index = 1; index <= 12; index++) {
            if(index in editableSpread) {
                var spreadValue = cpiRowSpread.find("input.".concat(editableSpread[index])).val();
                spreadValue = normalizeFloat(spreadValue, [",",""]);
                spreadValue = (spreadValue!=null&&spreadValue!=undefined&&!isNaN(spreadValue))?spreadValue:0;
                
                result = result + spreadValue;
            }
        }
        
        result = (result!=null&&result!=undefined&&!isNaN(result)&&result!="Infinity")?result:0;
        result = Math.round(result);
        result = result.toFixed(0);
        
        if(!readOnlyfound) {
            cpiRow.find("input.TargetVolume").val(numberWithCommas(result));
        }
    }
    
     /* **************************************************************** SPREAD TAB: INITIALIZE READ ONLY SPREAD *********************************** */
    function initSpreadReadOnlyFields (cpiRow, cpiSKU) {
            
        var readOnlyTypes = [
            "Buyback w/o condition",
            "FOC w/o condition",
            "Other Cash"
        ];
            
        var paymentMethod = cpiSKU.find("select.paymentMethod").val();
            
        var readOnlyfound = $.inArray(paymentMethod, readOnlyTypes) > -1;
    
        var endDate = new Date('{!contractObj.ASI_CRM_End_Date__c}');
        endDate.setDate(1);
        var startDate = new Date('{!contractObj.ASI_CRM_Start_Date__c}');
        startDate.setDate(1);
        
        var startMonth = startDate.getMonth() + 1;
        
        var interval = Math.round((((endDate - startDate)/86400000)/30));
        console.log(interval);
        editableSpread = {};
        months = interval+1;
        var readOnlySpread = [];
        
        var mappedMonths = {};
        mappedMonths[0] = -1;
        mappedMonths[1] = 7;
        mappedMonths[2] = 8;
        mappedMonths[3] = 9;
        mappedMonths[4] = 10;
        mappedMonths[5] = 11;
        mappedMonths[6] = 12;
        mappedMonths[7] = 1;
        mappedMonths[8] = 2;
        mappedMonths[9] = 3;
        mappedMonths[10] = 4;
        mappedMonths[11] = 5;
        mappedMonths[12] = 6;

        var index2 = 0;
        var isIndex2Reset = false;
        for(index=0; index <= interval; index++ ) {
            var tempMonth = index2+startMonth;
            
            //tempMonth = mappedMonths[tempMonth];

            if(tempMonth > 12 && !isIndex2Reset) {
                index2 = 1;
                tempMonth = index2;   
                startMonth = 0;
                isIndex2Reset = true; 
            }
            
            editableSpread[tempMonth] =  "P".concat((tempMonth).toString());
            index2++;
        }
        
        for (index = 1; index <= 12; index++) {
            if(!(index in editableSpread) || readOnlyfound) {
                readOnlySpread[index] = "P".concat((index).toString());
            }
            
            if(!readOnlyfound && (index in editableSpread)) {
                cpiRow.find("input.".concat(editableSpread[index])).prop("readonly",false);
                cpiRow.find("input.".concat(editableSpread[index])).css("background", "white");
            }
        }
        
        for (index = 1; index <= 12; index++) {
            if((index in readOnlySpread)) {
                cpiRow.find("input.".concat(readOnlySpread[index])).prop("readonly",true);
                cpiRow.find("input.".concat(readOnlySpread[index])).css("background", "LightGray");
                cpiRow.find("input.".concat(readOnlySpread[index])).val(null);
            }
        }
        
    }

    /* **************************************************************** All TABS: Change the Item group to other tabs *********************************** */
    function updateItemGroupTabs(cpiRowSKU, cpiAdditional, cpiRowSpread) {
        var itemName = cpiRowSKU.find("input.ItemGroup").val();
        cpiAdditional.find("span.ItemGroupReadOnly").text(itemName);
        if(cpiRowSpread != '') {
            cpiRowSpread.find("span.ItemGroupReadOnly").text(itemName);
        }
        
    }
    
    function test (cpikey) {
        alert(cpikey);
    }
    
    /* **************************************************************** INITIALIZE ITEMGROUP MAP *********************************** */
    function initializeItemMap() {
        
        if(itemGroupMap == undefined || itemGroupMap == null)
        {
            try
            {
                var itemGroupList = sforce.connection.query("SELECT ID, Name, ASI_CRM_Representative_SKU__r.ASI_CRM_Standard_Cost__c, ASI_CRM_Ex_Price__c, ASI_CRM_Standard_Cost__c, ASI_CRM_Semi_Direct_Rebate_Price__c FROM ASI_MFM_Item_Group__c WHERE recordtype.developername = 'ASI_CRM_JP_Item_Group'");
                var records = itemGroupList.getArray("records");
                itemGroupMap = {};
        
                for (var i=0; i< records.length; i++) {
                    var record = records[i];
                    itemGroupMap[record.Name] = record;
                }
                    
            }
            catch (error)
            {
                alert(error + ' Item Group Map Error.');
            }
        }
        
        if(unitPricePercentage == undefined || unitPricePercentage == null)
        {
            try
            {
                var customSettings = sforce.connection.query("SELECT Name, ASI_CRM_JP_Unit_Price_Percentage__c FROM ASI_CRM_JP_Buy_Back__c WHERE name = 'ASI_CRM_JP_UnitPrice_Percentage' LIMIT 1");
                var records2 = customSettings.getArray("records");
                console.log('unitprice percentage');
                for (var i=0; i< records2.length; i++) {
                    var temp = records2[i].ASI_CRM_JP_Unit_Price_Percentage__c;
                    temp = (temp!=null&&temp!=undefined&&!isNaN(temp)&&temp!="Infinity")?temp:0;
                    unitPricePercentage = temp;
                }
                    
            }
            catch (error)
            {
                alert(error + ' Buy Back Unit Price Range Error.');
            }
        }
        
        if(unitPriceFactor == undefined || unitPriceFactor == null)
        {
            try
            {
                var customSettings = sforce.connection.query("SELECT Name, ASI_CRM_JP_Unit_Price_Percentage__c FROM ASI_CRM_JP_Buy_Back__c WHERE name = 'ASI_CRM_JP_UnitPriceFocFactor' LIMIT 1");
                var records2 = customSettings.getArray("records");
                console.log('unitprice factor');
                for (var i=0; i< records2.length; i++) {
                    var temp = records2[i].ASI_CRM_JP_Unit_Price_Percentage__c;
                    temp = (temp!=null&&temp!=undefined&&!isNaN(temp)&&temp!="Infinity")?temp:0;
                    unitPriceFactor = temp;
                }
                console.log('factor: ' + unitPriceFactor);
                    
            }
            catch (error)
            {
                alert(error + ' FOC Unit Price Range Error.');
            }
        }
        
        if(ListingListMap == undefined || ListingListMap == null)
        {
            try
            {
                var filterCustomer  = "{!contractObj.ASI_CRM_Outlet__c}";

                if(filterCustomer == "" || filterCustomer == undefined) {
                    filterCustomer = "{!contractObj.ASI_CRM_BS_Retailer_Ship_To__c}";
                }

                console.log('filterCustomer ' + filterCustomer);

                var listingList = sforce.connection.query("SELECT Name, ASI_CRM_Reg_Volume_Monthly__c, ASI_CRM_Customer__c, ASI_CRM_Item_Group__r.name FROM ASI_CRM_Listing_List__c WHERE ASI_CRM_Customer__c = '"+filterCustomer+"' ");
                var records3 = listingList.getArray("records");
                ListingListMap = {};
                
                for (var i=0; i< records3.length; i++) {
                    var record = records3[i];
                    var recordsItem = record.getArray("ASI_CRM_Item_Group__r");
                    if(!(typeof recordsItem === 'undefined') && !(typeof recordsItem[0] === 'undefined')) {
                        ListingListMap[recordsItem[0].Name] = record;
                    }
                }
                    
            }
            catch (error)
            {
                alert(error + ' Listing Map Error');
            }
        }
        
        if (directRebateDataMap == undefined || directRebateDataMap == null) {
            
            try {
                
                var matchedShipTo = "{!contractObj.ASI_CRM_BS_Retailer_Ship_To__c}";
                
                var queryStr = "";
                //if("{!contractObj.recordtype.developername}" == "ASI_CRM_JP_Direct_Rebate_Contract") {
                    queryStr = " "+
                       " SELECT Name, ASI_CRM_Item_Group__c, ASI_CRM_Unit_Price__c, ASI_CRM_Item_Group__r.name, " +
                       " ASI_CRM_End_Date__c, ASI_CRM_Pay_To__c, ASI_CRM_Pay_To__r.name, " +
                       " ASI_CRM_Ship_To__c, ASI_CRM_Start_Date__c, ASI_CRM_Ship_To__r.ASI_CRM_Customer_Headquarter__c " +
                          " FROM ASI_CRM_Direct_Rebate_Data__c " +
                              " WHERE (ASI_CRM_Ship_To__c = '"+matchedShipTo+"' )" +
                              " AND recordtype.developername = 'ASI_CRM_JP_Direct_Rebate_Data' ";
                /*} else {
                    queryStr = " "+
                       " SELECT Name, ASI_CRM_Item_Group__c, ASI_CRM_Unit_Price__c, ASI_CRM_Item_Group__r.name, " +
                       " ASI_CRM_End_Date__c, ASI_CRM_Pay_To__c, ASI_CRM_Pay_To__r.name, " +
                       " ASI_CRM_Ship_To__c, ASI_CRM_Start_Date__c, ASI_CRM_Ship_To__r.ASI_CRM_Customer_Headquarter__c " +
                          " FROM ASI_CRM_Direct_Rebate_Data__c " +
                              " WHERE (ASI_CRM_Ship_To__c = '"+matchedShipToHQ+"' OR ASI_CRM_Ship_To__r.ASI_CRM_Customer_Headquarter__c = '"+matchedShipToHQ+"' )" +
                              " AND recordtype.developername = 'ASI_CRM_JP_Direct_Rebate_Data' ";
                } */         
                var directRebateList = sforce.connection.query(queryStr);
                console.log('******directRebateList ' + directRebateList);     
                var records3 = directRebateList.getArray("records");
                directRebateDataMap = {};
                
                var todaysDate = new Date();
                
                for (var i=0; i< records3.length; i++) {
                    var record = records3[i];
                    var recordsItem = record.getArray("ASI_CRM_Item_Group__r");
                    var recordsShipTo = record.getArray("ASI_CRM_Ship_To__r");
                    var recordsPayTo = record.getArray("ASI_CRM_Pay_To__r");

                    var rebateEndDate = new Date(record.ASI_CRM_End_Date__c);
                    
                    if(matchedShipTo != null) {
                        console.log('************insideMatchedShipTo ' + matchedShipTo);   
                        if( todaysDate <= rebateEndDate) {
                            console.log('************insideTodaysDate ' + rebateEndDate);
                            if("{!isSPTD}" == "true") {
                            
                                var itemName = recordsItem[0].Name;
                                console.log('*******ItemName ' + itemName);

                                if(itemName in directRebateDataMap) {
                                    var rebateArray = directRebateDataMap[itemName];
                                    rebateArray[rebateArray.length] = record;
                                    directRebateDataMap[itemName] = rebateArray;
                                    console.log('********InDirectRebate ' + record);
                                } else {
                                    var rebateArray = [record];
                                    console.log('********OutDirectRebate ' + record);
                                    directRebateDataMap[itemName] = rebateArray;
                                }
                            } else {
                                
                                var itemName = '';
                                var payToName = '';
                                
                                if(typeof recordsItem[0] === 'undefined') {

                                } else {
                                    itemName = recordsItem[0].Name;
                                }
                                
                                if(typeof recordsPayTo[0] === 'undefined') {

                                } else {
                                    payToName = recordsPayTo[0].Name
                                }
                                
                                var itemPayToName = itemName+payToName;
                            
                                if(itemPayToName in directRebateDataMap) {
                                    var rebateArray = directRebateDataMap[itemPayToName];
                                    rebateArray[rebateArray.length] = record;
                                    directRebateDataMap[itemPayToName] = rebateArray;
                                } else {
                                    var rebateArray = [record];
                                    directRebateDataMap[itemPayToName] = rebateArray;
                                }
                            
                            }
                        
                        }
                    }
                    
                }
                
            }
            catch (error) {
                alert(error + ' Direct Rebate Error');
            }
        }
        
    }
    
</script>

<style>
    body {
        margin-top: 40px;
        font-size: 12px;
        font-family: Helvetica,Arial,Verdana,sans-serif;
        width:100%;
    }
           
    .loadingOverlay{
        opacity: 0.4;
        postion: absolute;
        top:0px;
        left:0px;
        background-color:#001100;
        width:100%;
        z-index: 5000
    }

    #container1{
        width:100%;
    }

    #tabLink{
        font-size: 10px;
    }

    .overlay {
                display: none;
                height: 100%;
                left: 0;
                position: fixed;
                top: 0;
                opacity: 0.3;
                -moz-opacity: 0.3;
                width: 100%;
                -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=30)";
                filter: alpha(opacity=30);
                background: #000;
                -khtml-opacity: 0.3;
                z-index: 1000;
            }
    .loader {
        width: 32px;
        height: 32px;
        position: absolute;
        left: 50%;
    }

    input.error-input {
        border-color: red;
    }

    .itemGroupReadOnly {
        width: 150px;
    }

    .P1, .P2, .P3, .P4, .P5, .P6, .P7, .P8, .P9, .P10, .P11, .P12 { width: 50px ; }

    .directRebate, .indirectRebate {
        width: 70px;
    }

</style>

</head>

<body>
    <apex:actionStatus id="loading" onstart="startLoading();" onstop="endLoading();" />
<!-- ////////////////////////////////////// STANDARD UI ITEMS /////////////////////////////////////////////////// -->
    <apex:form >
    <apex:pageMessages id="pageMsg"></apex:pageMessages>
    
    <div id="contentLoading" style="display:none;">
        <div style="text-align: center;">
            <p>Loading...
            <img src="/img/loading.gif" alt="Loading graphic" /></p>
        </div>
    </div>
    
    <div id="load_scrl" class="loadingBox loader" style="display:none"><div style="text-align: center;">
            <p>Loading...
            <img src="/img/loading.gif" alt="Loading graphic" /></p>
        </div>
    </div>
    <div class="loadingBox overlay"> </div>
    
<!-- ////////////////////////////////////// END OF STANDARD UI ITEMS /////////////////////////////////////////////////// -->
    
<!-- ////////////////////////////////////// HEADER BLOCK /////////////////////////////////////////////////// -->
    <apex:pageBlock id="header_pageBlock">

        <apex:panelGrid columns="1" width="1100px">     
        <apex:pageBlockSection title="{!$Label.ASI_CRM_JP_SPTD_Contract}" rendered="{!isSPTD}">
            <apex:outputField value="{!ContractObj.ASI_CRM_BS_Retailer_Ship_To__c}"/> 
            <apex:outputField value="{!ContractObj.recordtypeid}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Wholesaler__c}"/> 
            <apex:outputField value="{!ContractObj.ownerid}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Outlet__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Status__c}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_Start_Date__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Application_Date__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_End_Date__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Contract_Amount__c}"/> 
        </apex:pageBlockSection>
        
        <apex:pageBlockSection title="{!$Label.ASI_CRM_JP_Direct_Rebate}" rendered="{!isDirectRebate}">
            <apex:outputField value="{!ContractObj.ASI_CRM_BS_Retailer_Ship_To__c}"/> 
            <apex:outputField value="{!ContractObj.recordtypeid}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Wholesaler__c}"/> 
            <apex:outputField value="{!ContractObj.ownerid}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Start_Date__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Status__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_End_Date__c}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Application_Date__c}"/> 
        </apex:pageBlockSection>
        
        <apex:pageBlockSection title="{!$Label.ASI_CRM_JP_Indirect_Rebate}" rendered="{!isIndirectRebate}">
            <apex:outputField value="{!ContractObj.ASI_CRM_BS_Retailer_Ship_To__c}"/> 
            <apex:outputField value="{!ContractObj.recordtypeid}"/> 
            <apex:outputField value="{!ContractObj.ASI_CRM_Wholesaler__c}"/>
            <apex:outputField value="{!ContractObj.ownerid}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_Outlet__c}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_Status__c}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_Start_Date__c}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_Application_Date__c}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_End_Date__c}"/>
            <apex:outputField value="{!ContractObj.ASI_CRM_Remarks__c}"/>
        </apex:pageBlockSection>
        
        </apex:panelGrid>    
        
        </apex:pageBlock>
<!-- ////////////////////////////////////// END OF HEADER BLOCK /////////////////////////////////////////////////// -->
<!-- ////////////////////////////////////// MAIN BLOCK /////////////////////////////////////////////////// -->
        <apex:pageBlock id="main_pageBlock">
<!-- ////////////////////////////////////// MAIN BUTTONS BLOCK /////////////////////////////////////////////////// -->
         <apex:pageblockButtons >
         <apex:outputtext rendered="{!OR(!isReadOnly,AND(isSalesPlanning,isSPTD))}">
        <apex:commandButton value="{!$Label.ASI_CRM_JP_Save}" 
            status="loading"
            action="{!saveContract}">
            <apex:param name="IS_QUICK_SAVE" value="false"/>
        </apex:commandButton>
        <apex:commandButton value="{!$Label.ASI_CRM_JP_Quick_Save}" 
            rerender="pageBlock_Main, pageBlock_ExtraFields, pageBlock_Spread, pageMsg,header_pageBlock"
            oncomplete="setTables();console.log('Quick Save Done');"
            status="loading"
            action="{!saveContract}">
            <apex:param name="IS_QUICK_SAVE" value="true"/>
        </apex:commandButton>
        </apex:outputtext>
        <apex:commandButton value="{!$Label.ASI_CRM_JP_Exit}" action="{!cancel}" 
            immediate="true"/>
        </apex:pageblockButtons>
<!-- ////////////////////////////////////// END OF MAIN BUTTONS BLOCK /////////////////////////////////////////////////// -->
<!-- ////////////////////////////////////// TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
        <div id="mechanicTypeTabs" class="tabLink" style="display:table;">
            <ul>
                <li><apex:outputPanel rendered="true"><a href="#tab_SKU">{!$Label.ASI_CRM_JP_MainTab}</a></apex:outputPanel></li>
                <li><apex:outputPanel rendered="true"><a href="#tab_ExtraFields">{!$Label.ASI_CRM_JP_ExtraFields}</a></apex:outputPanel></li>
                <apex:outputText rendered="{!isSPTD}">
                <li><apex:outputPanel rendered="true"><a href="#tab_Spread">{!$Label.ASI_CRM_JP_Spread}</a></apex:outputPanel></li>
                </apex:outputText>
            </ul>
<!-- ////////////////////////////////////// END OF TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
<!-- ////////////////////////////////////// FIRST TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
            <div id="tab_SKU">
                    <apex:pageBlock id="pageBlock_Main"> 
                            <apex:outputPanel layout="block">
                                <apex:outputtext rendered="{!!isReadOnly}">
                                <apex:commandButton value="{!$Label.ASI_CRM_JP_Add_New}"
                                    action="{!addContractLine}"
                                    rerender="pageBlock_Main, pageBlock_ExtraFields, pageBlock_Spread, pageMsg"
                                    onComplete="console.log('Add CPI'); setTables();"
                                    status="loading"> 
                                </apex:commandButton>
                                <br/>
                                <br/>
                                </apex:outputtext>
                                <apex:outputText rendered="{!isSPTD}">
                                <table id="{!CONTRACT_LINE_ITEM_TABLE_PREFIX}SKU">
                                    <apex:repeat var="cpiKey" value="{!allContractTargetMap}">
                                    <apex:repeat var="cpiObj" value="{!allContractTargetMap[cpiKey]}">
                                    
                                    <tr id="row_SKU_{!cpiKey}" class="cpiContent">
                                        <apex:outputtext rendered="{!!isReadOnly}">
                                        <td>
                                            &nbsp;
                                            <apex:commandLink value="{!$Label.ASI_CRM_JP_Clone}"
                                            action="{!cloneContractLine}"
                                            rerender="pageBlock_Main, pageBlock_ExtraFields, pageBlock_Spread, pageMsg"
                                            onComplete="console.log('Clone CPI'); setTables();"
                                            status="loading"> 
                                                <apex:param name="PARAM_CONTRACT_SOURCE_ITEM_ID" value="{!cpiKey}"/>
                                            </apex:commandLink>
                                            &nbsp;
                                            <apex:commandLink value="{!$Label.ASI_CRM_JP_Delete}"
                                            action="{!removeContractLine}"
                                            rerender="pageBlock_Main, pageBlock_ExtraFields, pageBlock_Spread, pageMsg"
                                            onComplete="console.log('Remove CPI'); setTables();"
                                            status="loading">
                                                <apex:param name="PARAM_CONTRACT_LINE_ID" value="{!cpiKey}"/>
                                            </apex:commandLink>
                                        </td>
                                        </apex:outputtext>
                                        <td>
                                            <div class="requiredInput"><div class="requiredBlock" />
                                            <apex:inputField value="{!cpiObj.ASI_CRM_AP_Code__c}" styleclass="apCode" />
                                            </div>
                                        </td>
                                        <td>
                                            <div class="requiredInput"><div class="requiredBlock" />
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Payment_Method__c}"
                                            styleclass="paymentMethod"
                                            onchange="setPaymentDependentFields($('#row_SKU_{!cpiKey}'));autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));
                                                        PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                                initSpreadReadOnlyFields($('#row_Spread_{!cpiKey}'), $('#row_SKU_{!cpiKey}'));">
                                            </apex:inputField>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="requiredInput"><div class="requiredBlock" />
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Item_Group__c}"
                                            styleclass="ItemGroup"
                                            onchange="exPriceAutoFill($('#row_SKU_{!cpiKey}'));currentDirectRebateAutofill($('#row_SKU_{!cpiKey}'));
                                                        autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));
                                                        PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                                regularVolumeAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                                    calculateNetPrice($('#row_SKU_{!cpiKey}'));autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));
                                                                        updateItemGroupTabs($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'), $('#row_Spread_{!cpiKey}') );">
                                            </apex:inputField>
                                            </div>
                                        </td>
                                        <td>
                                            <input value="{!cpiObj.ASI_CRM_Ex_Price__c}" 
                                                class="exPrice" 
                                                style="background: none repeat scroll 0% 0% LightGray;width:80px;"
                                                readonly="true"/>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Current_Direct_Rebate__c}"
                                                styleclass="directRebate"
                                                onchange="calculateNetPrice($('#row_SKU_{!cpiKey}'));"/>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Current_Indirect_Rebate__c}"
                                                styleclass="indirectRebate"
                                                onchange="calculateNetPrice($('#row_SKU_{!cpiKey}'));autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));
                                                            PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                                AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"/>
                                        </td>
                                        <td><input value="{!cpiObj.ASI_CRM_Net_Price__c}"
                                            class="NetPrice"
                                            style="background: none repeat scroll 0% 0% LightGray;width:80px;"
                                            readonly="true"/>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Condition_Of__c}" 
                                            onChange="calculateQuantity($('#row_SKU_{!cpiKey}'));autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));
                                                        PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="ConditionOf"
                                            style="width:50px;"
                                            />
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Condition_To__c}" 
                                            onChange="calculateQuantity($('#row_SKU_{!cpiKey}'));autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));
                                                        PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="ConditionTo"
                                            style="width:50px;"
                                             />
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Target_Volume__c}"
                                            onChange="calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                        PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            calculateSpread($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));"
                                            required="false"
                                            styleclass="TargetVolume"
                                            style="width:60px;">
                                            </apex:inputField>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Unit_Price__c}" 
                                            styleclass="UnitPrice"
                                            onChange="PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                        AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                            autoCalcExtraFields($('#row_SKU_{!cpiKey}'),$('#row_ExtraFields_{!cpiKey}'));"/>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Quantity__c}"                                            
                                            styleclass="Quantity" 
                                            onChange="PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            style="width:50px;"/>
                                        </td>
                                    </tr>
                                    </apex:repeat>
                                    </apex:repeat>
                                </table>
                                </apex:outputText>
                                
                                <apex:outputText rendered="{!isRebate}">
                                <table id="{!CONTRACT_LINE_ITEM_TABLE_PREFIX}SKURebate">
                                    <apex:repeat var="cpiKey" value="{!allContractTargetMap}">
                                    <apex:repeat var="cpiObj" value="{!allContractTargetMap[cpiKey]}">
                                    <tr id="row_SKURebate_{!cpiKey}" class="cpiContent">
                                        <apex:outputtext rendered="{!!isReadOnly}">
                                        <td>
                                            &nbsp;
                                            <apex:commandLink value="Clone"
                                            rendered="true" 
                                            action="{!cloneContractLine}"
                                            rerender="pageBlock_Main, pageBlock_ExtraFields, pageBlock_Spread, pageMsg"
                                            onComplete="console.log('Clone CPI'); setTables();"
                                            status="loading"> 
                                                <apex:param name="PARAM_CONTRACT_SOURCE_ITEM_ID" value="{!cpiKey}"/>
                                            </apex:commandLink>
                                            &nbsp;
                                            <apex:commandLink value="Delete"
                                            action="{!removeContractLine}"
                                            rerender="pageBlock_Main, pageBlock_ExtraFields, pageBlock_Spread, pageMsg"
                                            onComplete="console.log('Remove CPI'); setTables();"
                                            status="loading">
                                                <apex:param name="PARAM_CONTRACT_LINE_ID" value="{!cpiKey}"/>
                                            </apex:commandLink>
                                        </td>
                                        </apex:outputtext>
                                        <td>
                                            <div class="requiredInput"><div class="requiredBlock" />
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Pay_To__c}" styleClass="payTo"
                                                onChange="currentDirectRebateAutofill($('#row_SKURebate_{!cpiKey}'));
                                                              calculateNetPrice($('#row_SKURebate_{!cpiKey}'));
                                                                  calculateNetNetPriceRebate($('#row_SKURebate_{!cpiKey}'));"/>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="requiredInput"><div class="requiredBlock" />
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Item_Group__c}"
                                            styleclass="ItemGroup"
                                            onchange="exPriceAutoFill($('#row_SKURebate_{!cpiKey}'));calculateNetPrice($('#row_SKURebate_{!cpiKey}'));currentDirectRebateAutofill($('#row_SKURebate_{!cpiKey}'));
                                                        calculateNetNetPriceRebate($('#row_SKURebate_{!cpiKey}'));
                                                        regularVolumeAutoFill($('#row_SKURebate_{!cpiKey}'), $('#row_ExtraFieldsRebate_{!cpiKey}'));
                                                            AnnualTurnAutoFill($('#row_SKURebate_{!cpiKey}'), $('#row_ExtraFieldsRebate_{!cpiKey}'));
                                                                calculateNetPrice($('#row_SKURebate_{!cpiKey}'));
                                                                    updateItemGroupTabs($('#row_SKURebate_{!cpiKey}'), $('#row_ExtraFieldsRebate_{!cpiKey}'), '');">
                                            </apex:inputField>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="requiredInput"><div class="requiredBlock" />
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Rebate_Type__c}" styleClass="rebateType"/>
                                            </div>
                                        </td>
                                        <td>
                                            <input value="{!cpiObj.ASI_CRM_Ex_Price__c}" 
                                                class="exPrice" 
                                                style="background: none repeat scroll 0% 0% LightGray;width:80px;"
                                                readonly="true"/>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Current_Direct_Rebate__c}"
                                                styleclass="directRebate"
                                                onchange="calculateNetPrice($('#row_SKURebate_{!cpiKey}'));calculateNetNetPriceRebate($('#row_SKURebate_{!cpiKey}'));"/>
                                        </td>
                                        <apex:outputText rendered="{!isIndirectRebate}">
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Current_Indirect_Rebate__c}"
                                                styleclass="indirectRebate"
                                                onchange="calculateNetPrice($('#row_SKURebate_{!cpiKey}'));calculateNetNetPriceRebate($('#row_SKURebate_{!cpiKey}'));"/>
                                        </td>
                                        </apex:outputText>
                                        <td><input value="{!cpiObj.ASI_CRM_Net_Price__c}"
                                            class="NetPrice"
                                            style="background: none repeat scroll 0% 0% LightGray;width:80px;"
                                            readonly="true"/>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Target_Volume_Unit__c}"
                                            onChange=""
                                            required="false"
                                            styleclass="TargetVolume"
                                            style="width:50px;">
                                            </apex:inputField>
                                        </td>
                                        <td><apex:inputField value="{!cpiObj.ASI_CRM_Unit_Price__c}" 
                                            styleclass="UnitPrice"
                                            onChange="calculateNetNetPriceRebate($('#row_SKURebate_{!cpiKey}'));"/>
                                        </td>
                                        <td><input value="{!cpiObj.ASI_CRM_Net_Net_Price__c}"                                            
                                            class="netnetPrice" 
                                            style="background: none repeat scroll 0% 0% LightGray;width:80px;"
                                            readOnly="true"/>
                                        </td>
                                    </tr>
                                    </apex:repeat>
                                    </apex:repeat>
                                </table>
                                </apex:outputText>
                            </apex:outputPanel>
                    </apex:pageBlock>
                
            </div>
<!-- ////////////////////////////////////// END OF FIRST TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
<!-- ////////////////////////////////////// SECOND TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
            <div id="tab_ExtraFields">
                    <apex:pageBlock id="pageBlock_ExtraFields"> 
                            <apex:outputPanel layout="block">
                                <apex:outputText rendered="{!isSPTD}">
                                <table id="{!CONTRACT_LINE_ITEM_TABLE_PREFIX}ExtraFields">
                                
                                    <apex:repeat var="cpiKey" value="{!allContractTargetMap}">
                                    <apex:repeat var="cpiObj" value="{!allContractTargetMap[cpiKey]}">
                                    <tr id="row_ExtraFields_{!cpiKey}" class="cpiContent">
                                        <td>
                                            <span class="ItemGroupReadOnly"> {!cpiObj.ASI_CRM_Item_Group__r.name} </span>
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Reg_Volume_Monthly__c}" 
                                            onChange=""
                                            styleclass="RegVolumeMonthly"
                                            />
                                        </td>
                                        <td>
                                            <input value="{!cpiObj.ASI_CRM_Net_Net_Price__c}" 
                                            class="NetNetPrice" 
                                            style="background: none repeat scroll 0% 0% LightGray;"
                                            readOnly="true"
                                            />
                                        </td>
                                        <td>
                                            <input value="{!cpiObj.ASI_CRM_Promotion_Amount__c}" 
                                            class="PromotionAmount"
                                            style="background: none repeat scroll 0% 0% LightGray;"
                                            readOnly="true"
                                            />
                                        </td>
                                        <td>
                                            <input value="{!cpiObj.ASI_CRM_Annual_Turnover__c}" 
                                            class="AnnualTurnover"
                                            style="background: none repeat scroll 0% 0% LightGray;"
                                            readOnly="true"
                                            />
                                        </td>
                                        <td>
                                            <input value="{!cpiObj.ASI_CRM_Ratio__c}" 
                                            class="Ratio"
                                            style="background: none repeat scroll 0% 0% LightGray;"
                                            readOnly="true"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Remarks__c}" 
                                            onChange=""
                                            styleclass="Remark"
                                            />
                                        </td>
                                    </tr>
                                    </apex:repeat>
                                    </apex:repeat>
                                </table>
                                </apex:outputtext>
                                
                                <apex:outputText rendered="{!isRebate}">
                                <table id="{!CONTRACT_LINE_ITEM_TABLE_PREFIX}ExtraFieldsRebate">
                                
                                    <apex:repeat var="cpiKey" value="{!allContractTargetMap}">
                                    <apex:repeat var="cpiObj" value="{!allContractTargetMap[cpiKey]}">
                                    <tr id="row_ExtraFieldsRebate_{!cpiKey}" class="cpiContent">
                                        <td>
                                            <span class="ItemGroupReadOnly"> {!cpiObj.ASI_CRM_Item_Group__r.name} </span>
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Reg_Volume_Monthly__c}" 
                                            onChange=""
                                            styleclass="RegVolumeMonthly"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_RSP_before_Rebate__c}" 
                                            onChange=""
                                            styleclass="rspBeforeRebate"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_RSP_after_Rebate__c}" 
                                            onChange=""
                                            styleclass="rspAfterRebate"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Remarks__c}" 
                                            onChange=""
                                            styleclass="Remark"
                                            />
                                        </td>
                                    </tr>
                                    </apex:repeat>
                                    </apex:repeat>
                                </table>
                                </apex:outputtext>
                            </apex:outputPanel>
                    </apex:pageBlock>
            </div>
<!-- ////////////////////////////////////// END OF SECOND TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
<!-- ////////////////////////////////////// THIRD TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
            <apex:outputText rendered="{!isSPTD}">
            <div id="tab_Spread">
                    <apex:pageBlock id="pageBlock_Spread"> 
                            <apex:outputPanel layout="block">
                                <table id="{!CONTRACT_LINE_ITEM_TABLE_PREFIX}Spread">
                                    <apex:repeat var="cpiKey" value="{!allContractTargetMap}">
                                    <apex:repeat var="cpiObj" value="{!allContractTargetMap[cpiKey]}">
                                    <tr id="row_Spread_{!cpiKey}" class="cpiContent">
                                        <td>
                                            <span class="ItemGroupReadOnly"> {!cpiObj.ASI_CRM_Item_Group__r.name} </span>
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_1_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P7"
                                            />
                                        </td>
                                        <!-- removed calculateSpread($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}')); -->
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_2_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P8"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_3_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P9"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_4_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P10"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_5_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P11"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_6_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P12"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_7_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P1"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_8_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P2"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_9_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P3"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_10_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P4"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_11_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P5"
                                            />
                                        </td>
                                        <td>
                                            <apex:inputField value="{!cpiObj.ASI_CRM_Month_12_Cost__c}" 
                                            onChange="recalculateTargetVolume($('#row_SKU_{!cpiKey}'), $('#row_Spread_{!cpiKey}'));
                                            calculateQuantity($('#row_SKU_{!cpiKey}'));
                                                PromoAmtAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));
                                                    AnnualTurnAutoFill($('#row_SKU_{!cpiKey}'), $('#row_ExtraFields_{!cpiKey}'));"
                                            styleclass="P6"
                                            />
                                        </td>
                                    </tr>
                                    </apex:repeat>
                                    </apex:repeat>
                                </table>
                            </apex:outputPanel>
                    </apex:pageBlock>
            </div>
            </apex:outputText>
<!-- ////////////////////////////////////// END OF THIRD TAB DEFINITIONS BLOCK /////////////////////////////////////////////////// -->
        </div>
        <script>

                $ = jQuery.noConflict();
                $("#mechanicTypeTabs").tabs();

        </script>
    </apex:pageBlock>
    
    
    </apex:form>
</body>

</apex:page>