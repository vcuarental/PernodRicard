<!-- Name:ASI_CRM_CN_DolphinPOUpload -->
<apex:page doctype="HTML-5.0" showHeader="false" sidebar="false" controller="ASI_CRM_CN_DolphinPOUploadCtl" standardStylesheets="false" cache="false">
    <apex:slds />
    <html dir="ltr" lang="en-US">
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
            <title>CN Dolphin PO Upload</title>
            <meta name="description" content=""/>
            <meta name="viewport" content="width=device-width, initial-scale=1"/>
            <meta name="google" content="notranslate"/>
            
            <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/papaparse.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/angular.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/jquery-3.4.1.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/jquery-ui.min.js')}" />
            <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/css/jquery-ui.min.css')}" />
            <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/css/all.min.css')}" />

            <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/xlsx.core.min.js')}" />
           
        </head>
        <body ng-app="TradePlanApp">
            <div ng-controller="uploadCtrl" id="wrap">
                <div class="slds-scope">
                    <div ng-show='showSpinner' class="demo-only">
                      <div class="slds-spinner_container">
                        <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                          <span class="slds-assistive-text">Loading</span>
                          <div class="slds-spinner__dot-a"></div>
                          <div class="slds-spinner__dot-b"></div>
                        </div>
                      </div>
                    </div>
                </div>
                <div class="content">

                    <div style="padding: 40px;background-color: white;max-width: 980px; margin: auto;">
                        <div style="max-width: 980px; height: 100px;width: 1000px;">
                            <p style="width: 35%;float: left;font-size: 24px;margin-bottom: 8px;font-weight: 900;">批量上传 Dolphin PO</p>
                                <div style="float:left;">
                                    <a href="{!URLFOR($Resource.ASI_CRM_CN_TP_Dolphin_PO_Template)}" onclick="alert('模板上传时请转为UTF-8 CSV格式!')" style="width:150px;background-color: rgb(02, 52, 102);cursor: pointer;display: inline-block;text-align: center;color: white;line-height: 40px;font-size: larger;text-decoration:none;">下载模板</a>
                                    <input style="display: none;" id="csv-file" type="file" accept=".csv"></input>
                                    <label tabindex="0" id='csv-select' for="csv-file" style="background-color:rgb(02, 52, 102);text-align: center;display: inline-block;color: white;line-height: 40px;width: 180px;cursor: pointer;font-size: larger;"><i class="fa fa-file" aria-hidden="true"></i> 上传文件...</label>
                                    <!-- <a href="" ng-click="uploadCSV()" ng-show="showReload" style="width:150px;background-color: rgb(02, 52, 102);cursor: pointer;display: inline-block;text-align: center;color: white;line-height: 40px;font-size: larger;text-decoration:none;">重新加载</a> -->
                                    <a href="" ng-click="submitAll()" style="width:150px;background-color: rgb(02, 52, 102);cursor: pointer;display: inline-block;text-align: center;color: white;line-height: 40px;font-size: larger;text-decoration:none;">保存</a>
                                    <a href="" ng-click="downloadFailReport()" class="btn btn-style01 transit-02" style="width: 150px;background-color: rgb(02, 52, 102);cursor: pointer;display: inline-block;text-align: center;color: white;line-height: 40px; margin-top: 10px;font-size: larger;text-decoration:none;" ng-show="flag.reportBtnShow" >导出记录</a>
                                </div>
                        </div>
                    </div>

                    <div style="padding: 0 30px;" class="my-order-conts" ng-show="upload.show">
                         <div style="margin: 0;background-color: white;border-bottom: 1px solid #cccccc;">
                                <p style="font-weight: 900;font-size: 24px;float: left;">整体上载</p>
                                <div style="margin: 5px auto;padding-top: 5px;">
                                    <p style="font-size: 14px;margin-left: 17px;margin-top: 3px;display: inline-block;">总数: {{batchCount}} 个记录</p>
                                    <p style="font-size: 14px;margin-left: 17px;margin-top: 3px;display: inline-block;">成功: {{successCount}} 个记录</p>
                                    <p style="font-size: 14px;margin-left: 17px;margin-top: 3px;display: inline-block;">失败: {{errorCount}} 个记录</p>
                                </div>
                            </div>
                            <br/>


                        <div class="" style="overflow: auto; width: 100%; height: 450px; border: 1px solid lightgrey" >
                            <table > <!--class="fixed_header"-->
                                <thead>
                                    <tr style="background-color: lightgrey;">
                                        <th nowrap="nowrap" style="padding: 10px; text-align: center;">#</th>
                                        <th nowrap="nowrap" style="padding: 10px;  text-align: center; color:blue;">检查状态</th>
                                        <th nowrap="nowrap" style="padding: 10px;  text-align: center; color:blue;" ng-show="!!eventId">导入状态</th>
                                        <th nowrap="nowrap" style="padding: 10px;  text-align: center; color:blue;" ng-show="!!eventId">合同链接</th>

                                        <apex:repeat value="{!tpHeaderList}" var="header">
                                        <th nowrap="nowrap" style="padding: 10px; text-align: center;">{!header}</th>
                                        </apex:repeat>
                                    </tr>
                                </thead>
                                        
                                <tbody id="fixed_header_tbody" >
                                    <tr ng-repeat="order in uploadBatchs track by $index" ng-click="selectHeader($index)" class="{{order.selected}}">
                                        <td style="text-align:center; padding: 10px;">{{order.index}}</td>
                                        <td class="validation" style="text-align:center; padding: 10px;" >
                                            <i class="fa fa-spinner fa-pulse fa-1x fa-fw" ng-show="order.status=='loading'"></i>
                                            <i class="fa fa-times " aria-hidden="true" style="color: red;" ng-show="order.status=='error'" title="{{order.errorStr}}"></i>
                                            <i class="fa fa-check" aria-hidden="true" style="color: green;" ng-show="order.status=='ready'"></i>
                                             <i class="fa fa-exclamation-triangle" aria-hidden="true" style="color: orange;" title="{{order.errorStr}}" ng-show="order.status=='caution'"></i>
                                            
                                        </td>   
                                        <td class="validation" style="text-align:center; padding: 10px;" ng-show="!!eventId">
                                            <i class="fa fa-spinner fa-pulse fa-1x fa-fw" ng-show="!order.returnStatus"></i>
                                            <i class="fa fa-times " aria-hidden="true" style="color: red;" ng-show="order.returnStatus=='Fail'" title="{{order.returnMsg}}"></i>
                                            <i class="fa fa-check" aria-hidden="true" style="color: green;" ng-show="order.returnStatus=='Success'"></i>
                                            
                                        </td>
                                        <td style="text-align:center; padding: 10px;" ng-show="!!eventId">
                                        <a href="/{{order.returnId}}" target="_blank">{{order.returnName}}</a></td>
                                        <td style="text-align:center; padding: 10px;">{{order.PONO}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.outletCode}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.ownerEmail}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.startDate}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.endDate}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.usePRCTemplate}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.volumeBase}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.activityTimes}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.description}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.psfModule2MinAchievement}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.psfModule2Rate}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.subbrandName}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.subbrandPurchaseValue | number: 2}}</td>
                                        <td style="text-align:center; padding: 10px;">{{order.subbrandBtl | number: 0}}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        <br/><br/><br/>
                    
                     
                    </div>
                </div>
            </div>
            <script>
                if (!String.prototype.trim){
                 /*---------------------------------------
                  * 清除字符串两端空格，包含换行符、制表符
                  *---------------------------------------*/
                 String.prototype.trim = function () { 
                  return this.replace(/(^[\s\n\t]+|[\s\n\t]+$)/g, "");
                 }
                 
                }
                class UploadedOrder {

                    constructor(data,index,$scope){
                        var startIndex = 0;
                        this.index         = index;
                        this.show          = true;
                        this.errors      = [];
                        this.errorStr = '';
                        this.selected      = '';
                        this.loading       = true;
                        this.status        = 'loading';
                        this.PONO     = data[startIndex][0].trim();
                        this.outletCode     = data[startIndex][1].trim();
                        this.outletId     = '';
                        this.outletName = '';
                        this.ownerId     = '';
                        this.ownerEmail    = data[startIndex][2].trim();
                        this.startDate     = data[startIndex][3].trim();
                        this.endDate       = data[startIndex][4].trim(); 
                        this.usePRCTemplate   = data[startIndex][5].trim();
                        this.volumeBase = data[startIndex][6].trim();
                        this.activityTimes = data[startIndex][7].trim();
                        this.description = data[startIndex][8].trim();
                        this.psfModule2MinAchievementStr           = data[startIndex][9].trim();
                        this.psfModule2RateStr           = data[startIndex][10].trim();
                        this.subbrandName  = data[startIndex][11].trim();
                        this.subBrandId = '';
                        // this.subbrands = [];
                        this.subbrandPurchaseValueStr = data[startIndex][12].trim();
                        this.subbrandBtlStr = data[startIndex][13].trim();
                        this.orgData = JSON.parse(JSON.stringify(this));

                    }

                    checkUploadData($scope){
                        // console.log(JSON.stringify(this));
                        // call the apex method of apex
                        ASI_CRM_CN_DolphinPOUploadCtl.checkUploadData(JSON.stringify(this),(result, event) => 
                            {   
                                // show the check results on page
                                this.checkDbResult(result, $scope);
                                // alignPreviewTable();
                                $('td').tooltip();
                                $scope.$apply();
                            }
                            ,{buffer: false,escape: true, timeout: 120000}
                        );
                    }
                    
                    outputCSV() {
                        var rows = [];
                        var firstRow = [this.orgData.PONO, this.orgData.outletCode,this.orgData.ownerEmail,this.orgData.startDate,this.orgData.endDate, this.orgData.usePRCTemplate,this.orgData.volumeBase, this.orgData.activityTimes,this.orgData.description,this.orgData.psfModule2MinAchievementStr, this.orgData.psfModule2RateStr,this.orgData.subbrandName, this.orgData.subbrandPurchaseValueStr, this.orgData.subbrandBtlStr,this.errorStr];
                        rows.push(firstRow);
                        
                        return rows;
                    }

                    checkDbResult(result, $scope){
                        // console.log(result);
                        // console.log('check');

                        var error = false;
                        var caution = false;

                        if(result.dateValid == 'errorDate') {
                            this.errors.push('日期格式错误, 正确时间格式为: 2020/03/13');
                            error = true;
                        } else if (result.dateValid == 'invalidDate') {
                            this.errors.push('开始日期不能大于结束日期');
                            error = true;
                        } else if (result.dateValid == 'invalidCrossdDate') {
                            this.errors.push('开始日期或结束日期不在该财年内');
                            error = true;
                        } else if (result.dateValid == 'invalidStartDate') {
                            this.errors.push('无效开始日期');
                            error = true;
                        } else if (result.dateValid == 'invalidEndDate') {
                            this.errors.push('无效结束日期');
                            error = true;
                        }
                        if(result.volumeBase == 'invalid') {
                            this.errors.push('Volume/Value Base 无效');
                            error = true;
                        }
                        if(result.itemGroupId == undefined && this.itemGroupCode != '' && this.itemGroupCode != undefined) {
                            this.errors.push('产品Code 不存在');
                            error = true;
                        }

                        if(!result.outletId) {
                            this.errors.push('客户不存在');
                            error = true;
                        } else {
                            this.outletId = result.outletId;
                        }

                        if (!result.ownerId) {
                            this.errors.push('该邮箱用户不存在');
                            error = true;
                        } else {
                            this.ownerId = result.ownerId;
                        }
                        this.psfModule2Rate = parseFloat(this.psfModule2RateStr);
                        this.psfModule2MinAchievement = parseFloat(this.psfModule2MinAchievementStr);
                        if (!result.subBrandId) {
                            this.errors.push('品牌不存在');
                            error = true;
                        } else {
                            this.subBrandId = result.subBrandId;
                        }

                        this.subbrandPurchaseValueStr = this.subbrandPurchaseValueStr.replace(/,/g, '');
                        if (isNaN(this.subbrandPurchaseValueStr) || this.subbrandPurchaseValueStr == '' ) {
                            this.subbrandPurchaseValue = 0;
                        } else if (this.subbrandPurchaseValueStr < 0) {
                            this.errors.push('Subbrand Purchase Value Error');
                            error = true;
                        } else {
                            this.subbrandPurchaseValue = parseFloat(this.subbrandPurchaseValueStr);
                        }

                        this.subbrandBtlStr = this.subbrandBtlStr.replace(/,/g, '');
                        if (isNaN(this.subbrandBtlStr) || this.subbrandBtlStr == '' ) {
                            this.subbrandBtl = 0;
                        } else if (this.subbrandBtlStr < 0) {
                            this.errors.push('Subbrand Purchase Value Error');
                            error = true;
                        } else {
                            this.subbrandBtl = parseFloat(this.subbrandBtlStr);
                        }

                        this.customerId = result.customerId;
                        this.subBrandId = result.subBrandId;
                        this.ownerId = result.ownerId;
                        
                        this.errors.forEach((err) =>{
                            this.errorStr += err + ';';
                        });
                        if (this.errorStr.length > 0) {
                            this.errorStr = this.errorStr.substr(0, this.errorStr.length - 1);
                        }

                        this.loading = false;
                        if (error) {
                            this.status = 'error';
                        } else if (caution) {
                            this.status = 'caution';
                        } else {
                            this.status = 'ready';
                        }
                        if (error) {
                            $scope.flag.reportBtnShow = true;
                            $scope.errorCount++;
                            $scope.errorBatchs.push(this);
                        } else {
                            $scope.successCount++;
                            $scope.successBatchs.push(this);
                        }
                        
                    }

                }

                function downloadCsv(rows, csvName) {
                    let csvContent = rows.map(e => e.join(",")).join("\n");
                    var encodedUri = encodeURI(csvContent);
                    var universalBOM = "\uFEFF";
                    var link = document.createElement("a");
                    link.setAttribute('href', 'data:text/csv; charset=utf-8,' + encodeURIComponent(universalBOM+csvContent));
                    link.setAttribute("download", csvName);
                    document.body.appendChild(link);

                    link.click();
                }

                function workbook2blob(workbook) {
                    var wopts = {
                        bookType: "xlsx",
                        bookSST: false,
                        type: "binary"
                    };
                    var wbout = XLSX.write(workbook, wopts);
                    function s2ab(s) {
                        var buf = new ArrayBuffer(s.length);
                        var view = new Uint8Array(buf);
                        for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;
                        return buf;
                    }
                    var blob = new Blob([s2ab(wbout)], {
                        type: "application/octet-stream"
                    });
                    return blob;
                }

                function openDownloadDialog(blob, fileName) {
                    if (typeof blob == "object" && blob instanceof Blob) {
                        blob = URL.createObjectURL(blob);
                    }
                    var aLink = document.createElement("a");
                    aLink.href = blob;
                    aLink.download = fileName || "";
                    var event;
                    if (window.MouseEvent) event = new MouseEvent("click");
                    else {
                        event = document.createEvent("MouseEvents");
                        event.initMouseEvent( "click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null );
                    }
                    aLink.dispatchEvent(event);
                }


                function setupUploadCtrl(myApp){
                    myApp.controller('uploadCtrl', function($scope, $window, $location,$interval){
                        console.log('uploadCtrl');
                        $('.tabContent').hide();
                        $('.tabSpace').hide();
                        $('td').tooltip();
                        var uploadCmtStr = '{!uploadComments}';
                        var uploadComments = uploadCmtStr.split(';');
                        $scope.upload = {show:false};
                        $scope.showReload = false;
                        $scope.xlsxSheet2 = [];
                        $scope.xlsxSheet3 = [];
                        $scope.xlsxSheet4 = [['导入说明'],[uploadComments[0]],[uploadComments[1]],[uploadComments[2]],[uploadComments[3]],[uploadComments[4]]];

                        $scope.flag = {batchSubmitReady:false,reportBtnShow:false,pendingSubmit:0};
                        $('#csv-file').change(function(){
                            if(this.files[0]!=null) {
                                console.log((this.files[0].name));
                                let fileName = this.files[0].name;
                                if (fileName.length > 10) {
                                    $('#csv-select').html('<i class="fa fa-file" aria-hidden="true"></i> '+ fileName.substring(0,10));
                                    // $('#csv-select').html('<i class="fa fa-file" aria-hidden="true"></i> '+ '');
                                } else {
                                    $('#csv-select').html('<i class="fa fa-file" aria-hidden="true"></i> '+fileName);
                                    // $('#csv-select').html('<i class="fa fa-file" aria-hidden="true"></i> '+ '');
                                }
                                $scope.eventId = '';
                                $scope.uploadCSV();
                            } else {
                                $('#csv-select').html('<i class="fa fa-file" aria-hidden="true"></i> 选择文件...');
                            }
                        });


                        $scope.downloadFailReport = () => {
                            //console.log($scope.uploadBatchs);
                            var errorStr = '{!errorHeader}';
                            var errorHeader = errorStr.split(',');
                            var rows = [[errorHeader]];
                            $scope.uploadBatchs.forEach((item,index)=>{
                                console.log(item.outputCSV());
                                rows = rows.concat(item.outputCSV());
                            });
                            downloadCsv(rows, "Dolphin PO模板Error.csv");
                        }
                         $scope.submitAll = () =>{
                            var tmpList = [];
                            let hasLPPError = false;
                            if (!!$scope.eventId) {
                                alert('正在进行数据的导入，请勿重复提交');
                                return;
                            }
                            for(var index = 0; index < $scope.uploadBatchs.length; index++) {
                                if ($scope.uploadBatchs[index].status == 'error' || $scope.uploadBatchs[index].status == 'loading') {
                                    alert('存在不合格导入数据或数据未检视完成，请检查后再导入');
                                    return;
                                }
                                if ($scope.uploadBatchs[index].status == 'caution') {
                                    hasLPPError = true;
                                }
                                tmpList.push($scope.uploadBatchs[index]);                               
                            }
                            if (hasLPPError) {
                                if (!confirm('当前有数据促销价格小于LPP，请确认是否继续保存?')) return;
                            }
                            $scope.showSpinner = true;
                            var mapPO = {};
                            tmpList.forEach((dolPO,index)=>{
                                let key = dolPO.PONO;
                                if (!mapPO[key]) {
                                    dolPO.subbrands = [{
                                        subbrandName : dolPO.subbrandName,
                                        subBrandId : dolPO.subBrandId,
                                        subbrandPurchaseValue : dolPO.subbrandPurchaseValue,
                                        subbrandBtl : dolPO.subbrandBtl,
                                        index : dolPO.index,
                                    }]
                                    mapPO[key] = dolPO;
                                } else {
                                    mapPO[key].subbrands.push({
                                        subbrandName : dolPO.subbrandName,
                                        subBrandId : dolPO.subBrandId,
                                        subbrandPurchaseValue : dolPO.subbrandPurchaseValue,
                                        subbrandBtl : dolPO.subbrandBtl,
                                        index : dolPO.index,
                                    });
                                }
                            });
                            if (!$scope.eventId) {
                                $scope.eventId = Date.now().valueOf() + '{!$User.Email}';
                            }
                            var eventList = Object.values(mapPO).map( x => ({
                                ASI_CRM_File_Name__c : $scope.eventId,
                                ASI_CRM_Result__c : JSON.stringify(x),
                                ASI_MFM_Name__c : 'Dolphin'
                            }));

                            ASI_CRM_CN_DolphinPOUploadCtl.saveData(JSON.stringify(eventList),$scope.eventId,(result, event) => 
                                {

                                    // console.log(event);
                                    if (event.status) {
                                        $scope.showSpinner = false;
                                        $scope.successCount = 0;
                                        $scope.errorCount = 0;
                                        $scope.startQueryStatus();
                                        $scope.$apply();
                                    } else {
                                        $scope.showSpinner = false;
                                        $scope.$apply();
                                        alert('导入报错：' + event.message);
                                    }
                                }
                                ,{buffer: false,escape: true, timeout: 120000}
                            );
                        }

                        $scope.submitOrder = (index) => {
                            if($scope.flag.pendingSubmit==null) $scope.flag.pendingSubmit=0;
                            $scope.flag.reportBtnShow = !(++$scope.flag.pendingSubmit > 0);
                            var order = $scope.uploadBatchs[index];
                            order.submitOrder(() => {
                                if(--$scope.flag.pendingSubmit <=0) $scope.flag.reportBtnShow = true;
                                $scope.$apply();
                            });
                        }
                        $scope.startQueryStatus = () => {
                            $scope.runEndFlag = false;
                            // 定义计时器
                            var timer = $interval(function(){
                                if (!$scope.runEndFlag) {
                                    $scope.successCount = 0;
                                    $scope.errorCount = 0;

                                    ASI_CRM_CN_DolphinPOUploadCtl.queyBatchResultStatus($scope.eventId ,(result, event) => 
                                        {
                                            if (event.status) {
                                                console.log('result',result);
                                                var iIsRunning = 0;
                                                result.forEach((ele,index)=>{
                                                    ele.po.subbrands.forEach((sub, index) => {
                                                        var currentBatch = $scope.uploadBatchs.find(order => order.index == sub.index);
                                                        currentBatch.returnStatus = ele.log.ASI_MFM_Status__c;
                                                        currentBatch.returnMsg = ele.log.ASI_CRM_Remark__c;
                                                        currentBatch.returnId = ele.log.ASI_CRM_Related_Id__c;
                                                        currentBatch.returnName = ele.log.ASI_CRM_Related_Name__c;
                                                        if (!ele.log.hasOwnProperty('ASI_MFM_Status__c')) {
                                                            iIsRunning ++;
                                                        }else if (ele.log.ASI_MFM_Status__c == 'Success') {
                                                            $scope.successCount++;
                                                        } else if (ele.log.ASI_MFM_Status__c == 'Fail') {
                                                            $scope.errorCount++;
                                                        }
                                                    });
                                                });
                                                if (iIsRunning == 0) {
                                                    $scope.runEndFlag = true;
                                                }
                                                $scope.$apply();
                                            } else {
                                                $scope.$apply();
                                                alert('导入报错：' + event.message);
                                            }
                                        }
                                        ,{buffer: false,escape: true, timeout: 120000}
                                    );
                                } else {
                                    //清除计时器
                                    $interval.cancel(timer);
                                }
                            },5000);
                        }
                        $scope.uploadCSV = () => {
                            console.log('进' + new Date().getTime());
                            let fileinput = $('#csv-file').prop('files')[0];
                            if(fileinput==null) {
                                alert('Please upload CSV');
                                return;
                            }
                            var csvFile = document.getElementById('csv-file');
                            csvFile.value = '';
                            $scope.flag.reportBtnShow = false;
                            $scope.flag.batchSubmitReady = false;
                            $scope.showReload = true;
                            $scope.batchCount = 0;
                            $scope.errorCount = 0;
                            $scope.successCount = 0;
                            $scope.uploadBatchs = [];
                            $scope.successBatchs = [];
                            $scope.errorBatchs = [];
                            Papa.parse(fileinput, {
                               
                                complete: (results, file) => {
                                    var order = [];
                                    
                                    for(var rowId = 1; rowId < results.data.length; rowId++){
                                        var row = results.data[rowId];
                                        if(rowId >= 1 && row != undefined && row[2] != null && row[2] != '') {
                                            order = [];
                                            order.push(row);
                                            $scope.uploadBatchs.push(new UploadedOrder(JSON.parse(JSON.stringify(order)),$scope.uploadBatchs.length+1,$scope));
                                            
                                        }
                                        
                                        
                                    }
                                    console.log(new Date().getTime());
                                    // $scope.uploadBatchs.push(new UploadedOrder(JSON.parse(JSON.stringify(order)),$scope.uploadBatchs.length+1,$scope));

                                    $scope.uploadBatchs.forEach((order,index)=>{

                                        order.checkUploadData($scope);
                                    });
                                    // $scope.selectHeader(0);
                                    $scope.upload.show = true;
                                    // console.log('show' + $scope.uploadBatchs);
                                    $scope.batchCount = $scope.uploadBatchs.length;
                                    $scope.$apply();
                                    // alignPreviewTable();
                                }

                            });
                        };

                    });
                }
                var myApp = angular.module("TradePlanApp", []);
                setupUploadCtrl(myApp);
            </script>
        </body>
    </html>
</apex:page>