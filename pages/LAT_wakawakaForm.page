<apex:page controller="LAT_wakawakaForm" showheader="false" action="{!checkIfEntryExists}" applyBodyTag="false" applyHtmlTag="false" standardstylesheets="false" tabStyle="Account" title="Form Render"  sidebar="false" lightningStylesheets="true"  >

<!-- applyHtmlTag="false" applyBodyTag="false" -->
<html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" >

    <head>
        <title>Entry - Schema Form Builder</title>
        <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1" />
        <apex:slds />
        <apex:stylesheet value="{!URLFOR($Resource.LAT_wakawakaForms, '/assets/css/demo.css')}"/>
        <!-- TO MOVE TO DEMO CSS -->
        <style media="all">
            body.slds-scope hr {
                margin: 0!important;
            }

            .reqerror {
                background-color: #fff;
border-color: #c23934;
-webkit-box-shadow: #c23934 0 0 0 1px inset;
box-shadow: #c23934 0 0 0 1px inset;
background-clip: padding-box;
            }

            h4.page {
                font-size: 25px;
    padding-right: 10px;
    color: #328ba3;
            }

            .toast {
                z-index: 10000;
            }

            .info-small {
                font-size: 12px;
/* clear: both; */
color: #444;
border: solid 1px #ddd;
padding: 5px;
border-radius: 5px;
display: block;
float: left;
margin: 0 5px 5px 0;
            }

            .field-container {
                margin-top: 8px;
            }

            h5 span.objName b {
                    color: #1c8bbf;
            }

            .draft {
                background: #736e6e;
                border: solid 1px #2b2626;
                color: #fff;
                padding: 0px 7px;
                text-transform: uppercase;
                border-radius: 6px!important;
                letter-spacing: 1.3px;
            }

            .published {       background: #2e8339;
    border: solid 1px #102b0d;
                color: #fff;
                padding: 0px 7px;
                text-transform: uppercase;
                border-radius: 6px!important;
                letter-spacing: 1.3px;
            }

            html body.slds-scope .slds-spinner_container {
                position: fixed;
            }

            body  label.slds-radio_button__label, body  label.slds-checkbox_button__label {
                margin-right: 0!important;
            }
        </style>
    </head>



    <body class="slds-scope">
        <div class="slds">
        <div class="slds-page-header">
        <div class="slds-page-header__row">
        <div class="slds-page-header__col-title">
        <div class="slds-media">
        <div class="slds-media__figure">
        <span class="slds-icon_container slds-icon-action-follow" title="Entry">
        <svg class="slds-icon slds-page-header__icon" aria-hidden="true">
        <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/action-sprite/svg/symbols.svg#new_custom34')}" xmlns:xlink="http://www.w3.org/1999/xlink"></use>
        </svg>
        <span class="slds-assistive-text">Entry</span>
        </span>
        </div>
        <div class="slds-media__body">
            <div class="slds-page-header__name">
                <div class="slds-page-header__name-title">
                    <h1>
                    <span class="slds-page-header__title slds-truncate" title="{!fbs.Name}">{!fbs.Name}</span>
                    </h1>
                </div>
            </div>
            <p class="slds-page-header__name-meta" id="currentAction"></p>
            <p class="slds-page-header__name-meta" id="lastmodified"></p>
        </div>
        <a class="slds-button slds-button_outline-brand" href="{!backUrl}" style="float: right;">
                <svg aria-hidden="true" class="slds-button__icon slds-button__icon_left">
                    <use xlink:href="/_slds/icons/action-sprite/svg/symbols.svg#back"></use>
                  </svg>
                Back to Dashboard</a>
            </div>

        </div>
        </div>
        </div>
            <div class="content">
                <!-- <div class="slds-grid" style="border-bottom: solid 1px #ddd;padding-bottom: 10px;">
                  <div>
                      <ul class="slds-carousel__indicators" id="carru"  role="tablist">


                      </ul>
                  </div>

                  <div class="slds-col_bump-left">
                    <h4 class="page">Preview - <span id="p-name">Page Name</span></h4>
                      </div>

                </div> -->

                <apex:outputPanel rendered="{!fbs.Status__c != 'Active'}" >
                <div class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_warning" role="alert" style="font-size: 15px;padding: 10px;border-radius: 5px;margin: 10px;font-weight: bold;color: #3a6d79">
<span class="slds-assistive-text">warning</span>
<span class="slds-icon_container slds-icon-utility-warning slds-m-right_x-small" title="Description of icon when needed">
<svg class="slds-icon slds-icon_x-small" aria-hidden="true">
<use xlink:href="{!URLFOR($Asset.SLDS, 'icons/utility-sprite/svg/symbols.svg#warning')}"></use>

</svg>
</span>
<h2>Audit/Survey "{!fbs.Name}" is not active yet.
<a href="{!backUrl}"> Back</a>
</h2>
<div class="slds-notify__close">

</div>
</div>
                </apex:outputPanel>


                <div class="slds-grid slds-grid_align-center slds-wrap">
                    <div class="slds-col slds-size_1-of-1">
                        <div id="custom-preview" class="form-custom slds-p-horizontal_small" >
                            <form action="" id="full-form">
                                <div id="form-insertion" class="page">

                                </div>
                            </form>
                        </div>

                    </div>

                </div>
            </div>

            <!-- overlay lookup -->
            <div class="lookupOverlay" style="height: auto;">
            <section role="dialog" tabindex="-1" class="slds-modal slds-max-medium-table_stacked  slds-max-medium-table_stacked-horizontal slds-modal_small slds-list-builder"
              aria-labelledby="id-of-modalheader-h2" aria-modal="true" aria-describedby="modal-content-id-1">
              <div class="slds-modal__container">
                <header class="slds-modal__header">
                  <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" onclick="hideOverlay('lookupOverlay');"
                    title="Close">
                    <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                        <use xlink:href="{!URLFOR($Asset.SLDS, 'icons/utility-sprite/svg/symbols.svg#close')}"></use>

                      <!-- <use xlink:href="static/icons/utility-sprite/svg/symbols.svg#close" xmlns:xlink="http://www.w3.org/1999/xlink" /> -->
                    </svg>
                    <span class="slds-assistive-text">Close</span>
                  </button>
                  <h2 id="id-of-modalheader-h2" class="slds-text-heading_medium">Choose Salesforce Object</h2>
                  <!-- <p class="slds-m-top_x-small">Pricebook: Salesforce Products</p> -->
                </header>
                <div class="slds-modal__content slds-grid slds-grow" id="modal-content-id-1">
                  <div class="slds-hide lookupLoader" style="height: 6rem;">
                    <div role="status" class="slds-spinner slds-spinner_large slds-spinner_brand">
                      <span class="slds-assistive-text">Loading</span>
                      <div class="slds-spinner__dot-a"></div>
                      <div class="slds-spinner__dot-b"></div>
                    </div>
                  </div>
                  <div class="slds-grid lookupContent slds-grid_vertical ">
                    <div class="slds-p-vertical_x-small slds-p-horizontal_large slds-shrink-none slds-theme_shade">

                      <div class="slds-form-element">
                        <!-- <label class="slds-form-element__label" for="text-input-id-1">Salesforce Objects</label> -->
                        <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon_left">
                          <svg class="slds-icon slds-input__icon slds-input__icon_left slds-icon-text-default" aria-hidden="true">
                              <use xlink:href="{!URLFOR($Asset.SLDS, 'icons/utility-sprite/svg/symbols.svg#search')}"></use>

                            <!-- <use xlink:href="static/icons/utility-sprite/svg/symbols.svg#search" xmlns:xlink="http://www.w3.org/1999/xlink" /> -->
                          </svg>
                          <input type="text" id="filter-lookup" class="slds-input" placeholder="Filter Objects" />
                        </div>
                      </div>

                      <div class="slds-text-title slds-m-top_x-small lookup-count" aria-live="polite">
                        <span>0</span> Objects Availables</div>
                    </div>
                    <div class="slds-scrollable slds-grow">

                      <table role="grid" class="resultLookup slds-table slds-table_fixed-layout slds-table_bordered  slds-scrollable_none">
                        <thead>
                          <tr class="slds-text-title_caps slds-line-height_reset">
                            <th scope="col" style="width: 3.75rem;"></th>
                            <th scope="col">
                              <span class="slds-truncate" title="Name">Name</span>
                            </th>
                            <!-- <th scope="col">
                              <span class="slds-truncate" title="Name">Label</span>
                            </th> -->

                          </tr>
                        </thead>
                        <tbody>


                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>

              </div>
            </section>
            <div class="slds-backdrop"></div>
          </div>


            <!-- Remote Objects definition to set accessible sObjects and fields -->

                <apex:remoteObjects jsNamespace="Entry" >

                    <apex:remoteObjectModel name="LAT_FormBuilderEntries__c"
                        fields="Fields_Populated__c,Form_Builder_Schema__c,jsonData__c,Status__c">
                        <!-- <apex:remoteObjectField name="Fields_Populated__c" jsShorthand="FieldPopulated"/>
                        <apex:remoteObjectField name="Form_Builder_Schema__c" jsShorthand="Schema"/>
                        <apex:remoteObjectField name="Json__c" jsShorthand="Json"/> -->
                    </apex:remoteObjectModel>

                </apex:remoteObjects>


            <!-- TOAST  -->

            <div class="toast" >
<div class="slds-notify_container slds-is-relative">
<div class="slds-notify slds-notify_toast slds-theme_success" role="status">
<span class="slds-assistive-text">success</span>
<span class="slds-icon_container slds-icon-utility-success slds-m-right_small slds-no-flex slds-align-top" title="Description of icon when needed">
<svg class="slds-icon slds-icon_small" aria-hidden="true">
<use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#success')}" xmlns:xlink="http://www.w3.org/1999/xlink"></use>
</svg>
</span>
<div class="slds-notify__content">
<h2 class="slds-text-heading_small " id="toastTitle" ></h2>
</div>
<div class="slds-notify__close">
<button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close">
<svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
<use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#close')}" xmlns:xlink="http://www.w3.org/1999/xlink"></use>
</svg>
<span class="slds-assistive-text">Close</span>
</button>
</div>
</div>
</div>
</div>

        </div>

        <!-- GENERIC LOADER -->
        <div id="spinner" class="slds-spinner_container slds-hide" >
            <div role="status" class="slds-spinner slds-spinner--large slds-spinner--brand">
                <div class="slds-spinner__dot-a"></div>
                <div class="slds-spinner__dot-b"></div>
            </div>
        </div>

        <style>
            .toast {
                position: fixed;
                /* height: 4rem; */
                /* POSITION: absolute; */
                top: 50px;
                left: 50%;
                margin-left: -217px;
                display: none;
            }

            .slds-scope img.preview-special {
                max-width: 180px;
max-height: 180px;
border-radius: 6px;
border: solid 3px #6aa0be;
            }

            .prev-cont {
                clear: both;
    display: block;
    border-top: solid 1px #ddd;
    padding-top: 15px;

            }
        </style>

        <!-- Vendor JS (Jquery) -->
        <apex:includeScript value="{!URLFOR($Resource.LAT_wakawakaForms, '/assets/js/vendor.js')}"/>
        <!-- Builders -->
        <!-- <apex:includeScript value="{!URLFOR($Resource.LAT_wakawakaForms, '/assets/js/waka-render.js')}"/> -->
        <!-- TO MOVE TO WAKA RENDER -->
        <script>

        function handleFile(file, inputFileName) {
            var f = file.files;
            if(f.length == 1){
                var fileName = file.files[0].name;
                var size = file.files[0].size;
                //console.log(fileName);
                //console.log(file.files[0]);
                var src = window.URL.createObjectURL(file.files[0]);
                var previewImg = '<img class="preview-special" src="'+src+'" /> ';
                //$('.prev-cont').remove();
                $('#label-'+inputFileName).parent().find('.prev-cont').remove();
                $('#'+inputFileName).addClass('updated-files');
                $('#label-'+inputFileName).parent().append('<div class="prev-cont">'+previewImg+'</div>');
                // fileName
            }
            console.log(inputFileName);
            // console.log();
            console.log(f);
            // var reader  = new FileReader();
            // reader.file = f;
            // var fileobj = f;
            // // document.getElementById("fileName").innerHTML = fileobj.name;
            // console.log(fileobj.name);
            // console.log(inputFileName);

        }

        // We set the conditions and the id of the item that we must to show (or hide)
        var currentConditions = [];

        function checkConditions(){
            $.each(currentConditions, function(key, condition) {
                var strCon = currentConditions[key].con;
                var elemId = currentConditions[key].elem;
                // console.log(strCon);
                 var conditionOk = eval(strCon);
                // console.log(conditionOk);
             // console.log(currentConditions[key]);
              if(conditionOk) {
                  $(elemId).removeClass('slds-hide');
              } else {
                 $(elemId).addClass('slds-hide');
              }


          });

        }


        //  waka-render.js
/*
* Waka waka form render powered By pirata@zimmic.com
* Converts a JSON to a custom html form or a salesforce form
* Tsamina mina, eh eh
* Waka waka, eh eh
* Tsamina mina zangalewa
* This time for Africa!
*/
class WakaWakaRender {

config () {}

// This time for Africa!
build(formJson, elToInsert) {

    var myJson = JSON.parse(formJson) ;
    var formHTML = '';
    var _this = this;
    $.each(myJson, function(key, value) {
        formHTML += _this.markup(value, elToInsert+'-'+key);
        // console.log(ind,myJson[ind] );
    });

    // for(var ind in myJson) {
    //
    //
    // }

    // draw all the html templates
    $('#'+elToInsert).html(formHTML);

    // then we have to run the validations

    $('#form-insertion').change(function(){
checkConditions();
});

$('#form-insertion input').keyup(function(){
checkConditions();
});

if('{!entry.Status__c}' == 'Saved'   ) {
    $('input, select, textarea').attr('disabled', true);
}

}

// Tsamina mina zangalewa
markup(config, key) {
    var generatedEl = 'not found';
    //console.log(key);
    var hideClass = '';
    if(config.condition && config.condition != '') {
        var condition = new Object();
        condition.elem = '#customElem-'+key;
        condition.con = config.condition;
        //console.log(condition);
        currentConditions.push(condition);
        hideClass = 'slds-hide';
    }
    //console.log(hideClass + '-' + key);
    switch (config.type) {
        case 'Line':
            var w = (config.width) ? config.width : '100%';
            var h = (config.height) ? config.height : '2px';

            return '<div id="customElem-'+key+'" class="slds-form-element '+hideClass+'"><div style="width:'+w+'; margin-bottom: 10px;"><hr style="border-top:'+h+'px solid #ccc" /></div></div>';
            // break;
        case 'header':

            var styles = "style='color: "+config.color+"; align"+config.position+"'";
            return '<div id="customElem-'+key+'" class="slds-form-element '+hideClass+'"><'+config.subtype+' '+styles+' >'+config.label+'</'+config.subtype+'></div>';
        case 'select':
            return this.processComponent(config, key, hideClass);

        case 'Photo':
            return this.processComponent(config, key, hideClass);
        case 'Action':
            return this.processComponent(config, key, hideClass);
        default:
            return this.processComponent(config, key, hideClass);

    }
    return '<div>Pirate</div>';
}


processComponent(config, key, hideClass) {
    var html = config.type + ' - item not found <br/>';
    var requiredHML = (config.required) ? '<abbr class="slds-required" title="required">*</abbr> ' : '';
    switch (config.type) {

        // SELECT
        // This time for Africa!
        case 'select':
            var multiple = (config.multiple) ? 'multiple' : '';
            var requiredProp = (config.required) ? 'req' : '';
            var options = '';
            var placeholder = (config.placeholder) ? ('<option value="" >'+config.placeholder+'</option>') : '<option value="" >Please Select</option>';
            if(multiple == 'multiple') {
                placeholder = '';
            }
            config.values.forEach(function(element) {
                options += '<option value="'+element.value+'">'+element.label+'</option>';
            });

            html = '<div id="customElem-'+key+'" class="slds-form-element '+hideClass+'">\
            <label class="slds-form-element__label" for="'+config.name+'">'+requiredHML +config.label+'</label>\
                <div class="slds-form-element__control">\
                <div class="slds-select_container">\
                    <select '+multiple+' name="'+config.name+'" class="slds-select '+requiredProp+'" id="'+config.name+'">\
                    '+placeholder+'\
                    '+options+'\
                    </select>\
                </div>\
                </div>\
            </div>';
            break;
            //<option value="" >'+placeholder+'</option>\
        // PHOTO
        // This time for Africa!
        case 'Photo':
            var label = (config.label) ? config.label : 'Foto';
            var value = (config.value) ? config.value : '';
            var currentEl = '';
            //console.log('photo value', config);
            if(value != ''){
                currentEl = '<div  class="slds-box slds-theme_shade">\
                                <p><img  src="/servlet/servlet.FileDownload?file='+value+'" /></p>\
                            </div>';
            }
            html =  '<div class="slds-form-element '+hideClass+'" id="customElem-'+key+'">'+currentEl+'<label class="buttonFile slds-button_neutral btn-block slds-button"><svg class="slds-icon slds-icon-text-default" aria-hidden="true"><use xlink:href="/_slds/icons/utility-sprite/svg/symbols.svg#photo"></use></svg> <span id="label-'+config.name+'">'+config.label+'</span><input class="image-selector"  name="'+config.name+'" id="'+config.name+'" value=""  capture="camera"  onchange="handleFile(this, \''+config.name+'\')"  style="display: none;" type="file" accept="image/*;"></label></div>';
        break;


        // Action
        // This time for Africa!
        case 'Action':
            var action = (config.action) ? config.action : 'submit';
            var label = (config.text) ? config.text : 'save';
            var cssStyle = (config.cssStyle) ? config.cssStyle : 'slds-button_neutral';
            var fullButton = (config.fullButton == 'yes') ? 'btn-block' : '';
            var position = (config.position == 'left' ) ? '' : 'slds-float_right';
            var background = (config.background  ) ? config.background : '';
            var color = (config.color) ? config.color : '';
            var goPage = (config.goPage) ? config.goPage : '';

            //console.log('PIRATE', config);
            var myStyle = '';
            if(background != '' && color != '') {
                myStyle = 'background: '+ background +'; color: '+ color+';';
                cssStyle = 'slds-button_neutral';
            }
            console.log('#######>>>>', action);
            console.log('#######>>>>', '{!entry.Status__c}' == 'Draft');
            console.log('{!entry.Status__c}' );

            // actions disabled when the status is not Draft
            if('{!entry.Status__c}' == 'Draft'   ) {
                html = '<div    class="slds-form-element '+hideClass+'" id="customElem-'+key+'"><a  style="'+myStyle+'" onclick="runEvent(\''+action +'\', \''+goPage +'\' )"  class="slds-button '+position +' '+fullButton+' '+cssStyle+'">'+label+'</a></div>';
            } else {
                //html = '';
                if(action == 'Submit' || action == 'Save') {
                    html = '<div class="slds-form-element '+hideClass+'" id="customElem-'+key+'"><button  class="slds-button_outline-brand slds-button '+position +' '+fullButton+' '+cssStyle+'" disabled="">'+label+'</button></div>';
                } else {
                    html = '<div    class="slds-form-element '+hideClass+'" id="customElem-'+key+'"><a  style="'+myStyle+'" onclick="runEvent(\''+action +'\', \''+goPage +'\' )"  class="slds-button '+position +' '+fullButton+' '+cssStyle+'">'+label+'</a></div>';

                }
            }
        break;


        // Action
        // This time for Africa!
        case 'TextInput':
            var label = (config.label) ? config.label : '';
            var required = (config.required) ? ' <abbr class="slds-required" title="required">* </abbr>' : '';
            var requiredProp = (config.required) ? 'req' : '';
            var rows = config.rows;
            var value = (config.value) ? config.value : '';
            var readOnly = (config.readOnly) ? 'disabled': '';
            var placeholder = (config.placeholder) ? config.placeholder : '';
            var customType = (config.customType) ? customType : 'text';
            // var customType = () ? : '';
            // var customType = () ? : '';
            // var customType = () ? : '';


            customType =  (config.hidden) ?  'hidden' : customType;

            html = '<div id="customElem-'+key+'" class="slds-form-element '+hideClass+'">\
              <label class="'+config.name+'" for="text-input-id-1">'+required+label+'</label>\
              <div class="slds-form-element__control">';
              if(rows > 1) {
                html += ' <textarea '+readOnly+ ' name="'+config.name+'" id="'+config.name+'" class="slds-textarea '+requiredProp+'" placeholder="'+placeholder+'">'+value+'</textarea>';
              } else {
                html += '<input '+readOnly+' name="'+config.name+'" id="'+config.name+'" class="slds-input '+requiredProp+'" type="'+customType+'" value="'+value+'" />';
              }

            html += '</div>\
            </div>';




        break;


        // checkbox-group
        // This time for Africa!
        case 'checkbox-group':
            var label = (config.label && config.label != 'undefined' ) ? config.label : '';
            var required = (config.required) ? ' <abbr class="slds-required" title="required">* </abbr>' : '';
            var requiredProp = (config.required) ? 'req' : '';
            var rows = config.rows;
            var value = (config.value) ? config.value : '';
            var placeholder = (config.placeholder) ? config.placeholder : '';
            var customType = (config.customType) ? customType : '';
            var values = (config.values) ?  config.values : [];
            // var customType = () ? : '';
            // var customType = () ? : '';
            // var customType = () ? : '';


            customType =  (config.hidden) ?  'hidden' : customType;

            html = '        <fieldset id="customElem-'+key+'" class="slds-form-element '+hideClass+'">\
                <legend class="slds-form-element__legend slds-form-element__label">'+required+label+'</legend>\
                <div class="slds-form-element__control">\
                    <div class="slds-checkbox_button-group">';

                    $.each(values, function(key, value) {
                        html += '<span class="slds-button slds-checkbox_button">\
                            <input id="'+config.name+'-'+key+'" class="'+requiredProp+'" name="'+config.name+'" type="checkbox" value="'+value.value+'" />\
                            <label class="slds-checkbox_button__label" for="'+config.name+'-'+key+'">\
                                <span class="slds-checkbox_faux">'+value.label+'</span>\
                            </label>\
                        </span> ';
                    });



            html += '     </div>\
                </div>\
            </fieldset>';




        break;
        case 'Lookup':
            var label = (config.label) ? config.label : '';
            var name = (config.name) ? config.name : slugify(config.label);
            var filterSalesforce = (config.filter) ? config.filter : '';
            // Escape error fix , we replace quotes to # and then before to send to salesforce, we will add it again
            filterSalesforce = filterSalesforce.replace(/["']/g, "#");

            var relationFields = (config.relationFields) ? config.relationFields : '';

            //console.log('########################', config);
            //console.log('############## filterSalesforce ##########', filterSalesforce);
            html =             '<article id="customElem-'+key+'" class="slds-card  '+hideClass+'">\
                <div class="slds-card__header slds-grid">\
                <header class="slds-media slds-media_center slds-has-flexi-truncate">\
                <div class="slds-media__figure">\
                <span class="slds-icon_container slds-icon-action-follow" title="'+label+'">\
                <svg aria-hidden="true" class="slds-icon" title="when needed"><use xlink:href="/_slds/icons/standard-sprite/svg/symbols.svg#default"></use></svg>\
                <span class="slds-assistive-text">'+label+'</span>\
                </span>\
                </div>\
                <div class="slds-media__body">\
                <h5 id="lookup-'+name+'" class="slds-card__header-title">\
                    <a href="javascript:void(0);" onclick="openSalesforceLookup(\''+filterSalesforce+'\',  \''+relationFields+'\', \''+label+' \', \' '+config.displayFields+' \', \''+config.object+'\',\''+config.orderBy+'\',\''+config.orderBy+'\', \''+name+'\')" class="slds-card__header-link slds-truncate" title="'+label+'">\
                    <input class="lookup" type="hidden" id="'+name+'" value="" name="'+name+'" />\
                <span class="objName">'+label+' <b></b></span>\
                </a>\
                <div class="field-container" id="fields-'+name+'">\
                </div>\
                </h5>\
                </div>\
                </header>\
                </div>\
                </article>';

        break;



        default:
            break;
    }

    return html;
}


}

        </script>

        <script>

        var timeout = null;


        function openLookup(eId, objectName, fields, unProcessFields, relationFields, filter) {
        //    console.log('>>>>>>>'+fields);
          //var currentValue = $('#' + eId).val();
          $('#filter-lookup').on('keyup', function () {
            clearTimeout(timeout);
            timeout = setTimeout(function () {
                var searchTerm = $('#filter-lookup').val();
                if(searchTerm.length > 2) {
                    invokeRemoting(searchTerm, objectName, fields, eId, unProcessFields, relationFields, filter);
                }

          }, 500);
          });
        }

        function hideOverlay(elParent) {
          $('.' + elParent + ' section').removeClass('slds-fade-in-open');
          $('.' + elParent + ' .slds-backdrop').removeClass('slds-backdrop_open');
        }

        function showOverlay(elParent) {
          $('.' + elParent + ' section').addClass('slds-fade-in-open');
          $('.' + elParent + ' .slds-backdrop').addClass('slds-backdrop_open');


        }

        function setObjectInfo(objectLabel){
            $('#id-of-modalheader-h2').html('Choose '+objectLabel+' Object.');
            $('#filter-lookup').attr('placeholder', 'Filter '+objectLabel);


        }

        function openSalesforceLookup(filter, relationFields, label, fields, object, orderBy,  orderByColumn, elName){

            showOverlay('lookupOverlay');
            $('#filter-lookup').val('');
            setObjectInfo(label);
            //var rex = /\(([^)]+)\)/g;

            //var rex = /\(([^)]+)\)/;
            // New impementation trying to get the last ones
            var rex = /\(([^)]*)\)[^(]*$/;


            var matches = fields.match(rex);
            var fieldsArray = [];

            console.log('pirate', fields);
            console.log('matches', matches);


            var separatedFields = fields.split('#');
            console.log('separatedFields', separatedFields);
            $(separatedFields).each(function(ind , item){
                console.log('ind', ind);
                console.log('item', item);
                var fieldNameREg = item.match(rex);
                console.log('fieldNameREg', fieldNameREg);
                fieldsArray.push(fieldNameREg[1]);
            });

            // for (var i = 0; i < matches.length; i++) {
            //     console.log(matches[i]);
            //     fieldsArray.push(matches[i].replace('(', ' ').replace(')', ' '));
            // }



            // Add Relation Fields TO DO: ADD LABEL
            var relationArray = (relationFields != '') ?  relationFields.split('# ') : [];

            $(relationArray).each(function(ind , relF){
                fieldsArray.push(relF);
                //console.log('>>>>>', relF);
            });

            //console.log('>>>>> fieldsArray', fieldsArray);



            // console.log();
            openLookup(elName, object, fieldsArray.join(), fields, relationFields, filter );
            $('.lookupOverlay tbody tr').remove();
            $('.lookup-count span').html('0');
        }

        function setCurrent(relationFields, unProcessFields, elId, parentElId){
            var myJson = $('#'+elId).val();
            // aca


            //$('#'+parentElId).val(myJson);
            processValues(relationFields, unProcessFields, myJson, parentElId);
            //console.log('unProcessFields', unProcessFields);

        }

        function processValues(relationFields, unProcessFields, myJson, elId){
            var currentJson = $.parseJSON(myJson);
            //console.log(currentJson);
            var items = unProcessFields.split('#');
            var lookupEntry = new Object();

            lookupEntry.name = elId;
            lookupEntry.values = [];

            // new pirate implementation

            // Clear Pills
            $('#fields-'+elId + ' span').remove()

            $.each(items, function(ind, el){
                var splitedElement =  el.split('-');
                var elLabel = splitedElement[0];
                // console.log(elLabel);
                //var regExp = /\(([^)]+)\)/;
                // New impementation trying to get the last ones
                var regExp = /\(([^)]*)\)[^(]*$/;
                var matches = regExp.exec(splitedElement[1]);
                var objectName = matches[1];
                // console.log(objectName);

                var exist = false;

                $(currentJson).each(function(i , elem){

                    //console.log('###### ', elem);
                    if(elem.hasOwnProperty(objectName) ){
                        exist = true;
                        $('#fields-'+elId).append('<span class="info-small"><b>'+elLabel+'</b>:  '+elem[objectName]+'</span>');
                        var el = new Object();
                        //el.name =  elLabel ;
                        el[elLabel] =  elem[objectName] ;
                        lookupEntry.values.push(el);
                    }
                });

                if(!exist) {
                    $('#fields-'+elId).append('<span class="info-small"><b>'+elLabel+'</b>: - </span>');
                    var el = new Object();
                    el[elLabel] =  '' ;
                    lookupEntry.values.push(el);
                }



            });

            // Process Relation Fields
            var arrayRelation = (relationFields != '') ? relationFields.split('#') : [];
            // arrayRelation.push(relationFields);
            $(arrayRelation).each(function(i , elem){

                var elemSplit = elem.split('.');
                var relationName = elemSplit[0].trim().toString();
                var relationField =  elemSplit[1].trim().toString();



                $(currentJson).each(function(index , controllerObj){

                    // console.log(controllerObj.hasOwnProperty(relationField));
                    if(controllerObj.hasOwnProperty(relationName) ){
                        var myObject = controllerObj[relationName];

                        var ref = elemSplit[0].trim().toString();
                        // var relationField = Object.keys(myObject)[0];
                        console.log('myObject', myObject);

                        // exist = true;
                        $('#fields-'+elId).append('<span class="info-small"><b>'+elem+'</b>:  '+ myObject[relationField] +'</span>');
                        // console.log('###### relationField ', relationField.toString());
                        // console.log('###### controllerObj ', myObject);
                        var el = new Object();
                        // el.name =  elem ;
                        el[elem] =   myObject[relationField] ;
                        lookupEntry.values.push(el);
                    }
                });

            });



            // Force to add Name and Id
            var el = new Object();
            // el.name =  'Name' ;
             // =  elem[objectName] ;
            el['Name'] =  currentJson['Name'] ;
            lookupEntry.values.push(el);

            $('#lookup-'+elId + ' a span b').html(' - '+el['Name']);

            // $('#fields-'+elId).append('<span class="info-small"><b>Name</b>: '+currentJson['Name']+' </span>');

            el = new Object();
            el['Id'] =  currentJson['Id'] ;
            lookupEntry.values.push(el);
            // Pirate
            $('#'+elId).val(JSON.stringify(lookupEntry.values));

            hideOverlay('lookupOverlay');
            checkConditions();

        }

        function invokeRemoting(searchText, objectName, fields, eId, unProcessFields, relationFields, filter){
            //console.log(searchText);
            //console.log('fieldsfieldsfieldsfields', fields);


            // Filter in format: accountId = {{FIELDNAME}} must be replaced before to send to the controller
            var reg = /\{{([^}]+)\}}/;
            if(reg.test(filter)) {
                var regProcessed = filter.match(reg)
                var valueToUpdate = regProcessed[0];
                var inputId =  regProcessed[1];
                var currentValue = $('#'+inputId).val();
                var salesforceId = '';
                if(currentValue != '') {
                    var obj = JSON.parse(currentValue);
                    // check all the fields to get the salesforce Id
                    $.each(obj, function(ind, el){
                        if(this.Id){
                            salesforceId = this.Id;
                        }
                    });
                }
                // If we get the salesforceId we can update the filter
                filter = filter.replace(valueToUpdate, "'"+salesforceId+"'");
            }

            //console.log("PROCESSED FILTER", filter);

            $('.lookupOverlay tbody tr').remove();
            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.LAT_wakawakaForm.getSalesforceObject}', fields, objectName,  searchText, filter,
               function(result, event){
                   if (event.status) {

                       $('.lookup-count span').html(result.length);

                        $(result).each(function(ind , el){
                            var checked = '';
                            var textFormated = '';
                            var elem = '';
                            var index = 0;
                            var text = el.Name;
                            var jsonInfo = JSON.stringify(el);
                            var row = '<tr class="slds-hint-parent">\
                                         <td role="gridcell" tabindex="0" class="slds-text-align_right" style="width: 3.75rem;">\
                                           <div class="slds-checkbox_add-button">\
                                             <input id="info-'+el.Id+'" type="hidden" value=\''+jsonInfo+'\' /> \
                                             <input type="checkbox" '+checked+' onclick="setCurrent(\''+relationFields+'\', \''+unProcessFields+'\',\'info-'+el.Id+'\', \''+eId+'\')" class="slds-assistive-text" id="add-checkbox-'+ind+'" value="add-checkbox-'+ind+'" tabindex="-1" />\
                                             <label for="add-checkbox-'+ind+'" class="slds-checkbox_faux">\
                                               <span class="slds-assistive-text">Select item '+ind+'</span>\
                                             </label>\
                                           </div>\
                                         </td>\
                                         <th scope="row">\
                                           <div class="slds-truncate" title="'+text+'">'+text+'</div>\
                                         </th>\
                                       </tr>';
        					$('.lookupOverlay tbody').append(row);
        				});
                        if(result.length == 0) {
                            $('.lookupOverlay tbody').append('<tr><td colspan="2"><center>No results found</center></td></tr>');
                        }
                       console.log(result);

                   } else if (event.type === 'exception') {
                       alert(event.message + " - " + event.where);

                   } else {
                       alert(event.message );
                   }
               },
               {escape: true}
           );
        }

        // We can have differnts lookups with the same object, we need to identify
        function slugify(string) {
          return string
            .toString()
            .trim()
            .toLowerCase()
            .replace(/\s+/g, "-")
            .replace(/[^\w\-]+/g, "")
            .replace(/\-\-+/g, "-")
            .replace(/^-+/, "")
            .replace(/-+$/, "");
        }

        var formId = '{!fbs.Id}';
        var isEdition = {!entry != null};
        var entryId = "{!IF(entry != null, entry.Id, '')}";
        var entryName  = "{!IF(entry != null, entry.name, '')}";



		function runEvent(evt, goPage) {
			var elementsToSave = [];
            var fieldPopulated = 0;
			// Save Entry
			if(evt == 'Submit' || evt == 'Save' ) {
                $('#spinner').removeClass('slds-hide');

                // Process inputs select, and textareas
				$('#form-insertion').find('input:not([type="checkbox"], [type="file"]), select, textarea').each(function(){
					var val = $(this).val();
					var elem = this.name ;
					var el = new Object()
                    var name = this.name
					el.name =  name ;
                    // Lookups must save values as object
                    var className = $(this).attr('class');

                    if(className == 'lookup'){
                        if(val != '') {
                            //console.log('val', val);
                            var internalVars =   JSON.parse(val)  ;
                            // ???? why
                            el.values = internalVars;
                            //el = internalVars;

                        } else {
                            el.values = [];
                        }

                    } else {
                        el.value =  val ;
                    }

					elementsToSave.push(el);
                    if(val!= '') {
                        fieldPopulated ++;
                    }
				   //console.log(elem + ' - '+ val);
				});
                // Process checkboxs
                var groupsChecks = $('.slds-checkbox_button-group');
                $.each(groupsChecks, function(key, value) {

                    var el = new Object();
                    el.name = '';
                    el.values = [];

                    var checks = $(value).find(':checkbox');
                    $.each(checks, function(ind, inp) {
                        // console.log('>>>>>>>', $(inp));
                        //console.log('>>>>>>>',inp.name);
                        el.name = inp.name;

                        var isSelected = $(inp).is(':checked');
                        if(isSelected) {
                            var currentVal = $(inp).val();
                            el.values.push(currentVal);
                            fieldPopulated ++;
                        }
                    });
                    elementsToSave.push(el);

                });

                // To test process only on edit mode
                // if(isEdition) {
                // Removed with Javi
                var mustProcessImages = ($('.updated-files').length > 0) ? true : false;
                // We must upload the image, get the file id and then save the entry
                if(mustProcessImages) {
                    $('#spinner').removeClass('slds-hide');
                    var mustProcess = $('.updated-files').length;
                    $('.updated-files').each(function(ind, el){
                    	 if($(el).val() != '' ){
                    		//console.log(el);
                            // To override the current image
                            var fileId = ($(el).data('imageId')) ? $(el).data('imageId') : null;
                            //console.log('>>>'+ fileId);
                            uploadFile(el, fileId, ind, mustProcess, elementsToSave, fieldPopulated,   evt == 'Submit' )
                    	}
                    })


                }
                // Normal Process
                else {
                    elementsToSave = processImageFileIdConvertion(elementsToSave);
                    fieldPopulated = fieldPopulated + imagePopulatorCount();
                    //console.log('PIRATE', elementsToSave);
                    // pirate saco
                    saveEntry(elementsToSave, fieldPopulated, evt == 'Submit');
                }

                // }
				//console.log(elementsToSave );
                //saveEntry(elementsToSave, fieldPopulated, evt == 'Submit');
			}
            else if(evt == 'Next'){
                $('.page-child').hide();
                ind = ind+1;
                if(goPage != ''){
                    $($('.page-child').get(goPage)).slideDown();
                } else {
                    $($('.page-child').get(ind)).slideDown();
                }

            }
            else if(evt == 'Back'){
                $('.page-child').hide();
                ind = ind-1;
                if(goPage != ''){
                    $($('.page-child').get(goPage)).slideDown();
                } else {
                    $($('.page-child').get(ind)).slideDown();
                }
            }
            else {

				alert(evt);
			}
		}

        function processImageFileIdConvertion(elementsToSave){
            // Process Pictures
            var imgSelectors = $('.image-selector');
            $.each(imgSelectors, function(key, value) {
                var el = new Object();
                el.name = $(value)[0].name;
                el.value = ($(value).data('imageId')) ? $(value).data('imageId') : '' ;
                elementsToSave.push(el);
            });
            return elementsToSave;
        }

        function imagePopulatorCount(){

            var ret = 0;
            var imgSelectors = $('.image-selector');
            $.each(imgSelectors, function(key, value) {

                ret = ($(value).data('imageId')) ? ret+1 : ret ;

            });
            //console.log('tetetete',ret);
            return ret;
        }

        // upload file logic
        var maxStringSize = 6000000;
        var maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
        var chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 characters
        var attachment;
        var attachmentName;
        var fileSize;
        var positionIndex;
        var doneUploading;


        function uploadFile(f, fileId, index, total, elementsToSave,  fieldPopulated, isSubmit) {
          var file = f.files[0];
          //console.log(file);

          if(file != undefined) {
            if(file.size <= maxFileSize) {
              attachmentName = file.name;
              var fileReader = new FileReader();
              fileReader.onloadend = function(e) {
                attachment = window.btoa(this.result);  //Base 64 encode the file before sending it
                positionIndex=0;
                fileSize = attachment.length;
                console.log("Total Attachment Length: " + fileSize);
                doneUploading = false;
                if(fileSize < maxStringSize) {
                  uploadAttachment(f, fileId, index, total, elementsToSave,  fieldPopulated, isSubmit);
                } else {
                  alert("Base 64 Encoded file is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + ".");
                }

              }
              fileReader.onerror = function(e) {
                alert("There was an error reading the file.  Please try again.");
              }
              fileReader.onabort = function(e) {
                alert("There was an error reading the file.  Please try again.");
              }

              fileReader.readAsBinaryString(file);  //Read the body of the file

            } else {
              alert("File must be under 4.3 MB in size.  Your file is too large.  Please try again.");
            }
          } else {
            alert("You must choose a file before trying to upload it");
          }
        }

        function uploadAttachment(el, fileId, index, total, elementsToSave,  fieldPopulated, isSubmit) {
          var attachmentBody = "";
          /*if(fileSize <= positionIndex + chunkSize) {
            attachmentBody = attachment.substring(positionIndex);
            doneUploading = true;
        } else {*/
            //attachmentBody = attachment.substring(positionIndex, positionIndex + chunkSize);
          // }
          attachmentBody = attachment.substring(positionIndex);
          console.log("Uploading " + attachmentBody.length + " chars of " + fileSize);
          LAT_wakawakaForm.doUploadAttachment(
          '{!entry.Id}', attachmentBody, attachmentName, fileId,
            function(result, event) {
              console.log(result);
              if(event.type === 'exception') {
                console.log("exception");
                console.log(event);
              } else if(event.status) {
                  //$(el).data('imageId') = result;
                  $(el).data('imageId', result);

                  if(index == total-1) {
                      ////
                      elementsToSave = processImageFileIdConvertion(elementsToSave);
                      // console.log(elementsToSave);
                      saveEntry(elementsToSave, fieldPopulated + total, isSubmit);
                      // $('#spinner').addClass('slds-hide');
                      //console.log(result);
                      //console.log('LAST PICTURE');
                  }


              } else {
                console.log(event.message);
                 $('#spinner').addClass('slds-hide');
              }
            },
            {buffer: false, escape: true, timeout: 120000}
          );
        }

        function runConnections(){
            var connections = [];

            <apex:repeat value="{!fbs.LAT_Schema_Connections__r}"  var="connectionCustom"   >
                var connection = {};
                connection.object = '{!connectionCustom.ObjectName__c}';
                connection.skipIf = '{!connectionCustom.SkipIfValueProvided__c}';
                connection.skipIfNot = '{!connectionCustom.SkipIfValueNotProvided__c}';
                connection.map = '{!connectionCustom.Mapping__c}';
                connection.updateLookup = '{!connectionCustom.UpdateBasedOnLookup__c}';
                connections.push(connection);
            </apex:repeat>


            // For in collections
            $.each(connections, function(key, value) {

                var currentMapJson = JSON.parse(value.map);
                console.log('pirate', value );

                var javascriptMapping = new Map();
                var jsonObj = new Object();
                var skipIfNot = false;
                var skipIf = false;
                var updateId = '';

                if(value.skipIf &&  value.skipIf != '') {
                    skipIf = $('#'+value.skipIf).val() != '' ;
                }
                if(value.skipIfNot && value.skipIfNot != '') {
                    skipIfNot = $('#'+value.skipIfNot).val() == ''  ;
                }

                if(value.updateLookup && value.updateLookup != '') {
                    console.log('updateLookup', value.updateLookup);
                    var currentLookup = $('#'+value.updateLookup).val();

                    if(currentLookup){
                        var myJson = JSON.parse(currentLookup);
                        $.each(myJson, function(ind, val) {
                            if(val.Id) { updateId = val.Id}
                        });
                    }
                    console.log(updateId)
                }

                //updateLookup




                console.log(skipIf, skipIfNot);


                // SKIP

                if(!skipIf && !skipIfNot) {
                    // for each fields
                    $.each(currentMapJson, function(ind, val) {
                        var salesforceName = val[0];
                        var fieldName = val[1];

                        var regExp = /\(-*(.*)\)/;
                        var salesforceNameReg = regExp.exec(salesforceName);
                        var fieldNameReg = regExp.exec(fieldName);

                        //javascriptMapping.set(salesforceNameReg[1], $('#'+fieldNameReg[1]).val());
                        jsonObj[salesforceNameReg[1]] = $('#'+fieldNameReg[1]).val();
                        console.log('SALESFORCE NAME:', salesforceNameReg[1]);
                        console.log('FIELD NAME:', fieldNameReg[1]);
                        if(updateId) {
                            jsonObj['Id'] = updateId;
                        }

                    });

                    console.log('MAP TO SAVE', jsonObj);
                    Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.LAT_wakawakaForm.saveSalesforceObject}', value.object, JSON.stringify(jsonObj) ,
                           function(result, event){
                               if (event.status) {
                                console.log(result);
                               } else if (event.type === 'exception') {
                                //alert(event.message + " - " + event.where);
                               } else {
                                //alert(event.message );
                               }
                           },
                           {escape: true}
                       );


                }

            });

            console.log(connections);
        }

        function hasValidationErrors(){
            //console.log('o pirata');

            var reqFields = $('.req');

            var withErrors = [];
            if(reqFields.length == 0) {
                return false;
            	console.log('ta todo bien')
            } else {
            	$(reqFields).removeClass('reqerror');
            	$.each(reqFields, function(ind, el){
            		// Check if is empty
            		if($(el).val() == '' ) {
            			withErrors.push(el);
            			$(el).addClass('reqerror');
            		}
            	});


            }

            if(withErrors.length > 0 ) {
            	alert('Error: Hay '+withErrors.length+' campo/s requeridos que debe completar para Enviar.');
                return true;
            } else {
            	console.log('ta todo bien');
                return false;
            }

        }

        function saveEntry(json, fieldsP, toPublish ){
            console.log(json);
            var status = (toPublish) ? 'Saved' : 'Draft';


            if(toPublish) {
                if(hasValidationErrors()){

                     $('#spinner').addClass('slds-hide');
                    return ;
                }
                //return ;
            }
            //return;
            var entryDetails = {Status__c: status, Fields_Populated__c: fieldsP, jsonData__c: JSON.stringify(json) };

            // New Entry
            if(!isEdition) {

                var ent = new Entry.LAT_FormBuilderEntries__c();
                ent.create(entryDetails, function(err) {
                    if(err) {
                        console.log(err);
                        alert(err.message);
                    }
                    else {
                        // this is the contact
                        // window.location.replace("/apex/LAT_wakawakaForm?id="+formId+"&entry="+ent.get('Id'));
                        // window.location.replace("/apex/LAT_UserDashBoard");
                        window.location = '{!urlfor($Page.LAT_UserDashBoard)}';

                        console.log(ent.log());     // Dump contact to log
                        console.log(ent.get('Id')); // Id is set when create completes
                    }
                });

            }
            // edit Entry
            else {

                if(toPublish){
                    runConnections();
                }

                var ent = new Entry.LAT_FormBuilderEntries__c();
                ent.update([entryId], entryDetails, function(err) {
                    if(err) {
                        console.log(err);
                        alert(err.message);
                         $('#spinner').addClass('slds-hide');
                    }
                    else {
                        $('.toast').slideDown();
                        $('#toastTitle').html(entryName +' was updated.');


                        setTimeout(function(){
                            window.location = '{!urlfor($Page.LAT_UserDashBoard)}';
                            //window.location.replace("/apex/LAT_UserDashBoard");
                            // window.open("/apex/LAT_UserDashBoard",'_top')

                        }, 0);


                    }
                });


            }


        }

        var ind = 0;

        // Build each page
        <apex:repeat value="{!fbs.Form_Builder_Pages__r}"  var="page" rendered="{!fbs.Status__c == 'Active'}" >
            $('<div class="page-child" id="page-'+ind+'"><div id="{!page.id}">{!page.Name}</div></div>').appendTo('#form-insertion');
            var {!page.id}myRender = new WakaWakaRender();
            // var json{!page.id} = '{!page.Json__c}';
            var json{!page.id} = JSON.stringify({!page.Json__c});
            {!page.id}myRender.build(json{!page.id}, '{!page.id}');

        </apex:repeat>


        // Hide pages
        $('.page-child:not(:first-child)').hide();

        // indicator
        $('.slds-carousel__indicator:first-child a').addClass('slds-is-active');


        $('#currentAction').html('New Entry');


        // Load current values
        <apex:outputPanel rendered="{!entry != null}" layout="none">
            var currentJson = $.parseJSON('{!entry.jsonData__c}');

            $.each(currentJson, function(key, value) {
                if(value.value) {
                    // File type, value cant be set
                    if($('#'+value.name)[0].type != 'file') {
                         $('#'+value.name).val(value.value);
                    } else {
                        var elem = '<div class="prev-cont"><img class="preview-special" src="/servlet/servlet.FileDownload?file='+value.value+'"></div>';
                         $('#'+value.name).data('imageId', value.value);
                        $('#'+value.name).parent().append(elem);
                        //alert(value.value);
                    }


                }
                // values are used on checkbox and lookups
                else if(value.values){
                   var name = value.name;
                   var originalName = value.name;
                   name = name.toLowerCase();
                   if(name.includes("lookup")){

                       $('#'+value.name).val( JSON.stringify(value.values));
                        console.log('>>>>>>' , value.values);
                       $.each(value.values, function(k, lookupValues) {
                            console.log('######### ' , k);
                           // if(k == 'values') {

                               // $.each(lookupValues, function(keyFinal, v){
                                   $.each(lookupValues, function(label, valueEnd){

                                       console.log('######### label ' , label);
                                       console.log('######### valueEnd ' , valueEnd);
                                       console.log('######### value.originalName  ' , originalName );
                                       if(label!= 'Id' && label!= 'Name'){

                                            $('#fields-'+originalName).append('<span class="info-small"><b>'+label+'</b>:  '+valueEnd+'</span>');
                                       } else {
                                           if(label== 'Name'){
                                               $('#lookup-'+originalName + ' a span b').html(' - '+valueEnd);
                                           }

                                       }

                                   });
                               // });
                           // }

                       });


                   } else {

                        $.each(value.values, function(k, checkVal) {
                            console.log(k, checkVal);
                            $('input[name='+value.name+'][value='+checkVal+']').attr("checked", "checked");
                        });
                    }
                }
            });

            var status = '<span class="draft">Draft</span>';
            if('{!entry.Status__c}' != 'Draft') {
                status = '<span class="published">Published</span>';
            }

            $('#currentAction').html('Edit {!entry.Name}  - '+status+'    <a target="_blank" href="{!entry.createdby.Id}"> {!entry.createdby.name}</a>   &nbsp;  <apex:outputText value="{0,date,dd/MM/yy}"><apex:param value="{!entry.createddate}" /></apex:outputText>');
            $('#lastmodified').html('Last Modified: &nbsp;  <apex:outputText value="{0,date,dd/MM/yy HH:mm}"><apex:param value="{!entry.LastModifiedDate}" /></apex:outputText>'  )

        </apex:outputPanel>

        // Check Conditions to hide or show field based on custom values
        checkConditions();

        </script>


    </body>



</html>





</apex:page>