<apex:page controller="BMCServiceDesk.UserConfigportletController" showHeader="false" standardStylesheets="false">
    <c:CommonIncludes />
 <link rel="stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/UserConfigPortlet.css"/>
<style>
ul li, ol li {
	margin-left:0em !important;
	margin-left:2.5em\9 !important;
	padding-left:0;
}
.sort-desc .x-grid3-sort-icon {
background-image: url({!$Resource.SDEFStyles}/SDEFimages/arrow_sort_descending.gif) !important;
height:10px;
width:10px;
}
.sort-asc .x-grid3-sort-icon {
background-image: url({!$Resource.SDEFStyles}/SDEFimages/arrow_sort_ascending.gif) !important;
height:10px;
width:10px;
}
</style>
    
    <div id="capsule" class="CapsuleDiv1" style="height: 100%"><apex:outputPanel id="genSection">
        <apex:form >
            <c:ValidationComponent errorMsgList="" id="vComponent"></c:ValidationComponent>
            <script>
var resultSet;
var cols = new Array(2);     
cols[0]='ID'; 
cols[1]='SidebarItem';
var sm = new Ext.grid.CheckboxSelectionModel({locked: false});
var arrCols = new Array(cols.length+1);
arrCols[0] = sm;
arrCols[1] = {id:cols[0], header: cols[0], width: 10, dataIndex: cols[0], hideable: false, hidden: true};
arrCols[2] = {id:cols[1], header: '{!JSENCODE($Label.AddSidebarContentHeader)}', sortable: true, dataIndex: cols[1]};
resultSet = new Array({!JSENCODE(TEXT(lstProfiles.size))});
{!lstProfilesData}

var grid;
function renderGrid(){
    if(grid!=null) { grid.store.loadData(resultSet); return; }
    Ext.QuickTips.init();
    var xg = Ext.grid;
    // shared reader
    var reader = new Ext.data.ArrayReader({}, cols);
    var store = new Ext.data.Store({
        reader: reader, data: resultSet , sortInfo: { field: "SidebarItem", direction: "ASC" }
    });
    grid = new xg.GridPanel({
        store: store,
        cm: new xg.ColumnModel({
            defaults: {sortable: true},
            columns:arrCols
        }),
        sm: sm, viewConfig: {scrollOffset: 0,forceFit: true},       
        autoWidth:true,
		enableHdMenu: false,
        stripeRows:true,
        height:Ext.isIE7? 337: Ext.isIE8? 337: 337,
        listeners: {
		//added to fix bug 1818
        	sortchange: function(){
        		var colIndex = grid.getColumnModel().getIndexById('checker');
				var headerCell = grid.getView().getHeaderCell(colIndex);
				var headerCB = Ext.getDom(headerCell).childNodes[0];
				var isChecked = Ext.fly(headerCB).hasClass('x-grid3-hd-checker-on');
				if(isChecked == true){
 					sm.unlock();
                	sm.selectAll();
                	sm.lock();
				} 
        	},
             afterrender: function() {
                 setSelectedRows();
             }, delay: 1000
        }
    });    
    grid.render('grid');
  }
function extInit(){
    renderGrid();    
}
/*function setSysAdmn(){
    var sysadmn = "System Administrator";
    var str = grid.getStore();
    for (var i = 0; i < str.getCount(); i++) {        
        if(sysadmn==str.getAt(i).get(cols[1])){
            grid.getSelectionModel().selectRow(i, true);
            break;
        }   
    }
}*/

Ext.apply(Ext.grid.CheckboxSelectionModel.prototype, {
onHdMouseDown : function(e, t){
        if(t.className == 'x-grid3-hd-checker'){
            e.stopEvent();
            var hd = Ext.fly(t.parentNode);
            var isChecked = hd.hasClass('x-grid3-hd-checker-on');
            if(isChecked){
               sm.unlock();
                hd.removeClass('x-grid3-hd-checker-on');
                this.clearSelections();
            }else{
                  hd.addClass('x-grid3-hd-checker-on');
                  this.selectAll();
           sm.lock();
               
            }
        }
    }
    });
	var originalSelectRow = Ext.grid.CheckboxSelectionModel.prototype.selectRow;
 Ext.override(Ext.grid.CheckboxSelectionModel, {
    selectRow: function(){
        var cnt=0;
        Ext.select('.x-grid3-row-checker').each(function(el){
           el.dom.id = 'ROW-CHK-' +cnt++; 
        }); 
        originalSelectRow.apply(this, arguments);
        }
    });
function savePortlets(){
	document.getElementById("{!$Component.OkBtn}").disabled = true; 
   // setSysAdmn();   
    var conditionString=''; 
    var m = grid.getSelectionModel().getSelections();   
    for(j=0; j < m.length; j++){
       conditionString = conditionString + m[j].get(cols[0])+",";
    }
    document.getElementById("{!$Component.selectedPortlets}").value=conditionString;
    saveUserPortlets();
}
function setSelectedRows(){
   var selectedRecs=","+document.getElementById("{!$Component.selectedPortlets}").value+",";        
      var str = grid.getStore();
       for (var i = 0; i < str.getCount(); i++) {    
        for (var i = 0; i < str.getCount(); i++) {   
          if(selectedRecs.indexOf(","+str.getAt(i).get(cols[0])+",")!=-1){
            grid.getSelectionModel().selectRow(i, true);
        }   
    }
           
       
    }
}

sm.on('selectionchange', function(){


      var hd = Ext.fly(this.grid.getView().innerHd).child('div.x-grid3-hd-checker');
            //Remove the checked class if store is empty or all items not checked
       
            if ( (this.grid.getStore().getCount() == 0) || (this.getCount() < this.grid.getStore().getCount()) ) {
                hd.removeClass('x-grid3-hd-checker-on');
                          } else {
                hd.addClass('x-grid3-hd-checker-on');
               
         }   
            
    });


/*function setSelectedRows(){
    var selectedRecs=","+document.getElementById("{!$Component.selectedProfiles}").value;        
    var str = grid.getStore();
    for (var i = 0; i < str.getCount(); i++) {        
        if(selectedRecs.indexOf(","+str.getAt(i).get(cols[0])+",")!=-1){
            grid.getSelectionModel().selectRow(i, true);
        }   
    }
}
*/

</script>
            <apex:messages />


            <div id="grid" /><apex:outputPanel >

                <!-- <div style="background-color:#dee0e0" align="right"> -->


                <table class="clsptTable">


                    <tr>
                       <td><a align="left" valign="middle" class="clspt"></a></td>
                        <td class="clsptTd" align="right"><apex:commandButton value="{!okButton}"  onClick="savePortlets();"
                            styleclass="clsButtonStyle clsPrvBtn bgBtnGrey" id="OkBtn" rerender="dummy" />
                        <td class="clsptTd" align="right"><apex:commandButton onclick="javascript: parent.window.closePopup();"
                            value="{!cancelButton}"
                            styleClass="clsButtonStyle clsPrvBtn bgBtnGrey" /></td>


                        </td>

                    </tr>
                </table>



            </apex:outputPanel> <apex:inputHidden id="selectedPortlets" value="{!selectedPortlets}" />
                
            <apex:outputPanel id="resetJsonString">
            <apex:actionFunction name="saveUserPortlets"
                action="{!saveUserPortlets}"  rerender="resetJsonString" onComplete="afterSaveAction();"/>
            
            </apex:outputPanel>
        </apex:form>
    </apex:outputPanel></div>
    <script>Ext.onReady(extInit);</script>
    <script>
    	function afterSaveAction(){
    		window.parent.hidePopupWindow();
    	}
    </script>
</apex:page>