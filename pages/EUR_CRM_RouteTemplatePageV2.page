<apex:page standardController="EUR_CRM_Route_Template__c" standardstylesheets="true" cache="false"
           extensions="EUR_CRM_RoutePlanningRemoteClass" docType="html-5.0">
    <apex:stylesheet value="/sCSS/21.0/sprites/1297816277000/Theme3/default/gc/versioning.css"/>

    <head>
        <apex:stylesheet value="/sCSS/21.0/sprites/1297816277000/Theme3/default/gc/versioning.css"/>

        <link href="{!URLFOR($Resource.EUR_CRM_jQuery_DataTables, 'css/jquery.dataTables.css')}" media="screen"
              rel="stylesheet" type="text/css"/>
        <link href="{!URLFOR($Resource.EUR_CRM_Calendar_Resource, 'fullcalendar/fullcalendar.css')}" rel='stylesheet'/>
        <link href="{!URLFOR($Resource.EUR_CRM_Calendar_Resource, 'fullcalendar/fullcalendar.print.css')}"
              rel='stylesheet' media='print'/>

        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_Calendar_Resource, 'lib/jquery.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_Calendar_Resource, 'lib/jquery-ui.custom.min.js')}"/>


        <link href="{!URLFOR($Resource.EUR_CRM_Resource_RoutePlanning, 'css/formbubble.css')}" media="screen"
              rel="stylesheet" type="text/css"/>
        <link href="{!URLFOR($Resource.EUR_CRM_Resource_RoutePlanning, 'css/viewmore.css')}" media="screen"
              rel="stylesheet" type="text/css"/>

        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_Resource_RoutePlanning2, 'js/src/_loader.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_Resource_RoutePlanning2, 'js/src/viewmore/jquery.formbubble.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_Resource_RoutePlanning2, 'js/src/viewmore/date.js')}"/>

        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_Resource_RoutePlanning2, 'js/src/viewmore/fullcalendar.viewmore.js')}"/>

        <apex:includeScript value="{!URLFOR($Resource.EUR_CRM_jQuery_DataTables, 'js/jquery.dataTables.js')}"/>
        <apex:variable var="isSSA"
                       value="{!EUR_CRM_Route_Template__c.EUR_CRM_Country_Code__c == 'AO' || EUR_CRM_Route_Template__c.EUR_CRM_Country_Code__c == 'KE'}"/>
        <apex:variable var="isFI" value="{!EUR_CRM_Route_Template__c.EUR_CRM_Country_Code__c == 'FI'}"/>
        <apex:variable var="isPT" value="{!EUR_CRM_Route_Template__c.EUR_CRM_Country_Code__c == 'PT'}"/>
        <style>


            #external-events {
                float: left;
                width: 150px;
                min-height: 50px;
                padding: 0 10px;
                border: 1px solid #ccc;
                background: #eee;
                text-align: left;
            }

            #external-events h4 {
                font-size: 16px;
                margin-top: 0;
                padding-top: 1em;
            }

            #external-events .fc-event {
                margin: 10px 0;
                cursor: pointer;
            }

            .external-event { /* try to mimick the look of a real event */
                margin: 10px 5px;
                padding: 2px 4px 4px 4px;
                background: #3366CC;
                color: #fff;
                font-size: .85em;
                cursor: pointer;
            }

            #external-events p {
                margin: 1.5em 0;
                font-size: 11px;
                color: #666;
            }

            #external-events p input {
                margin: 0;
                vertical-align: middle;
            }

            #calendar {
                width: 700px;
            }

            .r-nonDroppable {
                background-color: rgba(0, 0, 0, 0.25);
            }

            .r-droppable {
                background-color: rgba(0, 0, 184, 0.1);
            }

            .r-hidden {
                display: none;
            }
        </style>

        <apex:sectionHeader subtitle="{!EUR_CRM_Route_Template__c.Name}" title="Set Route Template"/>
    </head>
    <div style="width:100%;  ">
        <div style="padding-left:280px; padding-bottom:5px">
            <input type="button" value="{!$Label.EUR_CRM_Save}" class="btn" title="{!$Label.EUR_CRM_Save}"
                   onClick="saveRouteItems(); returnToDetailPage()"/>
            <input type="button" value="{!$Label.EUR_CRM_Quick_Save}" class="btn" title="{!$Label.EUR_CRM_Quick_Save}"
                   onClick="saveRouteItems()"/>
            <input type="button" value="{!$Label.EUR_CRM_Cancel}" class="btn" onClick=" returnToDetailPage()"
                   title="{!$Label.EUR_CRM_Cancel}"/>
        </div>

        <div id="rWarningMessage" style="width: 450px;padding-left:170px; display:none">
            <apex:pageMessage summary="{!$Label.EUR_CRM_Template_Modified}" severity="warning" strength="0"/>
        </div>

        <div id="rWarningInactiveMessage" style="width: 450px;padding-left:170px; display:none">
            <apex:pageMessage summary="{!$Label.EUR_CRM_Change_In_Route_Template}" severity="warning" strength="0"/>
        </div>
    </div>
    <br/>
    <br/>
    <div style="margin: 0 auto; !important width:100%; text-align: center;">
        <table>
            <tr>
                <td>
                    <div id='external-events'>
                        <h4>{!$Label.EUR_CRM_Account_Visits}</h4>

                        <br/>
                        <p>
                            <input type="button" value="{!$Label.EUR_CRM_Clear}" class="btn"
                                   title="{!$Label.EUR_CRM_Clear}" onclick="clearBasket(); getRouteItems();"/>
                            <input type="button" value="{!$Label.EUR_CRM_Delete}" class="btn"
                                   title="{!$Label.EUR_CRM_Delete}" onclick="deleteRouteTemplateItemsInBasket()"/>
                        </p>
                    </div>
                </td>
                <td style="vertical-align:bottom;  ">
                    <div style="text-align: right; color: #4a4a56;font-weight: bold; padding-left: 10px; padding-right: 90px; vertical-align:bottom; padding-bottom:0px; display:inline">
                        <span> &nbsp; {!$Label.EUR_CRM_RT_PlanningPeriod}</span>
                        <span style="text-align: left; color: #4a4a56;font-weight: bold; padding-left: 10px;  vertical-align:bottom">
                            <select id="planningPeriod" onchange="changePlanningPeriod()"/>
                        </span>

                        &nbsp;&nbsp;&nbsp;&nbsp;
                    </div>
                    <div style="float:right; padding-bottom: 5px;">{!$Label.EUR_CRM_PaginationCtrlLabel_Page}&nbsp;
                        <select id="pageSelect" onchange="jumpToPage(this.value)"/>
                        &nbsp;{!$Label.EUR_CRM_PaginationCtrlLabel_Of}&nbsp;
                        <span id="lastPage" style="padding-top:10px;"/>
                        <input type="button" value="<" onclick="prevPage()" class="btn" title="Previous Page"
                               style="width : 30px"/>
                        <input type="button" value=">" onclick="nextPage()" class="btn" title="Next Page"
                               style=" width: 30px"/>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <div id='calendar'/>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <div style="float:right">
                        <input type="button" value="<" onclick="prevPage()" class="btn" title="Previous Page"
                               style="width : 30px"/>
                        <input type="button" value=">" onclick="nextPage()" class="btn" title="Next Page"
                               style=" width: 30px"/>
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <apex:form >
        <apex:actionFunction name="initAccountList" action="{!retrieveAccounts}" status="accountLoading"
                             rerender="panel_AccountTable"
                             onComplete="console.log('Account List Done - '); setAccountTable({!accountFirstIndex}, {!accountsPageHasMore}, {!accountsPageNum}, {!ROWS_PER_PAGE}, {!accountListSize})"/>
        <apex:actionFunction name="searchAccounts" action="{!searchAccounts}"
                             onComplete="setAccountTable({!accountFirstIndex}, {!accountsPageHasMore}, {!accountsPageNum}, {!ROWS_PER_PAGE}, {!accountListSize});setFocusOnSearch()"
                             rerender="panel_AccountTable">
            <apex:param name="accountSearchFilter" value="" assignTo="{!accountSearchFilter}"/>
            <!--<apex:param value="" assignTo="{!AccountItems}"/>-->
        </apex:actionFunction>
        <apex:actionFunction action="{!nextPage}" name="nextAccountPage" rerender="panel_AccountTable"
                             onComplete="setAccountTable({!accountFirstIndex}, {!accountsPageHasMore}, {!accountsPageNum}, {!ROWS_PER_PAGE}, {!accountListSize});"/>
        <apex:actionFunction action="{!previousPage}" name="previousAccountPage" rerender="panel_AccountTable"
                             onComplete="setAccountTable({!accountFirstIndex}, {!accountsPageHasMore}, {!accountsPageNum}, {!ROWS_PER_PAGE}, {!accountListSize});"/>
        <apex:actionFunction action="{!firstPage}" name="firstAccountPage" rerender="panel_AccountTable"
                             onComplete="setAccountTable({!accountFirstIndex}, {!accountsPageHasMore}, {!accountsPageNum}, {!ROWS_PER_PAGE}, {!accountListSize});"/>
        <apex:actionFunction action="{!lastPage}" name="lastAccountPage" rerender="panel_AccountTable"
                             onComplete="setAccountTable({!accountFirstIndex}, {!accountsPageHasMore}, {!accountsPageNum}, {!ROWS_PER_PAGE}, {!accountListSize});"/>
    </apex:form>

    <apex:outputPanel style="width:100%; align=center;" id="panel_AccountTable">
        <table id="accountTable" style="align=center; float:center; width: 98%;">
            <thead class="headerRow">
            <th class="headerRow">{!$Label.EUR_CRM_Delete}</th>
            <th class="headerRow">{!$Label.EUR_CRM_Edit}</th>
            <th class="headerRow sorting">{!$Label.EUR_CRM_AccountName}</th>
            <apex:outputPanel layout="none" rendered="{!isPT}">
                <th class="headerRow sorting">{!$Label.EUR_CRM_Owner_Name}</th>
            </apex:outputPanel>
            <th class="headerRow sorting">{!$Label.EUR_CRM_RT_Street}</th>
            <th class="headerRow sorting">{!$Label.EUR_CRM_PostalCode}</th>
            <th class="headerRow sorting">{!$Label.EUR_CRM_City}</th>
            <th class="headerRow sorting">{!$Label.EUR_CRM_RT_VisitFrequency}</th>
            <apex:outputPanel layout="none" rendered="{!isSSA}">
                <th class="headerRow sorting">{!$ObjectType.EUR_CRM_Account__c.fields.EUR_CRM_Preferred_call_day__c.label}</th>
            </apex:outputPanel>
            <th class="headerRow sorting">{!$Label.EUR_CRM_RT_LastScheduledVisit}</th>
            <apex:outputPanel layout="none" rendered="{!isFI}">
                <th class="headerRow sorting">{!$Label.EUR_CRM_Owner_Name}</th>
            </apex:outputPanel>
            </thead>
            <tfoot>
            <th class="noFilter"></th>
            <th class="noFilter"></th>
            <th><select></select></th>
            <apex:outputPanel layout="none" rendered="{!isPT}">
                <th><select></select></th>
            </apex:outputPanel>
            <th><select></select></th>
            <th><select></select></th>
            <th><select></select></th>
            <th><select></select></th>
            <apex:outputPanel layout="none" rendered="{!isSSA}">
                <th><select></select></th>
            </apex:outputPanel>
            <th><select></select></th>
            <apex:outputPanel layout="none" rendered="{!isFI}">
                <th><select></select></th>
            </apex:outputPanel>
            </tfoot>
            <tbody>
            <apex:repeat var="accountItem" value="{!pagedAccounts}">
                <tr layout="none" style="layout:none;" class='rowhighlight dataRow'>
                    <td colspan="1" class="dataCell">
                        <a href="#" id="removeAccount{!accountItem.accountId}"
                           onClick="deleteRouteTemplateItems(['{!accountItem.accountId}'])"
                           class="{!IF(accountItem.isEvent == 'true','','r-hidden')}">
                            <apex:image url="{!URLFOR($Resource.EUR_CRM_Icons,'closeIcon.png')}"
                            />

                        </a>
                    </td>
                    <td colspan="1" class="dataCell">
                        <a href="#"
                           onClick='addMultiAccountToBasket({title:"{!accountItem.accountName}",span:"{!accountItem.visitSpan}",
                                   routeTemplateItemId:"{!accountItem.routeTemplateItemId}",
                                   routeTemplateId:"{!EUR_CRM_Route_Template__c.id}",
                                   accountId:"{!accountItem.accountId}",
                                   frequency:"{!accountItem.visitFrequency}"})'>

                            <apex:image url="{!URLFOR($Resource.EUR_CRM_Icons,IF(accountItem.isEvent == 'true','editDoneIcon.png','editIcon.png'))}"
                                    styleClass="table{!accountItem.accountId}"/>
                        </a>
                    </td>
                    <td colspan="1" class="dataCell">
                        <a class="accountLink" href="/{!accountItem.accountId}" id="{!accountItem.accountId}"
                           target="_blank"
                           onblur="LookupHoverDetail.getHover('{!accountItem.accountId}').hide();"
                           onfocus="LookupHoverDetail.getHover('{!accountItem.accountId}', '/{!accountItem.accountId}/m?retURL=%2F{!accountItem.accountId}&isAjaxRequest=1').show();"
                           onmouseout="LookupHoverDetail.getHover('{!accountItem.accountId}').hide();"
                           onmouseover="LookupHoverDetail.getHover('{!accountItem.accountId}', '/{!accountItem.accountId}/m?retURL=%2F{!accountItem.accountId}&isAjaxRequest=1').show();">
                                {!accountItem.accountName}
                        </a>
                    </td>
                    <apex:outputPanel layout="none" rendered="{!isPT}">
                        <td colspan="1" class="dataCell">
                            <apex:outputText value="{!accountItem.accountOwnerName}"/>
                        </td>
                    </apex:outputPanel>
                    <td colspan="1" class="dataCell">
                        <apex:outputText value="{!accountItem.accountStreet}"/>
                    </td>
                    <td colspan="1" class="dataCell">
                        <apex:outputText value="{!accountItem.accountPostCode}"/>
                    </td>
                    <td colspan="1" class="dataCell">
                        <apex:outputText value="{!accountItem.accountCity}"/>
                    </td>
                    <td colspan="1" class="dataCell">
                        <apex:outputText value="{!accountItem.visitFrequencyName}"/>
                    </td>
                    <apex:outputPanel layout="none" rendered="{!isSSA}">
                        <td colspan="1" class="dataCell">
                            <apex:outputText value="{!accountItem.prefferedCallDay}"/>
                        </td>
                    </apex:outputPanel>
                    <td colspan="1" class="dataCell">
                        <apex:outputText value="{!accountItem.lastScheduleVisit}"/>
                    </td>
                    <apex:outputPanel layout="none" rendered="{!isFI}">
                        <td colspan="1" class="dataCell">
                            <apex:outputText value="{!accountItem.accountOwnerName}"/>
                        </td>
                    </apex:outputPanel>
                </tr>
            </apex:repeat>
            </tbody>

        </table>

    </apex:outputPanel>
    <div style="display:none" id="rLoadingIcon">
        <c:EUR_CRM_LoadingStatus BackColor="#ffffff" borderColor="#6B6B6B" borderSize="1" height="50px" width="160px"
                                 margintop="-10px" marginleft="-60px" ImageUrl="{!$Resource.loadingStatus}"
                                 Message="Loading Calendar..."/>
    </div>

    <apex:actionStatus id="accountLoading">
        <apex:facet name="start">
            <c:EUR_CRM_LoadingStatus BackColor="#ffffff"
                                     borderColor="#6B6B6B"
                                     borderSize="1"
                                     height="50px"
                                     width="160px"
                                     margintop="-10px"
                                     marginleft="-60px"
                                     ImageUrl="{!$Resource.loadingStatus}"
                                     Message="Loading Accounts..."/>
        </apex:facet>
    </apex:actionStatus>

    <script type="text/javascript">
        var totalWeeks = 7;
        var planningPeriod = 1;
        var weeksPerPage = 4;
        var week = 7;
        var currentPage = 1;
        var excludeDays = [];
        var eventSource = {events: []};
        var accountsInBasket = {};
        var isSSA = false;
        var isFi = false;
        var isPT = false;
        //Account table
        var oTable;
        $.fn.dataTableExt.oSort['string-case-asc'] = function (x, y) {
            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        };

        $.fn.dataTableExt.oSort['string-case-desc'] = function (x, y) {
            return ((x < y) ? 1 : ((x > y) ? -1 : 0));
        };

        (function ($) {
            /*
             * Function: fnGetColumnData
             * Purpose:  Return an array of table values from a particular column.
             * Returns:  array string: 1d data array
             * Inputs:   object:oSettings - dataTable settings object. This is always the last argument past to the function
             *           int:iColumn - the id of the column to extract the data from
             *           bool:bUnique - optional - if set to false duplicated values are not filtered out
             *           bool:bFiltered - optional - if set to false all the table data is used (not only the filtered)
             *           bool:bIgnoreEmpty - optional - if set to false empty values are not filtered from the result array
             * Author:   Benedikt Forchhammer <b.forchhammer /AT\ mind2.de>
             */
            $.fn.dataTableExt.oApi.fnGetColumnData = function (oSettings, iColumn, bUnique, bFiltered, bIgnoreEmpty) {
                // check that we have a column id
                if (typeof iColumn == "undefined") return new Array();

                // by default we only wany unique data
                if (typeof bUnique == "undefined") bUnique = true;

                // by default we do want to only look at filtered data
                if (typeof bFiltered == "undefined") bFiltered = false;

                // by default we do not wany to include empty values
                if (typeof bIgnoreEmpty == "undefined") bIgnoreEmpty = true;

                // list of rows which we're going to loop through
                var aiRows;

                // use only filtered rows
                if (bFiltered == true) aiRows = oSettings.aiDisplay;
                // use all rows
                else aiRows = oSettings.aiDisplayMaster; // all row numbers

                // set up data array
                var asResultData = new Array();

                for (var i = 0, c = aiRows.length; i < c; i++) {
                    iRow = aiRows[i];
                    var aData = this.fnGetData(iRow);
                    //console.log('aData: ' + aData);
                    var sValue = aData[iColumn];

                    // ignore empty values?
                    if (bIgnoreEmpty == true && sValue.length == 0) continue;

                    // ignore unique values?
                    else if (bUnique == true && $.inArray(sValue, asResultData) > -1) continue;

                    // else push the value onto the result data array
                    else asResultData.push(sValue);
                }

                return asResultData;
            }
        }($));

        function fnCreateSelect(aData) {
            var r = '<select><option value="">-None-</option>', i, iLen = aData.length;
            for (i = 0; i < iLen; i++) {
                var aDataHolder = aData[i];
                var tempStr = aData[i];
                if (aDataHolder.substring(0, 2) == "<a") {
                    var temp = $(aDataHolder);
                    tempStr = $(temp).text();
                }
                r += '<option value="' + tempStr + '">' + tempStr + '</option>';
            }
            return r + '</select>';
        }

        $ = jQuery.noConflict();

        $(document).ready(function () {
            clearSessionStorage();
            totalWeeks = '{!EUR_CRM_Route_Template__c.EUR_CRM_Max_Planning_Period_Week__c}';
            totalWeeks = totalWeeks ? totalWeeks : 1;
            planningPeriod = '{!EUR_CRM_Route_Template__c.EUR_CRM_Planning_Period__c}';
            console.log('planningPeriod: ', planningPeriod);
            planningPeriod = planningPeriod ? planningPeriod : 1;
            weeksPerPage = Number(totalWeeks) < 4 ? Number(totalWeeks) : 4;
            initPlanningPeriod();
            setPageInfo();
            initAccountList();
            showWarningMessage('CHANGED', false);
            console.log("Route Template - On ready");
            //setDisabledDays();
            $('#calendar').fullCalendar({
                header: {
                    right: false,
                    left: false,
                },
                defaultView: 'genericMonth',
                firstDay: 1,
                weekCount: 4,
                editable: true,
                dragStop: function () {
                },
                eventDragStop: function (event, jsEvent, ui, view) {
                    removeHighlightDroppable()
                },
                eventDragStart: function (event, jsEvent, ui, view) {
                    eventDrag(event, jsEvent, ui, view);
                },
                droppable: true, // this allows things to be dropped onto the calendar !!!
                dropAccept: function (arg) {
                    console.log('accept drop? ', arg);
                    return true;
                },
                eventDrop: function (event, dayDelta, minuteDelta, allDay, revertFunc) {
                    eventDrop(event, dayDelta, minuteDelta, allDay, revertFunc);

                },
                drop: function (date, allDay) { // this function is called when something is dropped
                    console.log('DROP called! ', date);

                    // retrieve the dropped element's stored Event Object
                    var originalEventObject = $(this).data('eventObject');
                    console.log(originalEventObject);
                    //check if valid
                    // we need to copy it, so that multiple events don't have a reference to the same object

                    var copiedEventObject = $.extend({}, originalEventObject);

                    // assign it the date that was reported
                    copiedEventObject.start = date;
                    copiedEventObject.allDay = allDay;
                    if (!validateDrop(copiedEventObject))
                        return;
                    var currentDay = Number(convertDateToDay(date));
                    var valid = true;
                    $($('#calendar').fullCalendar('clientEvents')).each(
                            function (index, val) {
                                if (val.accountId == copiedEventObject.accountId && val.day == currentDay) {
                                    console.log('hit!!!!!');
                                    valid = false;
                                    return valid;
                                }
                            }
                    );
                    if (!valid)
                        return;
                    // render the event on the calendar
                    // the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                    copiedEventObject.day = currentDay;
                    copiedEventObject.id = copiedEventObject.accountId + currentDay;
                    $('#calendar').fullCalendar('renderEvent', copiedEventObject, true);

                    //check if the droppable item

                    $('.external-event.ui-draggable').each(function (i, val) {
                        if ($(this).data('eventObject').day == currentDay) {
                            console.log('found match! time to swap');
                            var temp = $(this).data('eventObject').routeTemplateItemId;
                            var temp2 = $(this).data('eventObject').routeTemplateDayId;
                            $(this).data('eventObject').routeTemplateItemId = null;
                            $(this).data('eventObject').routeTemplateItemId = copiedEventObject.routeTemplateItemId;
                            $(this).data('eventObject').routeTemplateDayId = copiedEventObject.routeTemplateDayId;
                            copiedEventObject.routeTemplateItemId = temp;
                            copiedEventObject.routeTemplateDayId = temp2;

                        }

                    });

                    delete accountsInBasket[copiedEventObject.id] //remove from accounbasket set


                    $(this).remove();
                    showWarningMessage('CHANGED', true);
                },
                eventRender: function (event, element, view) {
                    element.bind('dblclick', function () {
                        //remove event from calendar
                        //push back to account basket
                        console.log('Removing event: id', event)
                        if (!event.duplicate) {
                            var accountEventId = event.id;
                            $('#calendar').fullCalendar('removeEvents', event.id);
                            var rAccount = {};
                            rAccount.accountId = event.accountId;
                            rAccount.frequency = event.frequency;
                            rAccount.routeTemplateId = event.routeTemplateId;
                            rAccount.routeTemplateItemId = event.routeTemplateItemId;
                            rAccount.routeTemplateDayId = event.routeTemplateDayId;
                            rAccount.span = event.span;
                            rAccount.title = event.title;
                            addAccountToBasket(rAccount);
                            accountsInBasket[accountEventId] = true;
                        }
                    });
                }

            });
            $('#calendar').fullCalendar('addEventSource', eventSource);
            console.log('TEST1');
            getRouteItems();
            //console.log('firstdate', getFirstDate());
            setDisabledDays();
        });

        function initPlanningPeriod() {
            if('{!disablePlanningPeriod}' == 'true'){
                $('#planningPeriod').attr('disabled','true');
            }
            for (var i = 1; i <= Number(totalWeeks); i++) {
                $('#planningPeriod').append('<option = "' + i + '">' + i + '</option>')
            }
            $('#planningPeriod').val(planningPeriod);
            totalWeeks = planningPeriod;
        }

        function changePlanningPeriod() {
            totalWeeks = $('#planningPeriod').val();
            weeksPerPage = Number(totalWeeks) < 4 ? Number(totalWeeks) : 4;
            jumpToPage(1);
            setPageInfo();
            dirty = true;
        }

        function validateDrop(eventObject) {
            var currentDay = Number(convertDateToDay(eventObject.start));
            var span = Number(eventObject.span);
            var lDay = Number(totalWeeks) * Number(week);
            return !(currentDay > span || (currentDay + 1) % 7 == 0 || currentDay % 7 == 0 || currentDay > lDay);
        }

        function nextPage() {
            if (currentPage < totalWeeks / weeksPerPage) {
                jumpToPage(Number(currentPage) + 1);
            }
        }

        function setDisabledDays() {
            $('.fc-week').each(function (i, val) {
                $(this).css('background', 'none');
            });
            if (currentPage >= totalWeeks / weeksPerPage) {
                console.log('Last Page!€');
                $('.fc-week').each(function (i, val) {
                    if (((((currentPage - 1) * weeksPerPage) + 1) + i) > Number(totalWeeks))
                        $(this).css('background', 'grey');
                });
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                jumpToPage(Number(currentPage) - 1);
            }
        }

        function jumpToPage(rPageNumber) {
            if (dirty)
                saveRouteItems(true);
            var rOffSet = rPageNumber - Number(currentPage);
            currentPage = rPageNumber;
            updateCalendarDays(rOffSet * (4 * 7));
            getRouteItems();
            setDisabledDays();
            $('#pageSelect').val(currentPage);
        }

        function updateCalendarDays(days) {
            $('.fc-day-number').each(function (i, val) {
                $(val).text(Number($(val).text()) + days);
            });
        }

        function getFirstDate() {
            var tdClass = "fc-day fc-mon fc-daynumber-1 fc-widget-content activeWeek fc-first";
            var tdDateAttr = "data-date";
            return $('td[class="' + tdClass + '"').attr(tdDateAttr);
        }

        function getEvents(pageNum) {
            var iEvents = [];
            iEvents.push({
                        title: 'event1',
                        start: '2015-01-05'
                    }
                    , {
                        title: 'event1',
                        start: '2015-01-21'
                    });

            return iEvents;
        }

        /*
            highlight non-droppable area and dropppable area.
            with red and green respectively.
        */
        function eventDrag(event, jsEvent, ui, view) {
            if (event && event.span != null && event.span != '')
                highlightDroppable(Number(event.span));
            console.log('Event Drag', event.start);
        }

        function eventDrop(event, dayDelta, minuteDelta, allDay, revertFunc) {

            removeHighlightDroppable();
            var currentDay = Number(convertDateToDay(event.start));
            var lDay = Number(totalWeeks) * Number(week);
            console.log('event drop: ', event, ' currentDay: ', currentDay);
            if (event && event.span != null && event.span != '' &&
                    (currentDay > Number(event.span) || (currentDay + 1) % 7 == 0 || currentDay % 7 == 0) || currentDay > lDay) {
                revertFunc();
                return;
            }
            if (event.duplicate) {
                revertFunc();
                return;
            }
            $(event).id = event.accountId + currentDay;
            var valid = true;
            var filter = event.accountId + currentDay;
            $($('#calendar').fullCalendar('clientEvents')).each(
                    function (index, val) {
                        if (val.accountId == event.accountId && val.day == currentDay) {
                            valid = false;
                            return valid;
                        }
                    }
            );
            if (!valid) {
                revertFunc();
                return;
            }
            event.day = convertDateToDay(event.start)
            console.log('Event Drag', event.start);
            showWarningMessage('CHANGED', true);
        }

        function highlightDroppable(rSpan) {

            $('tr .fc-week').each(function (i, val) {
                $(val).find('td').each(function (i2, val2) {
                    var day = Number($(val2).find('.fc-day-number').text());
                    if ((day + 1) % 7 == 0 || day % 7 == 0 || day > rSpan)
                        $(val2).addClass('r-nonDroppable');
                    else
                        $(val2).addClass('r-droppable');
                });
            });
        }

        function removeHighlightDroppable() {

            $('tr .fc-week').each(function (i, val) {
                $(val).find('td').each(function (i2, val2) {
                    $(val2).removeClass('r-nonDroppable');
                    $(val2).removeClass('r-droppable');
                });
            });
        }

        function pushEvent(x) {
            var e = {};
            x.start = convertDayToDate(x.day);
            eventSource.events.push(x);
        }

        function convertDayToDate(num) {
            var x = num % (weeksPerPage * week);
            return $('td[class~="fc-daynumber-' + x + '"]').attr('data-date');
        }

        function convertDateToDay(d) {
            var strDate = formatToStrDate(new Date(d));
            return $('td[data-date="' + strDate + '"]').find('.fc-day-number').text();
        }

        function formatToStrDate(date) {
            var day = (date.getDate() < 10 ? '0' : '') + date.getDate();
            var month = ((date.getMonth() + 1) < 10 ? '0' : '') + (date.getMonth() + 1);
            var year = date.getFullYear();
            return (year + "-" + month + "-" + day);
        }

        function getClientEvents() {
            var rData = [];
            $($('#calendar').fullCalendar('clientEvents')).each(function (i, val) {
                if (!val.duplicate) {
                    var item = {};
                    item.routeTemplateItemId = val.routeTemplateItemId;
                    item.routeTemplateDayId = val.routeTemplateDayId;
                    item.routeTemplateId = val.routeTemplateId;
                    item.accountId = val.accountId;
                    item.day = convertDateToDay(val.start);
                    rData.push(item);
                }
            });
            return rData;
        }

        function getRouteItems() {
            $('#rLoadingIcon').css('display', 'block');
            var daysPerPage = week * weeksPerPage;
            var endDay = currentPage * daysPerPage > week * totalWeeks ? week * totalWeeks : currentPage * daysPerPage;
            var startDay = (daysPerPage * (currentPage - 1)) + 1 //endDay - daysPerPage + 1;
            console.log('end day', endDay);
            var routeTemplateId = '{!EUR_CRM_Route_Template__c.id}';
            console.log('startday: ', startDay, ' endDay: ', endDay, ' routeTemplateID: ', routeTemplateId);
            if (routeTemplateId == null || routeTemplateId == '')
                return;

            var hasInactive = false;
            $('#calendar').fullCalendar('removeEvents');
            Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.EUR_CRM_RoutePlanningRemoteClass.getRoutPlanItems}', startDay, endDay
                    , routeTemplateId,
                    function (result, event) {
                        if (event.status) {
                            $(result).each(function (i, val) {
                                console.log('## ' + i + '-' + val.accountActiveFlag);
                                if (!(accountsInBasket[val.id])) {
                                    if (val.accountActiveFlag == true)
                                        pushEvent(val);
                                    else
                                        hasInactive = true;
                                }
                            });
                            $('#calendar').fullCalendar('refetchEvents');
                        } else if (event === 'exception') {
                            //error
                            console.log('An exception has occured: ', event.message);
                        } else {
                            //error
                            console.log('An error has occured: ', event.message);
                        }

                        $('#rLoadingIcon').css('display', 'none');
                        showWarningMessage('CHANGED', false);

                        if (hasInactive == true)
                            $('#rWarningInactiveMessage').show();
                    },
                    {escape: true}
            );
        }

        var pageSavedAccounts = {};
        var pageDeleteAccounts = {};

        function saveRouteItems(skipRefresh) {
            $('#rLoadingIcon').css('display', 'block');
            var rData = getClientEvents();

            Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.EUR_CRM_RoutePlanningRemoteClass.saveRoutePlanItems}', rData, totalWeeks, '{!EUR_CRM_Route_Template__c.EUR_CRM_Planning_Period__c}',
                    function (result, event) {
                        if (event.status) {
                            console.log('save result', result);
                            $(rData).each(function (i, val) {
                                changeAccountIcon(val.accountId, false);
                                showRemoveAccount(val.accountId, true);
                                pageSavedAccounts[val.accountId] = true;
                                delete pageDeleteAccounts[val.accountId];
                            });
                        } else if (event === 'exception') {
                            //error
                            console.log('An exception has occured: ', event.message);
                        } else {
                            //error
                            console.log('An error has occured: ', event.message);
                        }
                        if (!skipRefresh)
                            getRouteItems(); //refresh calendar for the id to reflect
                    },
                    {escape: true}
            );
        }

        function deleteRouteTemplateItems(accounts) {
            if (!confirm('{!$Label.EUR_CRM_Delete_Account_Confirm}'))
                return false;
            $('#rLoadingIcon').css('display', 'block');
            $(accounts).each(function (i, val) {
                $('#calendar').fullCalendar('removeEvents', getEventId(val));
            });
            Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.EUR_CRM_RoutePlanningRemoteClass.deleteRouteTemplateItems}', accounts,
                    function (result, event) {
                        if (event.status) {
                            console.log('delete result: ', result);
                            $(accounts).each(function (i, val) {
                                changeAccountIcon(val, true);
                                showRemoveAccount(val, false);

                                delete pageSavedAccounts[val];
                                pageDeleteAccounts[val] = true;
                            });

                        } else if (event === 'exception') {
                            //error
                            console.log('An exception has occured: ', event.message);
                        } else {
                            //error
                            console.log('An error has occured: ', event.message);
                        }

                        saveRouteItems();
                        clearBasket();
                    },
                    {escape: true}
            );
        }

        function addMultiAccountToBasket(rAccount) {
            var routeTemplateId = '{!EUR_CRM_Route_Template__c.id}';
            //check if already marked
            var iconTableId = 'table' + rAccount.accountId;
            if ($('.' + iconTableId).attr('src').indexOf('editDoneIcon') > -1) {
                return false;
            }

            //check if account basket is not empty
            if ($('.external-event.ui-draggable').length > 0) {
                if (!confirm('{!$Label.EUR_CRM_Delete_Account_Confirm}')) {
                    return false;
                } else {
                    $('#rLoadingIcon').css('display', 'block');
                    getRouteItems();

                }
            }
            $('#rLoadingIcon').css('display', 'block');
            clearBasket();


            changeAccountIcon(rAccount.accountId, false);
            Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.EUR_CRM_RoutePlanningRemoteClass.getRoutPlanItemsByAccount}', rAccount.accountId, routeTemplateId,
                    function (result, event) {
                        var count = 0;
                        if (event.status) {
                            $(result).each(function (i, val) {
                                console.log('by account: fetched \n', 'day: ', val.day, ' name: ', val.title);
                                addAccountToBasket(val);
                                accountsInBasket[val.id] = true;
                                count++;
                                $('#calendar').fullCalendar('removeEvents', val.id);
                            });
                        } else if (event === 'exception') {
                            //error
                            console.log('An exception has occured: ', event.message);
                        } else {
                            //error
                            console.log('An error has occured: ', event.message);
                        }

                        var frequency = Number(rAccount.frequency);

                        for (var i = count; i < frequency; i++) {
                            addAccountToBasket(rAccount);
                        }
                        $('#rLoadingIcon').css('display', 'none');

                    },
                    {escape: true}
            );
        }

        function addAccountToBasket(rAccount) {
            $('#rLoadingIcon').css('display', 'block');
            if (!rAccount) {
                console.log('Account null');
                return;
            }
            console.log(rAccount);
            //rAccount.stick = true;

            var rx = $("<div class='external-event'>" + rAccount.title + "</div>");
            var clonedData = $.extend({}, rAccount);
            $(rx).data('eventObject', clonedData);
            $('#external-events').append(rx);
            $(rx).draggable({
                zIndex: 999,
                revert: true,      // will cause the event to go back to its
                revertDuration: 0  //  original position after the drag
            });
            var rSpan = rAccount.span ? rAccount.span : 0;
            $(rx).on('mousedown', function (e) {
                highlightDroppable(Number(rSpan));
            }).on('mouseup', function (e) {
                removeHighlightDroppable();
            })
            $('#rLoadingIcon').css('display', 'none');
        }

        function setAccountTable(accountFirstIndex, accountsPageHasMore, accountsPageNum, ROWS_PER_PAGE, accountListSize) {
            console.log('Init data table');
            var rCols = [
                {"bSortable": false},
                {"bSortable": false},
                {"bSortable": true},
                {"sType": 'string'},
                {"sType": 'string'},
                {"sType": 'string'},
                {"sType": 'string'}
            ];
            if ({!isSSA}) {
                rCols.push({"sType": 'string'});
            }
            rCols.push({"sType": 'date'});
            if ({!isFI}) {
                rCols.push({"sType": 'string'});
            }
            if ({!isPT}) {
                rCols.push({"sType": 'string'});
            }

            oTable = $('#accountTable').dataTable({
                "bDestroy": true,
                "bStateSave": true,
                "fnStateSave": function (oSettings, oData) {
                    sessionStorage.setItem( 'DataTables', JSON.stringify(oData) );
                },
                "fnStateLoad": function (oSettings) {
                    return JSON.parse( sessionStorage.getItem('DataTables') );
                },
                "iDisplayLength": 40,
                "pageLength": 50,
                "asSorting": [[5, 'asc'], [4, 'asc'], [3, 'asc'], [2, 'asc']],
                "aaSorting": [[6, 'desc']],
                "aoColumns": rCols,
                "bFilter": true,
                "search": false,
                "sPaginationType": "full_numbers",
                "bSort": true,
                "fnInitComplete": function () {
                    this.css("visibility", "visible");
                },
                "fnDrawCallback": function (oSettings) {
                    console.log('page redrawn!', pageSavedAccounts);
                    for (a in pageSavedAccounts)
                        changeAccountIcon(a, false);
                    for (b in pageDeleteAccounts)
                        changeAccountIcon(b, true);
                }
            });
            var oSettings = oTable.fnSettings();

            /* Add a select menu for each TH element in the table footer */
            $('tfoot th').each(function (i) {
                if (i >= 2) {
                    this.innerHTML = fnCreateSelect(oTable.fnGetColumnData(i));

                    //Set value
                    filter_val = oSettings.aoPreSearchCols[i].sSearch;
                    console.log('DEBUG - oSettings - filter Val:' + filter_val + '-' + filter_val.length);
                    if (filter_val.length > 0) {
                        var isSelectedChanged = 0;
                        $(this).find("option:contains('" + filter_val + "')").each(function () {
                            console.log("DEBUG - Select Option Check:" + $(this).text() + filter_val);
                            if ($(this).text() == filter_val) {
                                $(this).attr("selected", "selected");
                                isSelectedChanged = 1;
                            }
                        });
                        if (isSelectedChanged == 1) {
                            $(this).val(filter_val).change();
                        } else {
                            $(this).val("").change();
                        }
                        console.log('DEBUG - Set Filter:' + $(this).val() + '-' + filter_val);
                    }
                    //On change
                    $('select', this).change(function () {
                        oTable.fnFilter($(this).val(), i);
                    });
                }
            });


            //
            // Account's Table pagination logic
            //
            // Define the event handlers for the pagination buttons of the account list
            $('#accountTable_next').on('click', function () {
                console.log('on next');
                nextAccountPage();
            });
            $('#accountTable_previous').on('click', function () {
                previousAccountPage();
            });
            $('#accountTable_first').on('click', function () {
                firstAccountPage();
            });
            $('#accountTable_last').on('click', function () {
                lastAccountPage();
            });

//            oTable.on('search.dt', function (e) {
//                console.log('disabling search event');
//                oTable.off( 'search.dt' );
//            });

            $('#accountTable_filter input').on('keyup', function (e) {
                        var typingTimer;
                        var doneTypingInterval = 500;
                        clearTimeout(typingTimer);
                        typingTimer = setTimeout(function () {
                            var searchValue = e.currentTarget.value;
                            searchAccounts(searchValue);
                        }, doneTypingInterval);
                    }
            )
            ;
            var lastIndex = ((accountFirstIndex + ROWS_PER_PAGE) > accountListSize) ? accountListSize : (accountFirstIndex + ROWS_PER_PAGE);
            $('#accountTable_info')[0].innerHTML = 'Showing ' + (accountFirstIndex + 1) + ' to ' + lastIndex + ' of ' + accountListSize + ' entries';
            console.log(accountFirstIndex);
        }

        var dirty = false;

        function showWarningMessage(message, show) {
            dirty = show;
            if (message == 'CHANGED') {
                if (show) {
                    $('#rWarningMessage').show();

                }
                else {
                    $('#rWarningMessage').hide();
                }

            }
        }

        function clearBasket() {
            $('.external-event.ui-draggable').each(function (i, v) {
                changeAccountIcon($(this).data('eventObject').accountId, true);
                $(this).remove();
            });
            accountsInBasket = {};
        }

        function deleteRouteTemplateItemsInBasket() {
            var accounts = [];
            $('.external-event.ui-draggable').each(function (i, v) {
                accounts.push($(this).data('eventObject').accountId);
            });
            accountsInBasket = {};

            console.log('visits to delete', accounts);

            if (accounts.length > 0) {
                deleteRouteTemplateItems(accounts);
            }
        }

        function changeAccountIcon(accountId, edit) {
            var editImage = 'editIcon.png'
            var editDoneImage = 'editDoneIcon.png'
            var origSrc = $('.table' + accountId).attr('src');
            if (origSrc) {
                var end = origSrc.indexOf('edit');
                var newSrc = origSrc.substr(0, end);
                newSrc += edit ? editImage : editDoneImage;
                console.log(newSrc)
                $('.table' + accountId).attr('src', newSrc);
            }
        }

        function setPageInfo() {
            $('#lastPage').text(Math.ceil(totalWeeks / weeksPerPage));
            $('#pageSelect').empty();
            for (var i = 1; i <= Math.ceil(totalWeeks / weeksPerPage); i++) {
                $('#pageSelect').append('<option = "' + i + '">' + i + '</option>');
            }
        }

        function returnToDetailPage() {
            location.href = '/' + '{!EUR_CRM_Route_Template__c}';
        }

        function getEventId(accountId) {
            var eId = '';
            $($('#calendar').fullCalendar('clientEvents')).each(function (i, val) {
                if (val.accountId == accountId) {
                    eId = val.id;
                    return;
                }
            });
            return eId;
        }

        function showRemoveAccount(accountId, rShow) {
            if (rShow)
                $('#removeAccount' + accountId).show();
            else
                $('#removeAccount' + accountId).hide();
        }

        function setFocusOnSearch() {
            $('#accountTable_filter input').focus();
        }
        function clearSessionStorage() {
            var params = JSON.parse(sessionStorage.getItem('DataTables'),function (k,v) {
                if (k==='sSearch') {return '';}
                return v;
            });
            sessionStorage.setItem('DataTables',JSON.stringify(params));

        }
    </script>

</apex:page>