<apex:page standardController="ASI_HK_CRM_Pre_Approval_Form_Item__c" extensions="ASI_HK_CRM_PreApprovalFormDetailEditCON"
           recordSetVar="pafItems" sidebar="false">
    <apex:stylesheet value="{!URLFOR($Resource.ASI_HK_CRM_Common, '/ASI_HK_CRM_Common/css/common.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ASI_HK_CRM_PreApprovalFormDetailEdit, '/ASI_HK_CRM_PreApprovalFormDetailEdit/libs/jquery/css/redmond/jquery-ui-1.10.3.custom.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ASI_HK_CRM_PreApprovalFormDetailEdit, '/ASI_HK_CRM_PreApprovalFormDetailEdit/styles/common.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_HK_CRM_PreApprovalFormDetailEdit, '/ASI_HK_CRM_PreApprovalFormDetailEdit/libs/jquery/js/jquery-1.9.1.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_HK_CRM_PreApprovalFormDetailEdit, '/ASI_HK_CRM_PreApprovalFormDetailEdit/libs/jquery/js/jquery-ui-1.10.3.custom.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_HK_CRM_PreApprovalFormDetailEdit, '/ASI_HK_CRM_PreApprovalFormDetailEdit/libs/DataTables/jquery.dataTables.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_HK_CRM_Common, '/ASI_HK_CRM_Common/scripts/CurrencyUtil.js')}" />
    <!--<apex:includeScript value="{!URLFOR($Resource.ASI_HK_CRM_PreApprovalFormDetailEdit, '/ASI_HK_CRM_PreApprovalFormDetailEdit/scripts/common.js')}" />
-->
    <style>
        #dialogBG {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
        z-index: 10000;
        background: rgb(255, 255, 255) transparent;
        background-color: rgba(255, 255, 255, 0.85);
        background-image: url({!URLFOR($Resource.ASI_HK_CRM_Common, '/ASI_HK_CRM_Common/img/bg_loading.png')});
        background-repeat: repeat;
        filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#D8FFFFFF, endColorstr=#D8FFFFFF);
        -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#D8FFFFFF, endColorstr=#D8FFFFFF)";
        display: none;
        }
        #loadingDiv {
        position: relative;
        top: 48%;
        left: 45%;
        vertical-align: middle;
        display: block;
        }
        #loadingImg {
        display: inline;
        float: left;
        height: 14px;
        width: 14px;
        }
        #loadingText {
        display: inline;
        color: #666;
        font-weight: bold;
        margin-left: 6px;
        font-size: 1em;
        }
        .notAllowClick {
        pointer-events: none;
        }
        table.sf-table td.sf-td {
        margin: 0px;
        padding: 4px 2px 4px 5px;
        border: 1px solid #ededed;
        border-width: 0 0 1px 0;
        border-bottom: 1px solid #e3deb8;
        border-right: 1px solid #ddd;
        background-color: #fff;
        color: #333;
        vertical-align: middle;
        font-size: 1em;
        font-weight: normal;
        font-family: Arial, Helvetica, sans-serif;
        }
        .equalWidthtd {
        width:130px
        }
        .equalWidthtd-2 {
        width:190px
        }
        .equalWidthtd input {
        width:128px
        }
        .tblist {
        table-layout:fixed
        }
        .tblist td {
        word-break:break-all;
        word-wrap: break-word;
        white-space: normal;
        }
        .tblist th {
        word-wrap: break-word;
        white-space: normal;
        }
        .th-checkbox{
        width:60px;
        }
        .th-action{
        width:60px;
        }
        .th-action-2{
        width:200px;
        }
        .th-action-3{
        width:260px;
        }
        .th-pricing-item{
        width:280px;
        }
        .th-check-box{
        width:30px;
        }
        .th-brand{
        width:210px;
        }
        .half_width_input input{
        width: 50px
        }
        .half_width_input div,span{
        white-space: normal;
        }
    </style>
    <div id="dialogBG">
        <div id="loadingDiv">
            <img id="loadingImg" src="/img/loading.gif" title="Please Wait..."/>
            <span id="loadingText">Loading...</span>
        </div>
    </div>
    <!--
<apex:pageBlock title="{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form__c.Label}" rendered="{!Not(allowEdit)}"> 
<apex:pageBlock title="{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form__c.Label}" > 
<apex:pageMessages />
<apex:outputLink value="/{!BLANKVALUE(headerId, 'home/home.jsp')}">Return</apex:outputLink>
</apex:pageBlock>
-->
    <!-- <apex:outputPanel style="min-width:1150px" rendered="{!allowEdit}"> -->
    <apex:outputPanel style="overflow:scroll; height:100%; width: 100%;">
        <div id="pageTitle"><apex:outputText value="{!pageTitle}"/></div>
        <div id="page-btn-div">
            <div id="page-btn-inner-div">
                <apex:outputPanel rendered="{!allowEdit}" >
                    <input type="button" name="saveAll" class="sf-page-btn" value="Save" onclick="saveAll()" />
                    <input type="button" name="quickSave" class="sf-page-btn" value="Quick Save" onclick="saveAll(true)" />
                </apex:outputPanel>
                <input type="button" name="cancel" class="sf-page-btn" value="Cancel" onclick="cancelAll()" />
            </div>
        </div>
        
        <div id="tabs-detail"> 
            <ul>
                <li><a href="#tab-per-product">Target Volume and Price</a></li>
                <li><a href="#tab-lineitem1">SPTD (Price Set)</a></li>
                <li><a href="#tab-lineitem2">SPTD (PO)</a></li>
                <li><a href="#tab-lineitem3">A&amp;P</a></li>
                <li><a href="#tab-per-mechanic">Conditions of Payments</a></li>
            </ul>
            <div id="tab-per-product">
                <div id="tab-block">
                    <apex:pageBlock title="Target Volume and Price" id="page-block-paf-quantity">
                        <div id="tab-content">
                            <table id="paf-item-per-product-table" class="sf-table tblist" style="width: 910px">
                                <thead> 
                                    <tr>
                                        <th class="sf-th th-action">Action</th>
                                        <th class="sf-th th-brand">Pricing Item</th>
                                        <th class="sf-th equalWidthtd">Target Qty (BT)</th>
                                        <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        <th class="sf-th equalWidthtd">Reference Price</th>
                                        <!--comment for 12-02 partial deployment-->
                                        <!--<th class="sf-th equalWidthtd">Pouring Limit Price</th>-->
                                        <th class="sf-th equalWidthtd">{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_Pouring__c.Label}</th>
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-per-product">
                                    <tr class="def-row data-row">
                                        <td class="sf-td"><a class="paf-item-remove-btn non-link-btn">Remove</a></td>
                                        <td class="sf-td"></td>
                                        <td class="sf-td equalWidthtd"><input type="text" name="quantity" maxlength="18" size="20" /></td>
                                        <td class="sf-td equalWidthtd"><input type="text" name="price" maxlength="19" size="20" /></td>
                                        <td class="sf-td"><output type="text" name="referencePrice" /></td>
                                        <!--comment for 12-02 partial deployment-->
                                        <!--<td class="sf-td"><output type="text" name="lowestoffer" /></td>-->
                                        <td class="sf-td"><input type="checkbox" name="pouring" /></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
                <div id="tab-block">
                    <apex:pageBlock title="Product List" id="page-block-product-list">
                        <div id="tab-content">
                            <div id="product-list-div">
                                <div id="product-filter-div" class="pd-search-div">
                                    <label>Pricing Item</label>
                                    <input type="text" id="pd-search-sku" class="pd-search-sku" name="sSKU" maxlength="255" size="30" />
                                    <label>{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</label>
                                    <select id="pd-search-sb" class="pd-search-sb">
                                        <option value=""></option>
                                        <apex:repeat value="{!sbSearchOptions}" var="sb" id="sb-search-repeat">
                                            <option value="{!sb[0]}">{!sb[1]}</option>
                                        </apex:repeat>
                                    </select>
                                    <label>{!$ObjectType.ASI_MFM_Sub_brand__c.Fields.ASI_MFM_Sub_brand_Code__c.Label}</label>
                                    <input type="text" id="pd-search-sbcode" class="pd-search-sku" name="sSBCode" maxlength="3" size="8" />
                                    <label>Std. Bottle Size (Cl)</label>
                                    <input type="text" id="pd-search-skusize" class="pd-search-sku" name="sSKUSize" maxlength="3" size="8" />
                                    <input type="button" id="pd-search-reset" value="Reset" />
                                    <div class="pd-search-sb-type-div">
                                        <label>Quick Search:  </label>
                                        <input type="button" class="pd-search-sb-type" name="absolut" value="Absolut" />
                                        <input type="button" class="pd-search-sb-type" name="martell" value="Martell" />
                                        <input type="button" class="pd-search-sb-type" name="chivas" value="Chivas" />
                                        <input type="button" class="pd-search-sb-type" name="glenlivet" value="The Glenlivet" />
                                        <input type="button" class="pd-search-sb-type" name="wine" value="Wine" />
                                        <input type="button" class="pd-search-sb-type" name="champagne" value="Champagne" />
                                    </div>
                                </div>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(0)"/>
                                <table id="product-table" class="sf-table tblist" style="padding-top:10px;width: 910px;">
                                    <thead>
                                        <tr>
                                            <th class="sf-th th-check-box">
                                                <input type="checkbox" name="CheckALLcheckbox0" id="CheckALLcheckbox0" class="allchk" onchange = "Selectall(this, 0)"/>
                                            </th>
                                            <th class="sf-th th-brand">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</th> <!--20160411, edited by Leo-->
                                            <th class="sf-th th-pricing-item">Pricing Item</th> <!--20160411, edited by Leo-->
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Std_Bottle_Size__c.Label}</th> <!--20160411, edited by Leo-->
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Base_Price__c.Label}</th>
                                            <th class="sf-th equalWidthtd">Reference Price</th>
                                            <!--comment for 12-02 partial deployment-->
                                            <!--<th class="sf-th equalWidthtd">Pouring Limit Price</th>-->
                                        </tr>
                                    </thead>
                                    <tbody id="product-table-body">
                                    </tbody>
                                </table>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(0)"/>
                            </div>
                        </div>
                    </apex:pageBlock>
                </div>
            </div>
            <div id="tab-lineitem1">
                <div id="tab-block">
                    <apex:pageBlock title="SPTD - For All Product by Price Set" id="page-block-paf-lineitem1">
                        <div id="tab-content">
                            <table id="paf-item-lineitem-table1" class="sf-table tblist" style="width: 975px">
                                
                                <thead>
                                    <tr>
                                        <th class="sf-th th-action">Action</th>
                                        <th class="sf-th th-pricing-item">Pricing Item</th>
                                        <th class="sf-th th-target-volume equalWidthtd">Target Qty (BT)</th>
                                        <th class="sf-th th-price equalWidthtd">Gross Price (HKD)</th>
                                        <th class="sf-th th-investment equalWidthtd">Investment</th>
                                        <apex:repeat value="{!mechanicNames[0]}" var="name" id="mechanicName-repeat">
                                            <th class="sf-th equalWidthtd" style="white-space: normal;"><apex:outputText value=" {!name}" escape="false"/></th>
                                        </apex:repeat>
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-lineitem1">
                                    <tr class="def-row data-row">
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;"><a class="paf-item-remove-btn1 non-link-btn">Remove</a></td>
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="quantity" maxlength="18" size="18" disabled="disabled" /></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="price" maxlength="19" size="20" disabled="disabled" /></td>
                                        <td class="sf-td invest-val equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd half_width_input" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd half_width_input" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
                <!-- No need to show since the product will be added in the first page--->
                <div id="tab-block" style="display:none">
                    <apex:pageBlock title="Added Products" id="page-block-product-list-selected1">
                        <div id="tab-content">
                            <div id="product-list-div1">
                                <table id="product-table-selected1" class="sf-table tblist" style="width: 790px">
                                    <thead>
                                        <tr>
                                            <th class="sf-th th-check-box">
                                                <input type="checkbox" name="CheckALLcheckbox1" id="CheckALLcheckbox1" class="allchk1" onchange = "Selectall(this, 1)"/>
                                            </th>
                                            <th class="sf-th th-brand">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</th>
                                            <th class="sf-th th-pricing-item">Pricing Item</th>
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Std_Bottle_Size__c.Label}</th>
                                            <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        </tr>
                                    </thead>
                                    <tbody id="product-table-selected-body1">
                                    </tbody>
                                </table>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(1)"/>
                            </div>
                        </div>
                    </apex:pageBlock>
                </div>
                <div id="tab-block">
                    <apex:pageBlock title="SPTD - by Price Set" id="page-block-paf-lineitem2">
                        <div id="tab-content">
                            <table id="paf-item-lineitem-table2" class="sf-table tblist" style="width: 1105px">
                                <thead>
                                    <tr>
                                        <th class="sf-th th-action">Action</th>
                                        <th class="sf-th th-pricing-item">Pricing Item</th>
                                        <th class="sf-th th-target-volume equalWidthtd">Target Qty (BT)</th>
                                        <th class="sf-th th-price equalWidthtd">Gross Price (HKD)</th>
                                        <th class="sf-th th-investment equalWidthtd">Investment</th>
                                        <apex:repeat value="{!mechanicNames[1]}" var="name" id="mechanicName-repeat">
                                            <th class="sf-th equalWidthtd" style="white-space: normal;"><apex:outputText value=" {!name}" escape="false"/></th>
                                        </apex:repeat>
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-lineitem2">
                                    <tr class="def-row data-row">
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;"><a class="paf-item-remove-btn2 non-link-btn">Remove</a></td>
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="quantity" maxlength="18" size="18" disabled="disabled" /></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="price" maxlength="19" size="20" disabled="disabled" /></td>
                                        <td class="sf-td invest-val equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd half_width_input" style="border-right: 1px solid #ddd; padding-left:2px;white-space: normal;"></td>
                                        <td class="sf-td equalWidthtd half_width_input" style="border-right: 1px solid #ddd; padding-left:2px;white-space: normal;"></td>
                                        <td class="sf-td equalWidthtd half_width_input" style="border-right: 1px solid #ddd; padding-left:2px;white-space: normal;"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
                <div id="tab-block">
                    <apex:pageBlock title="Added Products" id="page-block-product-list-selected2">
                        <div id="tab-content">
                            <div id="product-list-div2">
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(2)"/>
                                <table id="product-table-selected2" class="sf-table cell-border tblist" style="width: 790px">
                                    <thead>
                                        <tr>
                                            <th class="sf-th th-check-box">
                                                <input type="checkbox" name="CheckALLcheckbox2" id="CheckALLcheckbox2" class="allchk2" onchange = "Selectall(this, 2)"/>
                                            </th>
                                            <th class="sf-th th-brand">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</th>
                                            <th class="sf-th th-pricing-item">Pricing Item</th>
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Std_Bottle_Size__c.Label}</th>
                                            <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        </tr>
                                    </thead>
                                    <tbody id="product-table-selected-body2">
                                    </tbody>
                                </table>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(2)"/>
                            </div>
                        </div>
                    </apex:pageBlock>
                </div>
            </div>
            <div id="tab-lineitem2">
                <div id="tab-block">
                    <apex:pageBlock title="SPTD by PO" id="page-block-paf-lineitem3">
                        <div id="tab-content">
                            <table id="paf-item-lineitem-table3" class="sf-table tblist" style="width: 1555px">
                                <thead id="thead-page-block-paf-lineitem3">
                                    <tr class="head-row">
                                        <th class="sf-th th-action-2">
                                            Action
                                            <select id="selectedCol3" name="selectedCol3" size="1" onchange="CheckAllBox(3)">
                                                <option value="1">Rebates</option>
                                                <option value="2">Incentive Trip</option>
                                                <option value="3">Listing Fee</option>
                                                <option value="4">Display Rental</option>
                                            </select>
                                            <input type="checkbox" name="Cal" id="checkall3" class="chk" onclick="checkall(3)" checked="true"/>
                                        </th>
                                        <th class="sf-th th-pricing-item">Pricing Item</th>
                                        <th class="sf-th equalWidthtd">Target Qty (BT)</th>
                                        <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        <th class="sf-th equalWidthtd">Investment</th>
                                        <apex:variable value="{!0}" var="rowNo"/>
                                        <apex:variable value="{!0}" var="InputNum"/>
                                        <apex:repeat value="{!mechanicNames[2]}" var="name" id="mechanicName-repeat">
                                            <apex:variable var="rowNo" value="{!rowNo+1}"/>
                                            <th class="sf-th equalWidthtd" style="white-space: normal;">
                                                <apex:outputPanel rendered="{!if(contains(name,'Fixed $'),'true','false')}">
                                                    <apex:variable var="InputNum" value="{!InputNum+1}"/>
                                                    <!--{!rowNo}-->
                                                    <input type="number" name="total" id="totalAmount" var ="totalAmount" maxlength="18" size="18" onchange="calculateFixedValue({!rowNo}, {!InputNum}, 3)"/>
                                                    <!--<input type="button" id="cal-fixed-product" value="Calculate" onclick="calculateFixedValue()"/>-->
                                                </apex:outputPanel>
                                                
                                                <apex:outputText value=" {!name}" escape="false"/></th>
                                        </apex:repeat>
                                        
                                        <!--
<th class="sf-th">S-STK4 FG on package<br />Buy Bottle / Free Bottle</th>
<th class="sf-th">F-Free Goods STK4 (Inactive)<br />Fixed Amount</th>
<th class="sf-th">V-Annual Rebate (Inactive)<br />Rebate/Disc % / OR / HKD per bottle</th>
<th class="sf-th">Exclusivity<br />Fixed Amount</th>
<th class="sf-th">Pouring<br />Fixed Amount</th>
<th class="sf-th">Others<br />Rebate/Disc % / OR / HKD per bottle</th>
--->
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-lineitem3">
                                    <tr class="def-row data-row">
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;">
                                            <a class="paf-item-remove-btn3 non-link-btn">Remove</a>
                                            <input type="checkbox" name="Cal" id="calcheckbox" class="chk" onclick="AddSelectedRow(this), 3" checked="true"/>
                                        </td>
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;">
                                        </td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="quantity" maxlength="18" size="18" disabled="disabled" /></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="price" maxlength="19" size="20" disabled="disabled" /></td>
                                        <td class="sf-td invest-val equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd half_width_input" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
                
                <div id="tab-block">
                    <apex:pageBlock title="Added Products" id="page-block-product-list-selected3">
                        <div id="tab-content">
                            <div id="product-list-div3">
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(3)"/>
                                <table id="product-table-selected3" class="sf-table cell-border tblist" style="width: 790px">
                                    <thead>
                                        <tr>
                                            <th class="sf-th th-check-box">
                                                <input type="checkbox" name="CheckALLcheckbox3" id="CheckALLcheckbox3" class="allchk3" onchange = "Selectall(this, 3)"/>
                                            </th>
                                            <th class="sf-th th-brand">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</th>
                                            <th class="sf-th th-pricing-item">Pricing Item</th>
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Std_Bottle_Size__c.Label}</th>
                                            <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        </tr>
                                    </thead>
                                    <tbody id="product-table-selected-body3">
                                    </tbody>
                                </table>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(3)"/>
                            </div>
                        </div>
                    </apex:pageBlock>
                </div>
            </div>
            <div id="tab-lineitem3">
                <div id="tab-block">
                    <apex:pageBlock title="Trade A&P (Under Sales Budget)" id="page-block-paf-lineitem4">
                        <div id="tab-content">
                            <table id="paf-item-lineitem-table4" class="sf-table tblist" style="width: 1235px">
                                <thead id="thead-page-block-paf-lineitem4">
                                    <tr>
                                        <th class="sf-th th-action-3">
                                            Action
                                            <select id="selectedCol4" name="selectedCol4" size="1" onchange="CheckAllBox(4)">
                                                <option value="1">FG</option>
                                                <option value="2">Event Promotion</option>
                                                <option value="3">PG Cost</option>
                                                <option value="4">Other Trade Support</option>
                                                <option value="5">Other Fixed Investment</option>
                                            </select>
                                            <input type="checkbox" name="Cal" id="checkall4" class="chk" onclick="checkall(4)" checked="true"/>
                                        </th>
                                        <th class="sf-th th-pricing-item"><div style="width:200px;">Pricing Item</div></th>
                                        <th class="sf-th th-target-volume equalWidthtd">Target Qty (BT)</th>
                                        <th class="sf-th th-price equalWidthtd">Gross Price (HKD)</th>
                                        <th class="sf-th th-investment equalWidthtd">Investment</th>
                                        <apex:variable value="{!0}" var="rowNum"/>
                                        <apex:variable value="{!0}" var="InputNum"/>
                                        <apex:repeat value="{!mechanicNames[3]}" var="name" id="mechanicName-repeat">
                                            <apex:variable var="rowNum" value="{!rowNum+1}"/>
                                            <th class="sf-th equalWidthtd" style="white-space: normal;">
                                                <apex:outputPanel rendered="{!if(contains(name,'Fixed $'),'true','false')}">
                                                    <apex:variable var="InputNum" value="{!InputNum+1}"/>
                                                    <!--{!rowNo}-->
                                                    <input type="number" name="total" id="totalAmount" var ="totalAmount" maxlength="18" size="18" onchange="calculateFixedValue({!rowNum}, {!InputNum}, 4)"/>
                                                    <!--<input type="button" id="cal-fixed-product" value="Calculate" onclick="calculateFixedValue()"/>-->
                                                </apex:outputPanel>
                                                <apex:outputText value=" {!name}" escape="false"/></th>
                                        </apex:repeat>
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-lineitem4">
                                    <tr class="def-row data-row">
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;">
                                            <a class="paf-item-remove-btn4 non-link-btn">Remove</a>
                                            <input type="checkbox" name="Cal" id="calcheckbox" class="chk" onclick="AddSelectedRow(this), 4"  checked="true"/>
                                        </td>
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="quantity" maxlength="18" size="18" disabled="disabled" /></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="price" maxlength="19" size="20" disabled="disabled" /></td>
                                        <td class="sf-td invest-val equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
                
                <div id="tab-block">
                    <apex:pageBlock title="Added Products" id="page-block-product-list-selected4">
                        <div id="tab-content">
                            <div id="product-list-div4">
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(4)"/>
                                <table id="product-table-selected4" class="sf-table cell-border tblist" style="width: 790px">
                                    <thead>
                                        <tr>
                                            <th class="sf-th th-check-box">
                                                <input type="checkbox" name="CheckALLcheckbox4" id="CheckALLcheckbox4" class="allchk4" onchange = "Selectall(this, 4)"/>
                                            </th>
                                            <th class="sf-th th-brand">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</th>
                                            <th class="sf-th th-pricing-item">Pricing Item</th>
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Std_Bottle_Size__c.Label}</th>
                                            <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        </tr>
                                    </thead>
                                    <tbody id="product-table-selected-body4">
                                    </tbody>
                                </table>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(4)"/>
                            </div>
                        </div>
                    </apex:pageBlock>
                </div>
                
                <div id="tab-block">
                    <apex:pageBlock title="Trade A&P (Under CM/ TM)" id="page-block-paf-lineitem5">
                        <div id="tab-content">
                            <table id="paf-item-lineitem-table5" class="sf-table tblist" style="width: 1495px">
                                <thead id="thead-page-block-paf-lineitem5">
                                    <tr>
                                        <th class="sf-th th-action-3">
                                            Action
                                            <select id="selectedCol5" name="selectedCol5" size="1" onchange="CheckAllBox(5)">
                                                <option value="1">Decoration/POSM-TMK</option>
                                                <option value="2">Event Promotion-TMK</option>
                                                <option value="3">FG (non-sale)-TMK</option>
                                                <option value="4">Event Sponsorship-MKT</option>
                                                <option value="5">Outdoor Advertising-MKT</option>
                                            </select>
                                            <input type="checkbox" name="Cal" id="checkall5" class="chk" onclick="checkall(5)" checked="true"/>
                                        </th>
                                        <th class="sf-th th-pricing-item">Pricing Item</th>
                                        <th class="sf-th th-target-volume equalWidthtd">Target Qty (BT)</th>
                                        <th class="sf-th th-price equalWidthtd">Gross Price (HKD)</th>
                                        <th class="sf-th th-investment equalWidthtd" style="white-space: normal;">Investment</th>
                                        <apex:variable value="{!0}" var="rowNum"/>
                                        <apex:variable value="{!0}" var="InputNum"/>
                                        <apex:repeat value="{!mechanicNames[4]}" var="name" id="mechanicName-repeat">
                                            <apex:variable var="rowNum" value="{!rowNum+1}"/>
                                            <th class="sf-th equalWidthtd-2">
                                                <apex:outputPanel rendered="{!if(contains(name,'Fixed $'),'true','false')}">
                                                    <apex:variable var="InputNum" value="{!InputNum+1}"/>
                                                    <!--{!rowNo}-->
                                                    <input type="number" name="total" id="totalAmount" var ="totalAmount" maxlength="18" size="18" onchange="calculateFixedValue({!rowNum}, {!InputNum}, 5)"/>
                                                    <!--<input type="button" id="cal-fixed-product" value="Calculate" onclick="calculateFixedValue()"/>-->
                                                </apex:outputPanel>
                                                <apex:outputText value=" {!name}" escape="false"/></th>
                                        </apex:repeat>
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-lineitem5">
                                    <tr class="def-row data-row">
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;">
                                            <a class="paf-item-remove-btn5 non-link-btn">Remove</a>
                                            <input type="checkbox" name="Cal" id="calcheckbox" class="chk" onclick="AddSelectedRow(this), 5"  checked="true"/>
                                        </td>
                                        <td class="sf-td" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="quantity" maxlength="18" size="18" disabled="disabled" /></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"><input type="text" name="price" maxlength="19" size="20" disabled="disabled" /></td>
                                        <td class="sf-td invest-val equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                        <td class="sf-td equalWidthtd" style="border-right: 1px solid #ddd; padding-left:2px;"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
                
                <div id="tab-block">
                    <apex:pageBlock title="Added Products" id="page-block-product-list-selected5">
                        <div id="tab-content">
                            <div id="product-list-div5">
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(5)"/>
                                <table id="product-table-selected5" class="sf-table cell-border tblist" style="width: 790px">
                                    <thead>
                                        <tr>
                                            <th class="sf-th th-check-box">
                                                <input type="checkbox" name="CheckALLcheckbox5" id="CheckALLcheckbox5" class="allchk5" onchange = "Selectall(this, 5)"/>
                                            </th>
                                            <th class="sf-th th-brand">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_MFM_Sub_brand__c.Label}</th>
                                            <th class="sf-th th-pricing-item">Pricing Item</th>
                                            <th class="sf-th equalWidthtd">{!$ObjectType.ASI_MFM_SKU_Code__c.Fields.ASI_HK_CRM_Std_Bottle_Size__c.Label}</th>
                                            <th class="sf-th equalWidthtd">Gross Price (HKD)</th>
                                        </tr>
                                    </thead>
                                    <tbody id="product-table-selected-body5">
                                    </tbody>
                                </table>
                                <input type="button" id="pd-add-product" value="Add selected Products" onclick="addProducts(5)"/>
                            </div>
                        </div>
                    </apex:pageBlock>
                </div>
            </div>
            <div id="tab-per-mechanic">
                <div id="tab-block">
                    <apex:pageBlock title="Conditions of Payments" id="page-block-paf-per-mechanic">
                        <div id="tab-content">
                            <table id="paf-item-per-mechanic-table" class="sf-table tblist" style="width:500px">
                                <thead>
                                    <tr>
                                        <th class="sf-th" style="width:350px">{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_Mechanic__c.Label}</th>
                                        <th class="sf-th" style="width:380px">{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_Conditions_for_Payment__c.Label}</th>
                                    </tr>
                                </thead>
                                <tbody id="paf-item-table-body-per-mechanic">
                                    <tr class="def-row data-row">
                                        <td class="sf-td"></td>
                                        <td class="sf-td"><textarea style="width: 350px; height: 100px;" name="paymentCondition" maxlength="32768" /></td>   
                                        
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </apex:pageBlock>
                </div>
            </div>
        </div>
        <div id="page-btn-div">
            <div id="page-btn-inner-div">
                <apex:outputPanel rendered="{!allowEdit}" >
                    <input type="button" name="saveAll" class="sf-page-btn" value="Save" onclick="saveAll()" />
                    <input type="button" name="quickSave" class="sf-page-btn" value="Quick Save" onclick="saveAll(true)" />
                </apex:outputPanel>
                <input type="button" name="cancel" class="sf-page-btn" value="Cancel" onclick="cancelAll()" />
            </div>
        </div>
        <script type="text/javascript">
        $('#tabs-detail').tabs();
        </script>
        
    </apex:outputPanel>
    <div id="hidden-info-div">
        <select id="mechanic-select" class="mechanic-select">
            <option value="null">---None---</option>
            <apex:repeat value="{!mechanicOptions}" var="mechanicOption" id="mechanic-repeat">
                <option value='{!mechanicOption[0]}'>{!mechanicOption[1]}</option> 
            </apex:repeat>
        </select>
        <div id="mechanic-option-foc" class="mechanic-option-foc">
            <div class="buy-free-box">
                <span class="buy-free-line">
                    <!-- <label>{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_FOC_Buy_Bottle_Option_1__c.Label}</label> -->
                    <input type="text" name="buy" maxlength="18" size="10" />
                    <!-- <label>{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_FOC_Free_Bottle_Option_1__c.Label}</label> -->
                    <input type="text" name="free" maxlength="18" size="10" />
                    <br/>
                    <span class="buy-free-line-amt"></span>
                    <a class="foc-del-btn non-link-btn">Del</a>
                </span>
            </div>
            <br/>
            <a class="foc-add-btn non-link-btn">+More</a>
        </div>
        
        <div id="mechanic-option-variable" class="mechanic-option-variable">
            <!-- <label>{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_Rebate_Disc_Percent__c.Label}</label> -->
            <input type="text" name="percentage" maxlength="19" size="10" />
            <!-- <label>OR</label> -->
            <input type="text" name="amount" maxlength="19" size="10" />
            <!-- <label>HKD per bottle</label> -->
        </div>
        <div id="mechanic-option-fixed" class="mechanic-option-fixed">
            <!-- <label>{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_Fixed_Amount__c.Label}</label> -->
            <input type="text" name="amount" maxlength="19" size="20" />
        </div>
        
        <div id="mechanic-option-fixed_bottle" class="mechanic-option-fixed_bottle">
            <div class="buy-free-box">
                <span class="buy-free-line">
                    <!-- <label>{!$ObjectType.ASI_HK_CRM_Pre_Approval_Form_Item__c.Fields.ASI_HK_CRM_FOC_Buy_Bottle_Option_1__c.Label}</label> -->
                    <!--<input type="text" name="buy" maxlength="18" size="10" /> -->
                    <!-- <label>Fixed Bottle</label> -->
                    <input type="text" name="free" maxlength="18" size="10" />
                    <br/>
                    <span class="buy-free-line-amt"></span>
                    <a class="foc-del-btn non-link-btn">Del</a>
                </span>
            </div>
            <br/>
            <a class="foc-add-btn non-link-btn">+More</a>
        </div>
        
    </div>
    <script type="text/javascript">
    function getMechanic() {
        var allMechanics = [];
        <apex:repeat value="{!mechanicOptions}" var="mechanicOption">
            allMechanics["{!JSENCODE(mechanicOption[0])}"] = {
            id: "{!JSENCODE(mechanicOption[0])}"
            , label: "{!JSENCODE(mechanicOption[1])}"    
            , baseType: "{!JSENCODE(mechanicOption[2])}"
            , code: "{!JSENCODE(mechanicOption[3])}"
            , enable: "{!JSENCODE(mechanicOption[4])}"
        };
        </apex:repeat>
        return allMechanics;
    }
    
    $(document).ready(function() {
        
        initPAFPage({
            headerId: '{!headerId}'
            , custId: '{!custId}'
            , mType: {
                foc: '{!MTYPE_FOC}'
                , foc_bulk: '{!MTYPE_FOC_BULK}'
                , variable: '{!MTYPE_VARIABLE}'
                , fixed: '{!MTYPE_FIXED}'
                , fixed_bottle: '{!MTYPE_FIXED_BOTTLE}'
            }
            , allMechanics: getMechanic()
            , notAllowEdit: '{!Not(allowEdit)}'
            , isKeyAccount: '{!isKeyAccount}'
            , allowPouring: '{!allowPouring}'
        });
        var h = $('div#tab-block').find('.mainTitle');
        h.each(function(index){
            $(this).html("<a onclick='onclickCollapse(this)'>&#9660;</a>&nbsp;&nbsp;"+$(this).text());    
        });
    });
    function onclickCollapse(lk){
        var block = $(lk).closest('div#tab-block');
        $(block).find('#tab-content').hide();
        $(lk).html('&#9658;');
        $(lk).attr('onclick', 'onclickExpand(this)');
    }
    function onclickExpand(lk){
        var block = $(lk).closest('div#tab-block');
        $(block).find('#tab-content').show();
        $(lk).html('&#9660;');
        $(lk).attr('onclick', 'onclickCollapse(this)');
    }
    function sortGroup(lineItems, group)
    {
        var result = [];
        var orders = [
            [],
            ['A01', 'A08'],
            ['A02', 'A04', 'A07'],
            ['A17', 'A09', 'A06', 'A12', 'A14', 'B01'],
            //['A17', 'A03', 'A09', 'A06', 'A12', 'A14', 'B01', 'A11', 'A05', 'A10', 'A15', 'A16'],
            ['B03', 'B02', 'B07', 'B05', 'B06'],
            ['B08', 'B09', 'B04', 'B10', 'B11']
        ];
        var groupOrder = orders[group];
        
        if (groupOrder.length > 0)
        {
            groupOrder.forEach(function(o) {
                var item = lineItems.find(function(item) {
                    return item.mechanicCode == o;
                });
                
                if (item)
                {
                    result.push(item);
                }
            });
        }
        else
        {
            Array.prototype.push.apply(result, lineItems);
        }
        
        return result;
    }
    function getGroup(code)
    {
        if (code == 'A01'
            || code == 'A08')
        {
            return 1;
        }
        else if (code == 'A02'
                 || code == 'A04'
                 || code == 'A07')
        {
            return 2;
        }
            else if (code == 'A17'
                     || code == 'A03'
                     || code == 'A09'
                     || code == 'A06'
                     || code == 'A12'
                     || code == 'A14'
                     || code == 'B01'
                     || code == 'A11'
                     || code == 'A05'
                     || code == 'A10'
                     || code == 'A15'
                     || code == 'A16')
            {
                return 3;
            }
                else if (code == 'B03'
                         || code == 'B02'
                         || code == 'B07'
                         || code == 'B05'
                         || code == 'B06')
                {
                    return 4;
                }
                    else if (code == 'B08'
                             || code == 'B09'
                             || code == 'B04'
                             || code == 'B10'
                             || code == 'B11')
                    {
                        return 5;
                    }
        
        return 0;
    }
    
    var SPD_NUM_OF_ROW = 12;
    var SPD_NUM_OF_COL = 5;
    var Page_NUM_OF_LIST_ROW = 25;
    
    var headerId = null;
    var custId = null;
    var notAllowEdit = null;
    var allowPouring = null;
    var isKeyAccount = null; //20180803, Added by Introv Kelvin
    
    var allProducts = [];
    var allMechanics = [];
    var pidToSelectedMechanicsMap = [];
    var $selectedSPTDByPO = [];
    var totalValue;
    var selectedProducts = [[], [], [], [], [], []];
    
    var firstRemote = true;
    var finishRemoteLineItem = false;
    var finishRemoteProduct = false;
    var cacheRemoteLineItem;
    var cacheRemoteProduct;
    
    var MTYPE_FOC = null;
    var MTYPE_FOC_BULK = null;
    var MTYPE_VARIABLE = null;
    var MTYPE_FIXED = null;
    var MTYPE_FIXED_BOTTLE = null;
    var MID_NULL = 'null';
    var MID_NO_MECHANIC = 'basic';
    
    var pdDataTable;
    
    function initPAFPage(config) {
        if (config) {
            headerId = config.headerId;
            custId = config.custId;
            var mType = config.mType;
            MTYPE_FOC = mType.foc;
            MTYPE_FOC_BULK = mType.foc_bulk;
            MTYPE_VARIABLE = mType.variable;
            MTYPE_FIXED = mType.fixed;
            MTYPE_FIXED_BOTTLE = mType.fixed_bottle;
            allMechanics = config.allMechanics;
            notAllowEdit = config.notAllowEdit;
            isKeyAccount = config.isKeyAccount; 
            allowPouring = config.allowPouring; 
            notAllowEditPage(notAllowEdit);
            refreshData();
        }
    }
    
    function notAllowEditPage(notAllowEdit2) {
        if (notAllowEdit2 == 'true') {
            var d;
            d = document.getElementById("paf-item-per-product-table");
            d.className += " notAllowClick";
            d = document.getElementById("product-table");
            d.className += " notAllowClick";
            d = document.getElementById("paf-item-lineitem-table1");
            d.className += " notAllowClick";
            d = document.getElementById("product-table-selected1");
            d.className += " notAllowClick";
            d = document.getElementById("paf-item-lineitem-table2");
            d.className += " notAllowClick";
            d = document.getElementById("product-table-selected2");
            d.className += " notAllowClick";
            d = document.getElementById("paf-item-lineitem-table3");
            d.className += " notAllowClick";
            d = document.getElementById("product-table-selected3");
            d.className += " notAllowClick";
            d = document.getElementById("paf-item-lineitem-table4");
            d.className += " notAllowClick";
            d = document.getElementById("product-table-selected4");
            d.className += " notAllowClick";
            d = document.getElementById("paf-item-lineitem-table5");
            d.className += " notAllowClick";
            d = document.getElementById("product-table-selected5");
            d.className += " notAllowClick";
            d = document.getElementById("paf-item-per-mechanic-table");
            d.className += " notAllowClick";
        }
    }
    
    function refreshData() {
        retrieveLineItems();
        retrieveProducts();
    }
    function displayDataIfReady() {
        if (finishRemoteLineItem && finishRemoteProduct) {
            displayLineItems();
            displayProducts();
            displaySelectedProducts();
            cacheRemoteLineItem = null;
            cacheRemoteProduct = null;
        }
    }
    
    /* Line Item Tables */
    
    function retrieveLineItems() {
        finishRemoteLineItem = false;
        ASI_HK_CRM_PreApprovalFormDetailEditCON.lineItemList(
            headerId
            , handleLineItemCallback
            , { escape: true, timeout: 10000 }
        );
    }
    function handleLineItemCallback(lineItems, event) {
        if (event.status) {
            cacheRemoteLineItem = lineItems;
            pidToSelectedMechanicsMap = [];
            if (lineItems) {
                for (var i = 0; i < lineItems.length; i++) {
                    var lineItem = lineItems[i];
                    var mid = lineItem.mechanicId;
                    if (mid == null || mid == '') mid = MID_NO_MECHANIC;
                    addPidToSelectedMechanics(lineItem.skuId, mid);
                }
            }
            finishRemoteLineItem = true;
            displayDataIfReady();
        } else {
            // TODO: Handle error
            alert(event.message);
        }
    }
    
    function displayLineItems() {
        if (cacheRemoteLineItem) {
            genRowsByLineItems(cacheRemoteLineItem);
        }
    }
    
    function genRowsByLineItems(lineItems) {
        genPerProductRowsByLineItems(lineItems);
        genPerLineItemRowsByLineItems(lineItems);
        genPerMechanicRowsByLineItems(lineItems);
    }
    function addAllRowsByLineItems(lineItems, group) {
        addPerProductRowByLineItems(lineItems);
        addPerLineItemRowByLineItems(lineItems, group);
        // addPerMechanicRowByLineItems(lineItems);
        for (var i = 0; i < lineItems.length; i++) {
            var lineItem = lineItems[i];
            var mid = lineItem.mechanicId;
            if (mid == null || mid == '') mid = MID_NO_MECHANIC;
            addPidToSelectedMechanics(lineItem.skuId, mid);
        }
    }
    function removeAllRowsByIds(pid, keepProductRow, group) {//20151008 Keep SKU
        removePerLineItemRow(pid, group);
        if (keepProductRow != true) removePerProductRow(pid);
        removeNotExistPerMechanicRow(pid, group);
    }
    function genPerProductRowsByLineItems(lineItems) {
        if (lineItems) {
            var tBody = $('#paf-item-table-body-per-product');
            var tempPidSet = [];
            var size = lineItems.length;
            for (var i = 0; i < size; i++) {
                var lineItem = lineItems[i];
                if (tempPidSet[lineItem.skuId] != 1) {
                    var newRow = perProductRow(lineItem);
                    if (newRow) {
                        tBody.append(newRow);
                        tempPidSet[lineItem.skuId] = 1;
                    }
                }
            }
        }
    }
    function addPerProductRowByLineItems(lineItems) {
        var lineItem = lineItems[0];
        var pid = lineItem.skuId;
        if (pid && pid != '') {
            var tBody = $('#paf-item-table-body-per-product');
            var alreadyExist = false;
            tBody.find('tr.data-row').each(function () {
                var curRow = $(this);
                if (pid == curRow.data('pid')) {
                    alreadyExist = true;
                    return false;
                }
            });
            if (!alreadyExist) {
                var newRow = perProductRow(lineItem);
                if (newRow)
                    tBody.append(newRow);
            }
        }
    }
    function removePerProductRow(pid) {
        if (pid && pid != '') {
            for (var i = 1; i <= 3; i++) {
                var hasPidRow = false;
                $('#paf-item-table-body-lineitem' + i + ' tr.data-row').each(function () {
                    if (pid == $(this).data('pid')) {
                        hasPidRow = true;
                        return false;
                    }
                });
                if (!hasPidRow) {
                    $('#paf-item-table-body-per-product tr.data-row').filter(function () {
                        return pid == $(this).data('pid');
                    }).remove();
                }
            }
        }
    }
    function genPerLineItemRowsByLineItems(lineItems) {
        if (lineItems) {
            var products = [];
            
            for (var i = 0; i < lineItems.length; i++) {
                var lineItem = lineItems[i];
                var key = lineItem.skuId;
                
                var product = products.find(function (p) {
                    return p.id == key;
                });
                
                if (!product) {
                    product = {
                        id: key,
                        groups: [],
                        mechanics: []
                    }
                    
                    products.push(product);
                }
                
                var group = getGroup(lineItem.mechanicCode);
                if (product.groups.indexOf(group) == -1) {
                    product.groups.push(group);
                }
                
                var mechID = lineItem.mechanicId;
                product.mechanics.push(mechID);
            }
            
            products.forEach(function (product) {
                var pd = allProducts[product.id];
                product.groups.forEach(function (group) {
                    var groupItems = lineItems.filter(function (item) {
                        return item.skuId == product.id && getGroup(item.mechanicCode) == group;
                    });
                    
                    var mechs = getGroupMechanics(group).filter(function (mech) {
                        return product.mechanics.indexOf(mech.id) == -1;
                    });
                    
                    var mechItems = lineItemFromProductAndMechanic(pd, mechs, group);
                    
                    Array.prototype.push.apply(groupItems, mechItems);
                    
                    var sortedGroupItems = sortGroup(groupItems, group);
                    
                    var newRow = perLineItemRows(sortedGroupItems, group);
                    
                    if (newRow) {
                        var tBody = $('#paf-item-table-body-lineitem' + group);
                        tBody.append(newRow);
                        newRow.find('input[name="quantity"]').change();
                    }
                });
                if (pd.allPrdt) {
                    if (product.groups.indexOf(1) == -1) {
                        var groupItems = lineItems.filter(function (item) {
                            return item.skuId == product.id;
                        });
                        var mechItems = lineItemFromProductAndMechanic(pd, getGroupMechanics(1), 1);
                        var sortedLineItems = sortGroup(mechItems, 1);
                        // addPerMechanicRowByLineItems(sortedLineItems);
                        //addAllRowsByLineItems(sortedLineItems, 1);
                        var newRow = perLineItemRows(sortedLineItems, 1);
                        
                        if (newRow) {
                            newRow.data('sfid', groupItems[0].id);
                            var tBody = $('#paf-item-table-body-lineitem' + 1);
                            tBody.append(newRow);
                            newRow.find('input[name="quantity"]').change();
                        }
                    }
                }
            });
        }
    }
    function addPerLineItemRowByLineItems(lineItems, group) {
        if (lineItems) {
            var pid = lineItems[0].skuId;
            var tBody = $('#paf-item-table-body-lineitem' + group);
            var alreadyExist = false;
            tBody.find('tr.data-row').each(function () {
                var curRow = $(this);
                if (pid == curRow.data('pid')) {
                    alreadyExist = true;
                    return false;
                }
            });
            if (!alreadyExist) {
                var newRow = perLineItemRows(lineItems, group);
                if (newRow) {
                    tBody.append(newRow);
                    newRow.find('input[name="quantity"]').change();
                }
            }
        }
    }
    function removePerLineItemRow(pid, group) {
        if (pid && pid != '') {
            $('#paf-item-table-body-lineitem' + group + ' tr.data-row').filter(function () {
                var curRow = $(this);
                return pid == curRow.data('pid');
            }).remove();
        }
    }
    function genPerMechanicRowsByLineItems(lineItems) {
        if (lineItems) {
            var products = [];
            var conditions = [];
            var mechanics = [];
            
            for (var i = 0; i < lineItems.length; i++) {
                var lineItem = lineItems[i];
                var key = lineItem.skuId;
                var mechID = lineItem.mechanicId;
                
                products[mechID] = key;
                if (lineItem.paymentCondition) {
                    conditions[mechID] = lineItem.paymentCondition;
                }
                
                mechanics[mechID] = mechanics;
            }
            
            var tBody = $('#paf-item-table-body-per-mechanic');
            var tempMidSet = [];
            
            var sortedMechanics = getMechanics();
            
            sortedMechanics.forEach(function(mech) {
                if (mechanics[mech.id])
                {
                    var pd = allProducts[products[mech.id]];
                    var mechItems = lineItemFromProductAndMechanic(pd, [mech], getGroup(mech.code));
                    
                    var size = mechItems.length;
                    for (var i = 0; i < size; i++) {
                        var lineItem = mechItems[i];
                        if (tempMidSet[lineItem.mechanicId] != 1) {
                            if (!mechanics[lineItem.mechanicId]) {
                                continue;
                            }
                            
                            if (conditions[lineItem.mechanicId]) {
                                lineItem.paymentCondition = conditions[lineItem.mechanicId];
                            }
                            var newRow = perMechanicRow(lineItem);
                            if (newRow) {
                                tBody.append(newRow);
                                tempMidSet[lineItem.mechanicId] = 1;
                            }
                        }
                    }
                }
            });
        }
    }
    
    function checkMechanic(optDiv) {
        if (optDiv.length > 0) {
            var mMid = optDiv.data('mid');
            var mCode = optDiv.data('mCode');
            var mGroup = getGroup(mCode);
            
            var valid = false;
            
            $('#paf-item-table-body-lineitem' + mGroup).find('tr.data-row').each(function () {
                var curRow = $(this);
                if (curRow.css('display') != 'none') {
                    var mOptionDivs = curRow.find('div[class^=mechanic-option-]');
                    
                    mOptionDivs.each(function () {
                        var mOptionDiv = $(this);
                        var mid = mOptionDiv.data('mid');
                        var baseType = mOptionDiv.data('mBaseType');
                        
                        if (mMid == mid) {
                            if (MTYPE_FOC == baseType || MTYPE_FOC_BULK == baseType) {
                                mOptionDiv.find('.buy-free-line').each(function () {
                                    var buyStr = CurrencyUtil.currencyToFloat($(this).find('input[name="buy"]').val());
                                    var freeStr = CurrencyUtil.currencyToFloat($(this).find('input[name="free"]').val());
                                    if (buyStr || freeStr) {
                                        valid = true;
                                    }
                                });
                            }
                            else if (MTYPE_FIXED_BOTTLE == baseType) {
                                mOptionDiv.find('.buy-free-line').each(function () {
                                    var freeStr = CurrencyUtil.currencyToFloat($(this).find('input[name="free"]').val());
                                    if (freeStr) {
                                        valid = true;
                                    }
                                });
                            }
                                else if (MTYPE_VARIABLE == baseType) {
                                    if (CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) > 0 || parseFloat(mOptionDiv.find('input[name="percentage"]').val()) > 0) {
                                        valid = true;
                                    }
                                }
                                    else if (MTYPE_FIXED == baseType) {
                                        if (CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) > 0) {
                                            valid = true;
                                        }
                                    }
                        }
                    });
                }
            });
            
            if (valid) {
                addMechanicRow(mMid);
            }
            else {
                removeMechanicRow(mMid);
            }
        }
    }
    
    function addMechanicRow(mid) {
        if (mid && mid != '') {
            var tBody = $('#paf-item-table-body-per-mechanic');
            var alreadyExist = false;
            tBody.find('tr.data-row').each(function () {
                var curRow = $(this);
                if (mid == curRow.data('mid')) {
                    alreadyExist = true;
                    return false;
                }
            });
            
            if (!alreadyExist) {
                var newRow = perMechanicRow2(mid);
                if (newRow)
                    tBody.append(newRow);
            }
        }
    }
    
    function removeMechanicRow(mid) {
        if (mid && mid != '') {
            $('#paf-item-table-body-per-mechanic tr.data-row').filter(function () {
                return $(this).data('mid') == mid;
            }).remove();
        }
    }
    
    function addPerMechanicRowByLineItems(lineItems) {
        lineItems.forEach(function (lineItem) {
            var mid = lineItem.mechanicId;
            if (mid && mid != '') {
                var tBody = $('#paf-item-table-body-per-mechanic');
                var alreadyExist = false;
                tBody.find('tr.data-row').each(function () {
                    var curRow = $(this);
                    if (mid == curRow.data('mid')) {
                        alreadyExist = true;
                        return false;
                    }
                });
                if (!alreadyExist) {
                    var newRow = perMechanicRow(lineItem);
                    if (newRow)
                        tBody.append(newRow);
                }
            }
        });
    }
    function removeNotExistPerMechanicRow(pid, group) {
        if ($('#paf-item-table-body-lineitem' + group + ' tr.data-row').length > 1) {
            return;
        }
        var mechs = getGroupMechanics(group);
        var pd = allProducts[pid];
        var lineItems = lineItemFromProductAndMechanic(pd, mechs, group);
        // var sortedLineItems = sortGroup(lineItems, group);
        
        $('#paf-item-table-body-per-mechanic tr.data-row').filter(function () {
            var returnValue = false;
            var mid = $(this).data('mid');
            lineItems.forEach(function (lineItem) {
                if (mid == lineItem.mechanicId) {
                    returnValue = true;
                    return;
                }
            });
            return returnValue;
        }).remove();
    }
    
    function getMechanics()
    {
        var mechs = [];
        for (var key in allMechanics) {
            var mech = allMechanics[key];
            mechs.push(mech);
        }
        
        return sortCode(mechs);
    }
    
    function getGroupMechanics(group) {
        var mechs = [];
        for (var key in allMechanics) {
            var mech = allMechanics[key];
            
            if (getGroup(mech.code) == group) {
                mechs.push(mech);
            }
        }
        
        return mechs;
    }
    
    function getGroup(code) {
        if (code == 'A01'
            || code == 'A08') {
            return 1;
        }
        else if (code == 'A02'
                 || code == 'A04'
                 || code == 'A07') {
            return 2;
        }
            else if (code == 'A17'
                     || code == 'A03'
                     || code == 'A09'
                     || code == 'A06'
                     || code == 'A12'
                     || code == 'A14'
                     || code == 'B01'
                     || code == 'A11'
                     || code == 'A05'
                     || code == 'A10'
                     || code == 'A15'
                     || code == 'A16') {
                return 3;
            }
                else if (code == 'B03'
                         || code == 'B02'
                         || code == 'B07'
                         || code == 'B05'
                         || code == 'B06') {
                    return 4;
                }
                    else if (code == 'B08'
                             || code == 'B09'
                             || code == 'B04'
                             || code == 'B10'
                             || code == 'B11') {
                        return 5;
                    }
        
        return 0;
    }
    
    var samplePerProductRow = null;
    function perProductRow(lineItem) {
        if (!(lineItem.skuId && lineItem.skuId != '')) return null;
        if (samplePerProductRow == null)
            samplePerProductRow = $('#paf-item-table-body-per-product tr.def-row:first');
        var row = samplePerProductRow.clone();
        row.removeClass('def-row');
        if (lineItem.id && lineItem.id != '') row.data('sfid', lineItem.id);
        row.data('pid', lineItem.skuId);
        var pd = allProducts[lineItem.skuId];
        var isActive = pd.active;//typeof pd !== 'undefined';
        
        var cells = row.find('td.sf-td');
        
        cells.eq(0).find('.paf-item-remove-btn').click(function () {
            var pid = row.data('pid');
            return triggerRemoveLineItem(pid, false, 0);
        });
        
        cells.eq(1).append(lineItem.pricingItem + (isActive ? '' : ' (Inactive)'));
        
        var qtyInput = cells.eq(2).find('input[name="quantity"]');
        //20160317, added by Leo
        if (pd != undefined && pd.allPrdt)
            qtyInput.attr("disabled", "disabled");
        //20160317, added by Leo
        qtyInput.val(CurrencyUtil.numToCurrency(lineItem.qty));
        qtyInput.on('keyup change blur', function (e) {
            return triggerQtyInputChange(e);
        });
        
        var priceInput = cells.eq(3).find('input[name="price"]');
        //20160317, added by Leo
        if (pd != undefined && pd.allPrdt)
            priceInput.attr("disabled", "disabled");
        //20160317, added by Leo
        priceInput.val(CurrencyUtil.numToCurrency(lineItem.price));
        priceInput.on('keyup change blur', function (e) {
            return triggerPriceInputChange(e);
        });
        
        //cells.eq(4).append(CurrencyUtil.numToCurrency(lineItem.referencePrice));
        cells.eq(4).find('output[name="referencePrice"]').val(CurrencyUtil.numToCurrency(lineItem.referencePrice));
        //<!--comment for 12-02 partial deployment-->
        cells.eq(5).find('input[name="pouring"]').attr('checked', lineItem.isPouring ? 'checked' : null);
        console.log('enter 1'+allowPouring);
        console.log(typeof allowPouring);
        
        if(allowPouring =='false'){
            cells.eq(5).find('input[name="pouring"]').attr("disabled", "disabled");
        }
        if (pd != undefined && pd.allPrdt)
            cells.eq(5).find('input[name="pouring"]').attr("disabled", "disabled");
        /*cells.eq(5).find('output[name="lowestoffer"]').val(CurrencyUtil.numToCurrency(lineItem.lowestoffer));

        cells.eq(6).find('input[name="pouring"]').attr('checked', lineItem.isPouring ? 'checked' : null);
        if (pd != undefined && pd.allPrdt)
            cells.eq(6).find('input[name="pouring"]').attr("disabled", "disabled");*/
        //cells.eq(5).find('input[name="pouring"]').val(lineItem.isPouring ? 'checked' : null);
        return row;
    }
    
    function perLineItemRows(lineItems, group) {
        var next = 5;
        
        for (var j = 0; j < lineItems.length; j++) {
            var lineItem = lineItems[j];
            if (j == 0) {
                if (!(lineItem.skuId && lineItem.skuId != '')) return null;
                
                var samplePerLineItemRow = $('#paf-item-table-body-lineitem' + group + ' tr.def-row:first');
                var row = samplePerLineItemRow.clone();
                row.removeClass('def-row');
                
                row.data('pid', lineItem.skuId);
                row.data('group', group);
                
                var pd = allProducts[lineItem.skuId];
                var isActive = typeof pd !== 'undefined';
                
                var cells = row.find('td.sf-td');
                
                cells.eq(0).find('.paf-item-remove-btn' + group).click(function () {
                    var pid = row.data('pid');
                    return triggerRemoveLineItem(pid, true, group);
                });
                
                cells.eq(1).append(lineItem.pricingItem + (isActive ? '' : ' (Inactive)'));
                
                var qtyInput = cells.eq(2).find('input[name="quantity"]');
                qtyInput.val(CurrencyUtil.numToCurrency(lineItem.qty));
                qtyInput.on('change', function () {
                    return triggerQtyMasterChange($(this));
                });
                
                var priceInput = cells.eq(3).find('input[name="price"]');
                priceInput.val(CurrencyUtil.numToCurrency(lineItem.price));
                priceInput.on('change', function () {
                    return triggerPriceMasterChange($(this));
                });
            }
            
            var mOptionDiv;
            
            if (lineItem.mechanicBaseType == MTYPE_FOC_BULK) {
                mOptionDiv = $('#mechanic-option-' + MTYPE_FOC).clone();
            }
            else {
                mOptionDiv = $('#mechanic-option-' + lineItem.mechanicBaseType).clone();
            }
            
            initMOptionDiv(lineItem.mechanicBaseType, mOptionDiv, lineItem);
            
            if (lineItem.id && lineItem.id != '') mOptionDiv.data('sfid', lineItem.id);
            mOptionDiv.data('mid', lineItem.mechanicId);
            mOptionDiv.data('mBaseType', lineItem.mechanicBaseType);
            mOptionDiv.data('mCode', lineItem.mechanicCode);
            cells.eq(next).append(mOptionDiv);
            
            var mech = allMechanics[lineItem.mechanicId];
            
            if (mech && mech.enable == 'N') {
                mOptionDiv.children().prop('disabled', true);
            }
            
            next++;
        }
        
        return row;
    }
    
    var samplePerMechanicRow = null;
    function perMechanicRow(lineItem) {
        if (!(lineItem.mechanicId && lineItem.mechanicId != '')) return null;
        if (samplePerMechanicRow == null)
            samplePerMechanicRow = $('#paf-item-table-body-per-mechanic tr.def-row:first');
        var row = samplePerMechanicRow.clone();
        row.removeClass('def-row');
        row.data('mid', lineItem.mechanicId);
        var mechanic = allMechanics[lineItem.mechanicId];
        
        if (mechanic) {
            var cells = row.find('td.sf-td');
            cells.eq(0).append(mechanic.label);
            //cells.eq(1).append(mechanic.label);
            //cells.eq(1).find('.paymentCondition').val(lineItem.paymentCondition);
            cells.eq(1).find('textarea[name="paymentCondition"]').val(lineItem.paymentCondition);
            
            //var paymentInput = cells.eq(1).find('input[name="paymentCondition"]')
            //var priceInput = cells.eq(1).find('input[name="paymentCondition"]');
            //paymentInput.val(lineItem.price);
        }
        return row;
    }
    
    function perMechanicRow2(mid) {
        if (!(mid && mid != '')) return null;
        if (samplePerMechanicRow == null)
            samplePerMechanicRow = $('#paf-item-table-body-per-mechanic tr.def-row:first');
        var row = samplePerMechanicRow.clone();
        row.removeClass('def-row');
        row.data('mid', mid);
        var mechanic = allMechanics[mid];
        
        if (mechanic) {
            var cells = row.find('td.sf-td');
            cells.eq(0).append(mechanic.label);
        }
        return row;
    }
    
    function initMOptionDiv(mBaseType, optDiv, lineItem) {
        if (optDiv.length > 0) {
            optDiv.prop('id', null);
            if (MTYPE_FOC == mBaseType || MTYPE_FOC_BULK == mBaseType || MTYPE_FIXED_BOTTLE == mBaseType) {
                var foc_size = 3;
                if (MTYPE_FOC == mBaseType) {
                    foc_size = 4;
                } else { foc_size = 3; }
                var buyFreeLine = optDiv.find('.buy-free-line:first');
                var buyFreeLines = [buyFreeLine];
                if (lineItem.buyAndFreeList) {
                    var buyFreeBox = optDiv.find('.buy-free-box');
                    for (var i = 0; i < lineItem.buyAndFreeList.length; i++) {
                        var buyAndFree = lineItem.buyAndFreeList[i];
                        var buyVal = buyAndFree.length > 0 ? buyAndFree[0] : null;
                        var freeVal = buyAndFree.length > 1 ? buyAndFree[1] : null;
                        if (buyVal || freeVal) {
                            var clonedBuyFreeLine = buyFreeLine;
                            if (i > 0) {
                                clonedBuyFreeLine = buyFreeLine.clone();
                                buyFreeLines.push(clonedBuyFreeLine);
                                buyFreeBox.append(clonedBuyFreeLine);
                            }
                            clonedBuyFreeLine.find('input[name="buy"]').val(CurrencyUtil.numToCurrency(buyVal));
                            clonedBuyFreeLine.find('input[name="free"]').val(CurrencyUtil.numToCurrency(freeVal));
                        }
                    }
                }
                for (var i = 0; i < buyFreeLines.length; i++)
                    initFOCInputLine(buyFreeLines[i]);
                optDiv.find('.foc-add-btn').first().click(function () {
                    var focDiv = $(this).closest('div');
                    var buyFreeLines = focDiv.find('.buy-free-line');
                    if (buyFreeLines.length < foc_size) {
                        var clonedLine = buyFreeLines.last().clone();
                        clonedLine.find('input[type="text"]').val('');
                        initFOCInputLine(clonedLine);
                        focDiv.find('.buy-free-box').append(clonedLine);
                    }
                });
            } else if (MTYPE_VARIABLE == mBaseType) {
                var perInputs = optDiv.find('input[name="percentage"]');
                var amtInputs = optDiv.find('input[name="amount"]');
                perInputs.val(lineItem.rebateDiscPercent);
                amtInputs.val(CurrencyUtil.numToCurrency(lineItem.rebateDiscAmt));
                perInputs.on('keyup change blur', function () {
                    validateInput(/^[\d|,]*\.?\d*$/.test(this.value), $(this));
                    if (this.value && this.value.length > 0) {
                        $(this).closest('div').find('input[name="amount"]').val('');
                    }
                    calculateInvestmentValue($(this).closest('tr.data-row'));
                    checkMechanic($(this).closest('div'));
                });
                amtInputs.on('keyup change blur', function (e) {
                    var jThis = $(this);
                    if (e.type === 'keyup' || e.type === 'change')
                        CurrencyUtil.renderInput(jThis);
                    var inputNum = CurrencyUtil.currencyToFloat(jThis.val());
                    validateInput(/^[\d|,]*\.?\d*$/.test(jThis.val()), jThis);
                    if (this.value && this.value.length > 0) {
                        jThis.closest('div').find('input[name="percentage"]').val('');
                    }
                    calculateInvestmentValue(jThis.closest('tr.data-row'));
                    checkMechanic($(this).closest('div'));
                });
            } else if (MTYPE_FIXED == mBaseType) {
                var amtInputs = optDiv.find('input[name="amount"]');
                amtInputs.val(CurrencyUtil.numToCurrency(lineItem.fixAmt));
                amtInputs.on('keyup change blur', function (e) {
                    var jThis = $(this);
                    if (e.type === 'keyup' || e.type === 'change')
                        CurrencyUtil.renderInput(jThis);
                    var inputNum = CurrencyUtil.currencyToFloat(jThis.val());
                    validateInput(/^[\d|,]*\.?\d*$/.test(jThis.val()), $(this));
                    calculateInvestmentValue(jThis.closest('tr.data-row'));
                    checkMechanic($(this).closest('div'));
                });
            }
        }
    }
    function initFOCInputLine(theLine) {
        if (theLine && theLine.length > 0) {
            var tempInputs = theLine.find('input[name="buy"], input[name="free"]');
            tempInputs.on('keyup change blur', function (e) {
                if (e.type === 'keyup' || e.type === 'change')
                    CurrencyUtil.renderInput($(this));
                validateInput(/^[\d|,]*$/.test(this.value), $(this));
                calculateInvestmentValue($(this).closest('tr.data-row'));
                checkMechanic($(this).parent().parent().parent());
            });
            theLine.find('.foc-del-btn').click(function () {
                var bfBox = $(this).closest('.buy-free-box');
                if (bfBox.find('.buy-free-line').length > 1) {
                    $(this).closest('.buy-free-line').remove();
                    calculateInvestmentValue(bfBox.closest('tr.data-row'));
                    checkMechanic($(this).parent().parent().parent());
                }
            });
        }
    }
    //calculateInvestmentValue(bfBox.closest('tr.data-row')); //find closer row
    function calculateInvestmentValue(lineItemRow) {
        var buyfree = []; //20160311, added by Leo
        var qty = CurrencyUtil.currencyToFloat(lineItemRow.find('input[name="quantity"]').first().val());
        //var qty = 3000;
        var price = CurrencyUtil.currencyToFloat(lineItemRow.find('input[name="price"]').first().val());
        // var mType = lineItemRow.data('mBaseType');
        // var optDiv= lineItemRow.find('.mechanic-option-' + mType);
        // if(MTYPE_FOC_BULK == mType) optDiv= lineItemRow.find('.mechanic-option-' + MTYPE_FOC);
        var totalInvestVal = 0;
        
        var optDivs = lineItemRow.find('div[class^=mechanic-option-]');
        
        optDivs.each(function () {
            var optDiv = $(this);
            var mType = optDiv.data('mBaseType');
            var investVal = 0;
            
            if (qty && /^-?\d+$/.test(qty)) {
                if (MTYPE_FOC == mType || MTYPE_FOC_BULK == mType) {
                    if (price && /^\d+\.?\d*$/.test(price)) {
                        var buyFreeSpans = optDiv.find('span.buy-free-line');
                        var numOfLine = buyFreeSpans.length;
                        var maxInvestVal = null;
                        for (var i = 0; i < numOfLine; i++) {
                            var buyFreeSpan = $(buyFreeSpans[i]);
                            var buyBt = CurrencyUtil.currencyToFloat(buyFreeSpan.find('input[name="buy"]').first().val());
                            var freeBt = CurrencyUtil.currencyToFloat(buyFreeSpan.find('input[name="free"]').first().val());
                            var pustVal = { buy: buyBt, free: freeBt }; //20160311, added by Leo
                            var tempInvestVal = investmentValueFromFOCInputs(qty, price, buyBt, freeBt);
                            var displayLineInvestValue = 'N/A';
                            if (tempInvestVal) {
                                displayLineInvestValue = CurrencyUtil.numToCurrency(tempInvestVal.toFixed(2)) + ' HKD';
                            }
                            buyFreeSpan.find('.buy-free-line-amt').html(displayLineInvestValue);
                            if (maxInvestVal == null || tempInvestVal > maxInvestVal)
                                maxInvestVal = tempInvestVal;
                            buyfree.push(pustVal); //20160311, added by Leo
                        }
                        //20160311, added by Leo
                        if (numOfLine > 1) {
                            if (qty && /^-?\d+$/.test(qty) && price && /^\d+\.?\d*$/.test(price)
                                && buyfree[0].buy && /^\d+$/.test(buyfree[0].buy) && !/^[0]+$/.test(buyfree[0].buy)
                                && buyfree[0].free && /^\d+$/.test(buyfree[0].free)
                                && buyfree[1].buy && /^\d+$/.test(buyfree[1].buy) && !/^[0]+$/.test(buyfree[1].buy)
                                && buyfree[1].free && /^\d+$/.test(buyfree[1].free)) {
                                try {
                                    var temp1 = intNearestToZero(parseInt(qty) / parseInt(buyfree[1].buy)) * parseInt(buyfree[1].free) * parseFloat(price);
                                    var temp2 = parseInt(qty) % parseInt(buyfree[1].buy);
                                    if (temp2 != 0) {
                                        var temp3 = intNearestToZero(temp2 / parseInt(buyfree[0].buy)) * parseInt(buyfree[0].free) * parseFloat(price);
                                        investVal = temp1 + temp3;
                                        for (var i = 0; i < numOfLine; i++) {
                                            if (i == 0) {
                                                var buyFreeSpan = $(buyFreeSpans[i]);
                                                var displayLineInvestValue = CurrencyUtil.numToCurrency(temp3.toFixed(2)) + ' HKD';
                                                buyFreeSpan.find('.buy-free-line-amt').html(displayLineInvestValue);
                                            }
                                        }
                                    }
                                    else
                                        investVal = maxInvestVal;
                                }
                                catch (e) { }
                            }
                            else
                                investVal = maxInvestVal;
                        }
                        else //20160311, added by Leo
                            investVal = maxInvestVal;
                    }
                }
                else if (MTYPE_FIXED_BOTTLE == mType) {
                    if (price && /^\d+\.?\d*$/.test(price)) {
                        var buyFreeSpans = optDiv.find('span.buy-free-line');
                        var numOfLine = buyFreeSpans.length;
                        var maxInvestVal = null;
                        for (var i = 0; i < numOfLine; i++) {
                            var buyFreeSpan = $(buyFreeSpans[i]);
                            //var buyBt = CurrencyUtil.currencyToFloat(buyFreeSpan.find('input[name="buy"]').first().val());
                            var freeBt = CurrencyUtil.currencyToFloat(buyFreeSpan.find('input[name="free"]').first().val());
                            var pustVal = { buy: 0, free: freeBt };
                            var tempInvestVal = price * freeBt//investmentValueFixedFromFOCInputs(qty, price, buyBt, freeBt);
                            var displayLineInvestValue = 'N/A';
                            if (tempInvestVal) {
                                displayLineInvestValue = CurrencyUtil.numToCurrency(tempInvestVal.toFixed(2)) + ' HKD';
                            }
                            buyFreeSpan.find('.buy-free-line-amt').html(displayLineInvestValue);
                            if (maxInvestVal == null || tempInvestVal > maxInvestVal)
                                maxInvestVal = tempInvestVal;
                            buyfree.push(pustVal); //20160311, added by Leo
                        }
                        
                        investVal = maxInvestVal;
                    }
                }
                    else if (MTYPE_VARIABLE == mType) {
                        var amt = CurrencyUtil.currencyToFloat(optDiv.find('input[name="amount"]').first().val());
                        if (amt !== null) {
                            if (/^\d+\.?\d*$/.test(amt)) {
                                try {
                                    investVal = parseInt(qty) * parseFloat(amt);
                                } catch (e) {
                                    investVal = 0;
                                }
                            }
                        } else {
                            if (price && /^\d+\.?\d*$/.test(price)) {
                                var percent = optDiv.find('input[name="percentage"]').first().val();
                                if (percent && /^\d+\.?\d*$/.test(percent)) {
                                    try {
                                        investVal = parseInt(qty) * parseFloat(price) * parseFloat(percent) / 100;
                                    } catch (e) {
                                        investVal = 0;
                                    }
                                }
                            }
                        }
                    } else if (MTYPE_FIXED == mType) {
                        var amt = CurrencyUtil.currencyToFloat(optDiv.find('input[name="amount"]').first().val());
                        if (amt && /^\d+\.?\d*$/.test(amt)) {
                            try {
                                investVal = parseFloat(amt);
                            } catch (e) {
                                investVal = 0;
                            }
                        }
                    }
            }
            
            totalInvestVal += investVal;
        });
        
        if (totalInvestVal != 0)
            lineItemRow.find('td.invest-val').html(CurrencyUtil.numToCurrency(totalInvestVal.toFixed(2)) + ' HKD');
        else
            lineItemRow.find('td.invest-val').html('N/A');
    }
    
    function investmentValueFromFOCInputs(qty, price, buyBt, freeBt) {
        var result = null;
        if (qty && /^-?\d+$/.test(qty) && price && /^\d+\.?\d*$/.test(price)
            && buyBt && /^\d+$/.test(buyBt) && !/^[0]+$/.test(buyBt) && freeBt && /^\d+$/.test(freeBt)) {
            try {
                result = intNearestToZero(parseInt(qty) / parseInt(buyBt)) * parseInt(freeBt) * parseFloat(price);
            } catch (e) { }
        }
        return result;
    }
    
    function investmentValueFixedFromFOCInputs(qty, price, buyBt, freeBt) {
        var result = null;
        if (qty && /^-?\d+$/.test(qty) && price && /^\d+\.?\d*$/.test(price)
            && buyBt && /^\d+$/.test(buyBt) && !/^[0]+$/.test(buyBt) && freeBt && /^\d+$/.test(freeBt)) {
            try {
                var value = parseInt(qty) >= parseInt(buyBt) ? 1 : 0;
                result = value * parseInt(freeBt) * parseFloat(price);
            } catch (e) { }
        }
        return result;
    }
    //Howard 02/2020
    function CheckAllBox(Grp){
        selections = document.getElementById('selectedCol'+Grp);
        var selectedValue = selections.options[selections.selectedIndex].value;
        console.log('selectedValue :' + selectedValue);
        var mytable = document.getElementById('paf-item-table-body-lineitem'+Grp);
        var inputs = mytable.getElementsByTagName('input');
		for (var i = 0; i < inputs.length; i++) {
            if(inputs[i].id == "calcheckbox")
            {
                if(inputs[i].checked != true )
                {
                    console.log('inputs['+i+']: '+inputs[i].checked);

                    inputs[i].click();
                }
            }
        }
    }
    function checkall(Grp){
        checkallbox = document.getElementById('checkall'+Grp);
        var boxValue = checkallbox.checked;
        console.log('boxValue :' + boxValue);
        var mytable = document.getElementById('paf-item-table-body-lineitem'+Grp);
        var inputs = mytable.getElementsByTagName('input');
		for (var i = 0; i < inputs.length; i++) {
            if(inputs[i].id == "calcheckbox")
            {
                if(inputs[i].checked != true && boxValue == true)
                {
                    console.log('inputs['+i+']: '+inputs[i].checked);

                    inputs[i].click();
                }
                if(inputs[i].checked != false && boxValue == false)
                {
                    console.log('inputs['+i+']: '+inputs[i].checked);

                    inputs[i].click();
                }
            }
        }
    }
    //Howard 11/2019
    function calculateFixedValue(rowNum,InputNum,Grp){
        var mytable = document.getElementById('thead-page-block-paf-lineitem'+Grp);
        var result = $('#paf-item-table-body-lineitem' + Grp).find("tr.data-row:has(:checked)");
		console.log('InputNum :' + InputNum);

        $selectedSPTDByPO = result;
        
        AmountInput = [];
        var myinputs = mytable.getElementsByTagName('input');
        for (var i = 0; i < myinputs.length; i++) {
            console.log('myinputs['+i+']: '+myinputs[i].id);
            console.log('myinputs['+i+']: '+myinputs[i].value); 

            if(myinputs[i].id == 'totalAmount')
            {
                AmountInput.push(myinputs[i]);
            }
        }
        selections = document.getElementById('selectedCol'+Grp);
        var selectedValue = selections.options[selections.selectedIndex].value;
        console.log('selectedValue :' + selectedValue);
        if(InputNum == selectedValue)
        {
            Total = AmountInput[InputNum-1].value;
            console.log('Total :' + Total);
            var totalValue = 0;
            var totalCalValue = 0;
            var i = 0;
            while (i < $selectedSPTDByPO.length) {
                var rowposition = $selectedSPTDByPO[i];        
                var $row = $(rowposition).closest("tr.data-row")
                var qtyValue = $row.find('input[name="quantity"]').val().replace(",","");
                var priceValue = $row.find('input[name="price"]').val().replace(",","");
                totalValue = totalValue + qtyValue*priceValue;
                i++;
            }    
            console.log('total value : ' + totalValue)
            
            i = 0;
            while (i < $selectedSPTDByPO.length) {
                var rowposition = $selectedSPTDByPO[i];        
                var $row = $(rowposition).closest("tr.data-row")
                var qtyValue = $row.find('input[name="quantity"]').val().replace(",","");
                var priceValue = $row.find('input[name="price"]').val().replace(",","");
                var ItemPercentage = (qtyValue*priceValue)/totalValue;
                console.log('ItemPercentage : ' + ItemPercentage);
                var amtValue = ItemPercentage*Total;
                console.log('amtValue : ' + amtValue);
                var amtRdValue = Math.floor(amtValue);
                totalCalValue = totalCalValue + amtRdValue;
                console.log('totalCalValue : ' + totalCalValue);
                if(i == $selectedSPTDByPO.length - 1)
                {
                    totalCalValue = totalCalValue;
                    console.log('Total : ' + Total);
                    var netdiff = Math.round(Total - totalCalValue);
                    console.log('netdiff : ' + netdiff);
                    amtRdValue = Math.round(amtRdValue + netdiff);
                }
                
                cells = $row.find('td.sf-td');
                cells.eq(4+rowNum).find('input[name="amount"]').val(amtRdValue);
                i++;
            }    
        }else{
            
        }
    }
    
    function AddSelectedRow(n, group){
        console.log('selected');
        totalValue = 0;
    }
    /* Full Product Table */
    
    function retrieveProducts() {
        finishRemoteProduct = false;
        ASI_HK_CRM_PreApprovalFormDetailEditCON.normalProductList(
            custId
            , handleProductCallback
            , { escape: true, timeout: 20000 }
        );
    }
    function handleProductCallback(products, event) {
        if (event.status) {
            cacheRemoteProduct = products;
            allProducts = [];
            if (cacheRemoteProduct) {
                var pdSize = cacheRemoteProduct.length;
                for (var i = 0; i < pdSize; i++) {
                    var pd = cacheRemoteProduct[i];
                    allProducts[pd.id] = pd;
                }
            }
            finishRemoteProduct = true;
            displayDataIfReady();
        } else {
            // TODO: Handle error
            alert(event.message);
        }
    }
    function displayProducts() {
        if (cacheRemoteProduct && firstRemote) {
            initProductTable(cacheRemoteProduct);
            initFilter();
        }
    }
    function displaySelectedProducts() {
        if (cacheRemoteLineItem && firstRemote) {
            initSelectedProductTable(cacheRemoteLineItem);
        }
    }
    
    function initProductTable(products) {
        var colSettings = productColSettings(false, 0);
        var pdTable = $('#product-table');
        var pds = [];
        for (var pd in products) {
            if (products[pd].showInProductList == true) {
                pds.push(products[pd]);
            }
        }
        pdDataTable = pdTable.dataTable({
            aaData: pds
            , aoColumns: colSettings
            , fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                renderProductRowCommon($(nRow), aData, false, 0);
            }
            , bPaginate: true
            , iDisplayLength: SPD_NUM_OF_ROW
            , sPaginationType: "full_numbers"
            , oLanguage: {
                oPaginate: {
                    sFirst: "<<"
                    , sPrevious: "< Previous"
                    , sNext: "Next >"
                    , sLast: ">>"
                }
            }
            , iDisplayLength: Page_NUM_OF_LIST_ROW
            , bLengthChange: true
            , bSort: true
            , aaSorting: [[1, 'asc'], [2, 'asc'], [3, 'asc']]
            , bFilter: true
            , sDom: 'lrt<"table-below"pi>'
            , bAutoWidth: true
            , bDeferRender: true
            
        });
    }
    function initSelectedProductTable(lineItems) {
        var products = [];
        var handledPds = [];
        for (var i = 0; i < lineItems.length; i++) {
            var lineItem = lineItems[i];
            var pd = lineItem.skuId ? allProducts[lineItem.skuId] : null;
            if (pd && handledPds[pd.id] != 1) {
                pd.price = (lineItem.price == null ? (pd.basePrice == null ? pd.referencePrice : pd.basePrice) : lineItem.price);
                products.push(pd);
                handledPds[pd.id] = 1;
            }
        }
        
        var onlyAll = products.filter(function (p) {
            return p.allPrdt == true;
        });
        
        var excludeAll = products.filter(function (p) {
            return p.allPrdt == false;
        });
        
        for (let j = 1; j <= 5; j++) {
            var colSettings = productColSettings(true, j);
            
            var pdTable = $('#product-table-selected' + j);
            pdTable.dataTable({
                aaData: (j == 1 ? onlyAll : excludeAll)
                , aoColumns: colSettings
                , fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    renderProductRowCommon($(nRow), aData, true, j);
                }
                , bPaginate: true
                , iDisplayLength: SPD_NUM_OF_ROW
                , sPaginationType: "full_numbers"
                , oLanguage: {
                    oPaginate: {
                        sFirst: "<<"
                        , sPrevious: "< Previous"
                        , sNext: "Next >"
                        , sLast: ">>"
                    }
                }
                , iDisplayLength: Page_NUM_OF_LIST_ROW
                , bLengthChange: true
                , bSort: false
                , bFilter: false
                , sDom: 'rt<"table-below"pi>'
                , bAutoWidth: true
                
            });
        }
    }
    function initFilter() {
        $('#pd-search-sku').on('keyup change blur', function () { filterProduct(); });
        $('#pd-search-sb').change(function () { filterProduct(); });
        $('#pd-search-sbcode').on('keyup change blur', function () {
            //$('#pd-search-sb').val('');
            filterProduct();
        }
                                 );
        $('#pd-search-skusize').on('keyup change blur', function () { filterProduct(); });
        $('.pd-search-sb-type').click(function () {
            var thisBtn = $(this);
            if (!thisBtn.hasClass('sb-type-selected')) {
                thisBtn.closest('.pd-search-sb-type-div').find('.pd-search-sb-type').removeClass('sb-type-selected');
                var filterDiv = thisBtn.closest('div.pd-search-div');
                filterDiv.find('.pd-search-sku').val('');
                filterDiv.find('.pd-search-sb').val('');
                filterDiv.find('.pd-search-sbcode').val('');
                filterDiv.find('.pd-search-skusize').val('');
                thisBtn.addClass('sb-type-selected');
                filterProduct();
            }
        });
        $('#pd-search-reset').click(function () {
            $('#pd-search-sku').val('');
            $('#pd-search-sb').val('');
            $('#pd-search-sbcode').val('');
            $('#pd-search-skusize').val('');
            $('.pd-search-sb-type').removeClass('sb-type-selected');
            filterProduct();
        });
    }
    
    function addSelectedRowByProduct(pd, group) {
        if ($('#' + productRowIdByPid(pd.id, true, group)).length == 0) {
            $('#product-table-selected' + group).dataTable().fnAddData(pd);
        }
    }
    function removeSelectedRow(pid, keepSKU, group) {
        if (!keepSKU) {
            var hasPidRow = false;
            $('#paf-item-table-body-lineitem' + group + ' tr.data-row').each(function () {
                if (pid == $(this).data('pid')) {
                    hasPidRow = true;
                    return false;
                }
            });
            
            if (!hasPidRow) {
                var rowdata = $('#product-table-selected' + group).dataTable().fnGetData();
                for (var i = 0; i < rowdata.length; i++) {
                    if (rowdata[i].id == pid) {
                        $('#product-table-selected' + group).dataTable().fnDeleteRow(i);
                    }
                }
            }
        }
    }
    
    function productColSettings(isSelectedTable, group) {
        var colSettings = [];
        // var props = ['btnAdd', 'subBrandName', 'pricingItem' ]; //20160411, edited by Leo, change sequence
        // //var props = ['btnAdd', 'name', 'itemGroupName', 'subBrandName' ];
        // if (!isSelectedTable) {
        // 	props = ['btnAdd', 'subBrandName', 'pricingItem', 'stdBottleSize', 'basePrice', 'referencePrice'];
        // 	//props = ['btnAdd', 'name', 'itemGroupName', 'subBrandName', 'basePrice', 'referencePrice' ];
        // }
        if (group == 0) {
            //<!--comment for 12-02 partial deployment-->
            var props = ['btnAdd', 'subBrandName', 'pricingItem', 'stdBottleSize', 'basePrice', 'referencePrice'];
            //var props = ['btnAdd', 'subBrandName', 'pricingItem', 'stdBottleSize', 'basePrice', 'referencePrice', 'lowestoffer'];
        } else {
            var props = ['btnAdd', 'subBrandName', 'pricingItem', 'stdBottleSize', 'price'];
        }
        for (var i = 0; i < props.length; i++) {
            var mDataFunction = function () {
                var prop = props[i];
                if (prop) {
                    return function (source, type, val) {
                        return source[prop] ? source[prop] : null;
                    }
                }
                return null;
            }
            colSettings.push({
                bSortable: true
                , bSearchable: false
                , sClass: 'sf-td'
                , mData: mDataFunction()
            });
        }
        var colIndices = [];
        for (var i = 0; i < props.length; i++) colIndices[props[i]] = i;
        
        colSettings[colIndices['btnAdd']].mRender = function (data, type, full) {
            if ('display' === type) {
                return '<input type="checkbox" onchange="selectProduct(this,' + group + ')">';
                //return '<a class="pd-add-btn non-link-btn" onclick="clickPAddBtn(this, ' + group + ')">Add</a>';
            }
            return data;
        };
        colSettings[colIndices['btnAdd']].bSortable = false;
        
        colSettings[colIndices['pricingItem']].mRender = function (data, type, full) {
            if ('display' === type) {
                return data && full.itemGroupId ? '<a href="/' + full.itemGroupId + '">' + data + '</a>' : '';
            }
            return data;
        };
        colSettings[colIndices['pricingItem']].bSearchable = true;
        
        //colSettings[colIndices['itemGroupName']].mRender = function(data, type, full) {
        //    if ('display' === type) {
        //        return data && full.itemGroupId ? '<a href="/' + full.itemGroupId + '">' + data + '</a>' : '';
        //    }
        //    return data;Beefeater Gin 40% Alc-12 X 100 CL LITRE-BF0507
        //};
        
        colSettings[colIndices['subBrandName']].mRender = function (data, type, full) {
            if ('display' === type) {
                return data && full.subBrandId ? '<a href="/' + full.subBrandId + '">' + data + '</a>' : '';
            } else if ('filter' === type) {
                return full.subBrandId + (full.brandType ? ('_' + full.brandType + '_') : '');
            }
            return data;
        };
        colSettings[colIndices['subBrandName']].bSearchable = true;
        if (group == 0) {
            
            
            // if (!isSelectedTable) {
            colSettings[colIndices['basePrice']].mRender = function (data, type, full) {
                if ('display' === type) {
                    var data = CurrencyUtil.numToCurrency(data);
                    return data ? data : '';
                } else if ('filter' === type) {
                    return '_' + full.subBrandCode + '_';
                }
                return data ? data : null;
            };
            colSettings[colIndices['basePrice']].bSortable = false;
            // }
            
            // if (!isSelectedTable) {
            colSettings[colIndices['referencePrice']].mRender = function (data, type, full) {
                if ('display' === type) {
                    var data = CurrencyUtil.numToCurrency(data);
                    return data ? data : '';
                } else if ('filter' === type) {
                    return '_' + full.stdBottleSize + '_';
                }
                return data ? data : null;
            };
            colSettings[colIndices['referencePrice']].bSortable = false;
            // <!--comment for 12-02 partial deployment-->
            //colSettings[colIndices['lowestoffer']].bSortable = false;

            // }
            
            // if (isSelectedTable) {
            //     colSettings[colIndices['mSelect']].mRender = function(data, type, full) {
            //         if ('display' === type) {
            //             return mechanicSelectWithoutSelected(full.id, isSelectedTable).prop('outerHTML');
            //         }
            //         return data;
            //     }
            // }
            // if (!isSelectedTable) {
            colSettings[colIndices['basePrice']].bSortable = false;
            colSettings[colIndices['referencePrice']].bSortable = false;

            // }
        } else {
            colSettings[colIndices['price']].mRender = function (data, type, full) {
                if ('display' === type) {
                    var data = CurrencyUtil.numToCurrency(data);
                    return data ? data : '';
                } else if ('filter' === type) {
                    return '_' + full.subBrandCode + '_';
                }
                return data ? data : null;
            };
            colSettings[colIndices['price']].bSortable = false;
        }
        return colSettings;
    }
    function renderProductRowCommon(row, pd, isSelectedTable, group) {
        row.attr('id', productRowIdByPid(pd.id, isSelectedTable, group));
        row.addClass('data-row');
        row.data('pid', pd.id);
        return row;
    }
    
    var sampleMechanicSelect = null;
    function mechanicSelectWithoutSelected(pid, isSelectedTable) {
        if (sampleMechanicSelect == null)
            sampleMechanicSelect = $('#mechanic-select');
        
        var result = sampleMechanicSelect.clone();
        result.attr('id', mechanicSelectIdByPid(pid, isSelectedTable));
        
        var selectedMechanics = pidToSelectedMechanicsMap[pid];
        if (selectedMechanics && selectedMechanics.length > 0) {
            var size = selectedMechanics.length;
            for (var i = 0; i < size; i++) {
                mechanicId = selectedMechanics[i];
                result.find('option[value="' + mechanicId + '"]').attr("disabled", "disabled");
            }
            emptyMechanicSelect(result);
        } else {
            result.find('option[value="' + MID_NO_MECHANIC + '"]').attr("selected", "selected");
        }
        return result;
    }
    
    function enableMechanicSelects(pid, mid) {
        enableMechanicSelect($('#' + mechanicSelectIdByPid(pid, true)), mid);
    }
    function enableMechanicSelect(mSelect, mid) {
        var options = mSelect.find('option');
        if (mid && mid != '' && mid != MID_NO_MECHANIC) {
            var countDisabled = 0;
            options.filter(function () {
                var isTarget = $(this).val() == mid;
                if (!isTarget && $(this).attr('disabled')) {
                    countDisabled++;
                }
                return isTarget;
            }).prop('disabled', null);
            if (countDisabled == 1) {
                mSelect.find('option[value="' + MID_NO_MECHANIC + '"]').prop('disabled', null);
            }
        } else {
            mSelect.find('option').prop('disabled', null);
        }
    }
    function disableMechanicSelects(pid, mid) {
        disableMechanicSelect($('#' + mechanicSelectIdByPid(pid, true)), mid);
    }
    function disableMechanicSelect(mSelect, mid) {
        if (mid) {
            mSelect.find('option[value="' + mid + '"]').attr('disabled', 'disabled');
            emptyMechanicSelect(mSelect);
        }
    }
    function emptyMechanicSelect(selectEle) {
        selectEle.val(MID_NULL);
    }
    
    function filterProduct() {
        if (pdDataTable) {
            var sbSelect = $('#pd-search-sb');
            var sbType = $('.sb-type-selected');
            var sbcode = $('#pd-search-sbcode');
            var sbfilter = sbcode.val() + sbSelect.val();
            //BACKUP----var sb = sbType.length > 0 ? '_' + sbType.attr('name') + '_' : sbSelect.val();
            var sb = sbType.length > 0 ? '_' + sbType.attr('name') + '_' : sbSelect.val();
            pdDataTable.fnFilter($('#pd-search-sku').val(), 2); //20160411, edited by Leo
            pdDataTable.fnFilter($('#pd-search-sbcode').val(), 4); //20160411, edited by Leo
            pdDataTable.fnFilter($('#pd-search-skusize').val(), 5); //20160411, edited by Leo
            pdDataTable.fnFilter(sb, 1); //20160411, edited by Leo
        }
    }
    //Howard @Introv 2019/12/2
    function Selectall(checkbox, group){
        if($('#CheckALLcheckbox'+group).is(":checked")){
            if(group == 0){
                $('#product-table-body').find(':checkbox').each(function(){
                    this.checked = true;
                    selectProduct(this, group);
                });
            }
            else{
                $('#product-table-selected-body'+group).find(':checkbox').each(function(){
                    this.checked = true;
                    selectProduct(this, group);
                });
            }
        }
        else{
            if(group == 0){
                $('#product-table-body').find(':checkbox').each(function(){
                    this.checked = false;
                    selectProduct(this, group);
                });
            }
            else{
                $('#product-table-selected-body'+group).find(':checkbox').each(function(){
                    this.checked = false;
                    selectProduct(this, group);
                });
            }
        }
    }
        /*
    $('#CheckALLcheckbox').click(function(event) {   
        if(this.checked) {
            console.log('clicked all');
            $('#product-table-body').find(':checkbox').each(function(){
                selectProduct(this, 0);
                this.checked = true;
                });
            //        var pdTable = $('#product-table');
        } else {
            console.log('unclicked all');
            $('#product-table-body').find(':checkbox').each(function(){
                selectProduct(this, 0);
                this.checked = false;
                });
           
            }
    });*/
    /* User Action Functions */
    
    function saveAll(isQuick) {
        dialogShow();
        clearErrorMsgs();
        var errMsg = '';
        if ($('.error-input').length > 0) {
            displayErrorMsg('Please fix the incorrect data');
            return false;
        }
        
        var pidToData = [];
        $('#paf-item-table-body-per-product').find('tr.data-row').each(function () {
            var curRow = $(this);
            if (curRow.css('display') != 'none') {
                var pid = curRow.data('pid');
                if (typeof pid === 'undefined' || pid == null) {
                    displayErrorMsg('Exception: Unknown product ID');
                    return;
                }
                
                if (CurrencyUtil.currencyToFloat(curRow.find('input[name="price"]').val())
                    < CurrencyUtil.currencyToFloat(curRow.find('output[name="referencePrice"]').val())
                    && !curRow.find('input[name="pouring"]').is(':checked') //201060315, edited by Leo
                    && isKeyAccount == 'false') { //20180803, Added by Introv Kelvin
                    errMsg = 'Exception: Price < Reference Price';
                    displayErrorMsg('Exception: Price < Reference Price');
                    return;
                }
                pidToData[pid] = {
                    "sfid": curRow.data('sfid')
                    , "qty": nullIfBlank(CurrencyUtil.currencyToFloat(curRow.find('input[name="quantity"]').val()))
                    , "price": nullIfBlank(CurrencyUtil.currencyToFloat(curRow.find('input[name="price"]').val()))
                    , "isPouring": curRow.find('input[name="pouring"]').is(':checked')
                };
            }
        });
        if (errMsg.length > 0) {
            return false;
        }
        
        var midToData = [];
        $('#paf-item-table-body-per-mechanic').find('tr.data-row').each(function () {
            var curRow = $(this);
            if (curRow.css('display') != 'none') {
                var mid = curRow.data('mid');
                if (typeof mid === 'undefined' || mid == null) {
                    displayErrorMsg('Exception: Unknown mechanic ID');
                    return;
                }
                midToData[mid] = {
                    "paymentCondition": curRow.find('textarea[name="paymentCondition"]').val()
                };
            }
        });
        
        var submitLineItems = [];
        var handledPids = [];
        for (let i = 1; i <= 5; i++) {
            $('#paf-item-table-body-lineitem' + i).find('tr.data-row').each(function () {
                var curRow = $(this);
                if (curRow.css('display') != 'none') {
                    var mOptionDivs = curRow.find('div[class^=mechanic-option-]');
                    var createNullItem = (i == 1);
                    var sfid = null;
                    mOptionDivs.each(function () {
                        var mOptionDiv = $(this);
                        
                        sfid = mOptionDiv.data('sfid');
                        var pid = curRow.data('pid');
                        var mid = mOptionDiv.data('mid');
                        var baseType = mOptionDiv.data('mBaseType');
                        if (typeof pid === 'undefined' || pid == null
                            || typeof mid === 'undefined' || mid == null) {
                            displayErrorMsg('Exception: Unknown product ID or mechanic ID');
                            return;
                        }
                        
                        handledPids[pid] = 1;
                        // var mOptionDiv = curRow.find('.mechanic-option-' + baseType);
                        // if (MTYPE_FOC_BULK == baseType) mOptionDiv = curRow.find('.mechanic-option-' + MTYPE_FOC);
                        
                        var newItem = false;
                        var buyFreeValues = null;
                        if (MTYPE_FOC == baseType || MTYPE_FOC_BULK == baseType) {
                            buyFreeValues = [];
                            mOptionDiv.find('.buy-free-line').each(function () {
                                var buyStr = CurrencyUtil.currencyToFloat($(this).find('input[name="buy"]').val());
                                var freeStr = CurrencyUtil.currencyToFloat($(this).find('input[name="free"]').val());
                                if (buyStr || freeStr) {
                                    buyFreeValues.push([parseInt(buyStr), parseInt(freeStr)]);
                                }
                            });
                            if (buyFreeValues.length > 0) {
                                newItem = true;
                            }
                        }
                        else if (MTYPE_FIXED_BOTTLE == baseType) {
                            buyFreeValues = [];
                            mOptionDiv.find('.buy-free-line').each(function () {
                                var freeStr = CurrencyUtil.currencyToFloat($(this).find('input[name="free"]').val());
                                if (freeStr) {
                                    buyFreeValues.push([0, parseInt(freeStr)]);
                                }
                            });
                            if (buyFreeValues.length > 0) {
                                newItem = true;
                            }
                        }
                            else if (MTYPE_VARIABLE == baseType) {
                                if (CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) > 0 || parseFloat(mOptionDiv.find('input[name="percentage"]').val()) > 0) {
                                    newItem = true;
                                }
                            }
                                else if (MTYPE_FIXED == baseType) {
                                    if (CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) > 0) {
                                        newItem = true;
                                    }
                                }
                        
                        if (newItem) {
                            createNullItem = false;
                            if(midToData[mid]){
                                var lineItem = {
                                    "id": sfid
                                    , "skuId": pid
                                    , "mechanicId": mid
                                    , "qty": pidToData[pid].qty
                                    , "price": pidToData[pid].price
                                    , "isPouring": pidToData[pid].isPouring
                                    , "paymentCondition": midToData[mid].paymentCondition
                                    , "buyAndFreeList": (MTYPE_FOC == baseType || MTYPE_FOC_BULK == baseType || MTYPE_FIXED_BOTTLE == baseType) ? buyFreeValues : null
                                    , "rebateDiscPercent": MTYPE_VARIABLE == baseType ? parseFloat(mOptionDiv.find('input[name="percentage"]').val()) : null
                                    , "rebateDiscAmt": MTYPE_VARIABLE == baseType ? CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) : null
                                    , "fixAmt": MTYPE_FIXED == baseType ? CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) : null
                                    , "allPrdt": allProducts[pid] != undefined ? allProducts[pid].allPrdt : false
                                };
                            }else{
                                var lineItem = {
                                    "id": sfid
                                    , "skuId": pid
                                    , "mechanicId": mid
                                    , "qty": pidToData[pid].qty
                                    , "price": pidToData[pid].price
                                    , "isPouring": pidToData[pid].isPouring
                                    //, "paymentCondition": midToData[mid].paymentCondition
                                    , "buyAndFreeList": (MTYPE_FOC == baseType || MTYPE_FOC_BULK == baseType || MTYPE_FIXED_BOTTLE == baseType) ? buyFreeValues : null
                                    , "rebateDiscPercent": MTYPE_VARIABLE == baseType ? parseFloat(mOptionDiv.find('input[name="percentage"]').val()) : null
                                    , "rebateDiscAmt": MTYPE_VARIABLE == baseType ? CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) : null
                                    , "fixAmt": MTYPE_FIXED == baseType ? CurrencyUtil.currencyToFloat(mOptionDiv.find('input[name="amount"]').val()) : null
                                    , "allPrdt": allProducts[pid] != undefined ? allProducts[pid].allPrdt : false
                                };
                            }
                            submitLineItems.push(lineItem);
                        }
                    });
                    if (createNullItem == true) {
                        var pid = curRow.data('pid');
                        sfid = curRow.data('sfid');
                        
                        var lineItem = {
                            "id": sfid
                            , "skuId": pid
                            , "mechanicId": null
                            , "qty": pidToData[pid].qty
                            , "price": pidToData[pid].price
                            , "isPouring": pidToData[pid].isPouring
                            , "paymentCondition": null
                            , "buyAndFreeList": null
                            , "rebateDiscPercent": null
                            , "rebateDiscAmt": null
                            , "fixAmt": null
                            , "allPrdt": allProducts[pid] != undefined ? allProducts[pid].allPrdt : false
                        };
                        submitLineItems.push(lineItem);
                    }
                }
            });
        }
        
        for (var pidIndex in pidToData) {
            if (typeof pidIndex === 'string' && handledPids[pidIndex] != 1) {
                var theData = pidToData[pidIndex];
                if (typeof theData === 'object') {
                    var lineItem = {
                        "id": theData.sfid
                        , "skuId": pidIndex
                        , "qty": theData.qty
                        , "price": theData.price
                        , "isPouring": theData.isPouring
                        , "allPrdt": allProducts[pidIndex] != undefined ? allProducts[pidIndex].allPrdt : false
                    };
                    submitLineItems.push(lineItem);
                }
            }
        }
        
        ASI_HK_CRM_PreApprovalFormDetailEditCON.saveChanges(
            headerId
            , submitLineItems
            , saveResultCallback
            , { escape: true, timeout: 30000 }
        );
        function saveResultCallback(result, event) {
            var redirect = false;
            if (event.status) {
                if (result.success) {
                    if (isQuick !== true) {
                        var redirectURL = '/home/home.jsp';
                        if (headerId && headerId != '') {
                            redirectURL = '/' + headerId;
                        }
                        location.href = redirectURL;
                        redirect = true;
                    } else {
                        location.reload();
                    }
                } else {
                    if (result.messages && result.messages.length > 0) {
                        for (var i = 0; i < result.messages.length; i++) {
                            displayErrorMsg(result.messages[i]);
                        }
                    } else {
                        displayErrorMsg('Unknown error');
                    }
                }
            } else {
                // TODO: Handle error
                displayErrorMsg(event.message);
            }
            if (!redirect)
                dialogHide();
        }
    }
    
    function cancelAll() {
        var redirectURL = '/home/home.jsp';
        if (headerId && headerId != '') {
            redirectURL = '/' + headerId;
        }
        location.href = redirectURL;
    }
    
    function clickPAddBtn(btn, group) {
        var pdRow = $(btn).closest('tr.data-row');
        var pid = pdRow.data('pid');
        return triggerAddProduct(pid, group);
    }
    
    function selectProduct(checkbox, group) {
        var pdRow = $(checkbox).closest('tr.data-row');
        var pid = pdRow.data('pid');
        var index = selectedProducts[group].indexOf(pid);
        if (index == -1) {
            selectedProducts[group].push(pid);
        } else {
            selectedProducts[group].splice(index, 1);
        }
        return;
    }
    function addProducts(group) {
        for (var index in selectedProducts[group]) {
            triggerAddProduct(selectedProducts[group][index], group);
        }
    }
    
    function triggerAddProduct(pid, group) {
        if (pid && pid != '') {
            var pd = allProducts[pid];
            if (!pd) {
                return;
            }
            if (group == 0) {
                var lineItems = lineItemFromProductAndMechanic(pd, [null], group);
                addAllRowsByLineItems(lineItems, 0);
                if (pd.allPrdt) {
                    lineItems = lineItemFromProductAndMechanic(pd, getGroupMechanics(1), 1);
                    var sortedLineItems = sortGroup(lineItems, 1);
                    addAllRowsByLineItems(sortedLineItems, 1);
                } else {
                    for (var i = 1; i <= 5; i++) {
                        addSelectedRowByProduct(pd, i);
                    }
                }
                
            }
            else {
                var mechs = getGroupMechanics(group);
                if (mechs.length > 0) {
                    var lineItems = lineItemFromProductAndMechanic(pd, mechs, group);
                    var sortedLineItems = sortGroup(lineItems, group);
                    addAllRowsByLineItems(sortedLineItems, group);
                }
            }
        }
    }
    
    function sortCode(mechanics) {
        var result = [];
        var orders = [
            'A01'
            ,'A02'
            ,'A03'
            ,'A04'
            ,'A05'
            ,'A06'
            ,'A07'
            ,'A08'
            ,'A09'
            ,'A10'
            ,'A11'
            ,'A12'
            ,'A13'
            ,'A14'
            ,'A15'
            ,'A16'
            ,'A17'
            ,'B01'
            ,'B02'
            ,'B03'
            ,'B04'
            ,'B05'
            ,'B06'
            ,'B07'
            ,'B08'
            ,'B09'
            ,'B10'
            ,'B11'
        ];
        
        orders.forEach(function (o) {
            var item = mechanics.find(function (m) {
                return m.code == o;
            });
            
            if (item) {
                result.push(item);
            }
        });
        
        return result;
    }
    
    function sortGroup(lineItems, group) {
        var result = [];
        var orders = [
            [],
            ['A01', 'A08'],
            ['A02', 'A04', 'A07'],
            ['A17', 'A09', 'A06', 'A12', 'A14', 'B01'],
            ['B03', 'B02', 'B07', 'B05', 'B06'],
            ['B08', 'B09', 'B04', 'B10', 'B11']
        ];
        
        var groupOrder = orders[group];
        
        if (groupOrder.length > 0) {
            groupOrder.forEach(function (o) {
                var item = lineItems.find(function (item) {
                    return item.mechanicCode == o;
                });
                
                if (item) {
                    result.push(item);
                }
            });
        }
        else {
            Array.prototype.push.apply(result, lineItems);
        }
        
        return result;
    }
    
    function triggerRemoveLineItem(pid, keepSKURow2, group) {
        if (pid && pid != '') {
            var keepSKURow = false;
            //20151008 Keep SKU
            if (keepSKURow2)
                keepSKURow = keepSKURow2;
            //20151008
            var selectedMechanicIds = pidToSelectedMechanicsMap[pid];
            if (group != 0) {
                if (selectedMechanicIds.length == 1) {
                    keepSKURow = confirm("Keep the SKU without any mechanic?");
                }
            } else {
                if (selectedMechanicIds && selectedMechanicIds.length > 0) {
                    if (!confirm("Are you sure to delete the SKU and all its mechanics?")) {
                        return false;
                    }
                }
            }
            
            if (group == 0) {
                removePidToSelectedMechanics(pid, null);
                if (allProducts[pid].allPrdt) {
                    removeAllRowsByIds(pid, keepSKURow, 1);
                    removeSelectedRow(pid, keepSKURow, 1);
                } else {
                    for (var i = 2; i <= 5; i++) {
                        removeAllRowsByIds(pid, keepSKURow, i);
                        removeSelectedRow(pid, keepSKURow, i);
                        for (var j in selectedProducts[i]) {
                            if (selectedProducts[i][j] == pid) {
                                selectedProducts[i].splice(j, 1);
                            }
                        }
                    }
                }
            }
            else {
                var mechs = getGroupMechanics(group);
                mechs.forEach(function (mech) {
                    removePidToSelectedMechanics(pid, mech.id);
                });
                removeAllRowsByIds(pid, keepSKURow, group);
                removeSelectedRow(pid, keepSKURow, group);
            }
        }
    }
    
    function triggerQtyInputChange(e, group) {
        var qtyInput = $(eTarget(e));
        if (e.type === 'keyup' || e.type === 'change')
            CurrencyUtil.renderInput(qtyInput);
        var qtyNum = CurrencyUtil.currencyToFloat(qtyInput.val());
        validateInput(/^-?[\d|,]*$/.test(qtyInput.val()), qtyInput);
        var pid = qtyInput.closest('tr.data-row').data('pid');
        var anotherQtyInputs = $('#paf-item-table-body-lineitem' + group + ' tr.data-row').filter(function () {
            return $(this).data('pid') == pid;
        }).find('input[name="quantity"]');
        anotherQtyInputs.val(qtyInput.val());
        anotherQtyInputs.change()
    }
    function triggerPriceInputChange(e, group) {
        var priceInput = $(eTarget(e));
        if (e.type === 'keyup' || e.type === 'change')
            CurrencyUtil.renderInput(priceInput);
        var priceNum = CurrencyUtil.currencyToFloat(priceInput.val());
        validateInput(/^[\d|,]*\.?\d*$/.test(priceInput.val()), priceInput);
        var pid = priceInput.closest('tr.data-row').data('pid');
        var anotherPriceInputs = $('#paf-item-table-body-lineitem' + group + ' tr.data-row').filter(function () {
            return $(this).data('pid') == pid;
        }).find('input[name="price"]');
        anotherPriceInputs.val(priceInput.val());
        anotherPriceInputs.change();
        for (var i = 1; i <= 5; i++) {
            changePrice(pid, i, priceInput.val());
        }
    }
    function changePrice(pid, group, price) {
        var tr = $('#' + productRowIdByPid(pid, true, group));
        var td = tr.find('td');
        if (td.length >= 5) {
            $(td[4]).html(price);
        }
        var tBody = $('#paf-item-table-body-lineitem' + group);
        tBody.find('tr.data-row').each(function () {
            var curRow = $(this);
            if (pid == curRow.data('pid')) {
                var priceInput = curRow.find('td.sf-td').eq(3).find('input');
                priceInput.val(price);
                calculateInvestmentValue(priceInput.closest('tr.data-row'));
                return;
            }
        });
    }
    function triggerQtyMasterChange(qtyInput) {
        calculateInvestmentValue(qtyInput.closest('tr.data-row'));
    }
    function triggerPriceMasterChange(priceInput) {
        calculateInvestmentValue(priceInput.closest('tr.data-row'));
    }
    
    /* Functions to find the IDs */
    
    function mechanicSelectIdByPid(pid, isSelectedTable) { return (isSelectedTable ? 'mechanic-select-' : 'mechanic-select2-') + pid; }
    function productRowIdByPid(pid, isSelectedTable, group) { return (isSelectedTable ? 'pd-selected-row' + group + '-' : 'pd-row-') + pid; }
    
    /* General Helper Functions */
    
    function dialogShow() {
        $('#dialogBG').show();
    }
    function dialogHide() {
        $('#dialogBG').hide();
    }
    
    // TODO: Display error messages
    function displayErrorMsg(errMsg) {
        dialogHide();
        alert(errMsg);
    }
    
    function clearErrorMsgs() {
        
    }
    
    function lineItemFromProductAndMechanic(product, mechanics, group) {
        if (product == null) {
            return [];
        }
        var perProductRow = $('#paf-item-table-body-per-product tr').filter(function () {
            var pid = $(this).data('pid');
            return pid && pid == product.id;
        }).first();
        
        var result = [];
        mechanics.forEach(function (mech) {
            result.push({
                "id": null
                , "skuId": product.id
                , "pricingItem": product.pricingItem
                , "skuBenchmark": product.benchmark
                , "mechanicId": mech ? mech.id : null
                , "mechanicLabel": mech ? mech.label : null
                , "mechanicBaseType": mech ? mech.baseType : 'other'
                , "mechanicCode": mech ? mech.code : null
                , "group": group
                , "qty": nullIfBlank(CurrencyUtil.currencyToFloat(perProductRow.find('input[name="quantity"]').val()))
                , "price": perProductRow.length > 0 ? nullIfBlank(CurrencyUtil.currencyToFloat(perProductRow.find('input[name="price"]').val())) : product.basePrice == null ? product.referencePrice : product.basePrice
                , "isPouring": product.pricingItem.indexOf('POUR') > -1 ? true : false
                , "investmentValue": null
                , "itemGroup": product.itemGroupName
                , "itemGroupId": product.itemGroupId
                , "referencePrice": product.referencePrice
            });
        });
        
        return result;
    }
    
    function addPidToSelectedMechanics(pid, mid) {
        if (pid && pid != '' && mid && mid != '') {
            var selectedMechanicIds = pidToSelectedMechanicsMap[pid];
            if (selectedMechanicIds == null || selectedMechanicIds.length == 0) {
                selectedMechanicIds = [];
                pidToSelectedMechanicsMap[pid] = selectedMechanicIds;
            }
            for (var i = 0; i < selectedMechanicIds.length; i++) {
                if (selectedMechanicIds[i] === mid)
                    return;
            }
            selectedMechanicIds.push(mid);
        }
    }
    function removePidToSelectedMechanics(pid, mid) {
        if (pid && pid != '') {
            var selectedMechanicIds = pidToSelectedMechanicsMap[pid];
            if (selectedMechanicIds && selectedMechanicIds.length > 0) {
                if (mid && mid != '' && mid != MID_NO_MECHANIC) {
                    var size = selectedMechanicIds.length;
                    for (var i = 0; i < size; i++) {
                        if (mid == selectedMechanicIds[i])
                            selectedMechanicIds.splice(i, 1);
                    }
                } else {
                    pidToSelectedMechanicsMap[pid] = [];
                }
            }
        }
    }
    
    function validateInput(isValid, theInput) {
        if (!isValid) theInput.addClass('error-input');
        else theInput.removeClass('error-input');
    }
    
    function nullIfBlank(val) {
        if (val) {
            if (typeof val === 'string' && val.length == 0)
                return null;
            return val;
        }
        return null
    }
    
    function sfStyleCell() {
        var c = document.createElement('TD');
        c.className = 'sf-td';
        return $(c);
    }
    
    function intNearestToZero(num) {
        if (num && typeof num === 'number') {
            var theInt = Math.floor(Math.abs(num));
            if (num < 0) theInt *= -1;
            return theInt;
        }
        return null;
    }
    
    function eTarget(e) { return e.target ? e.target : e.srcElement; }
    </script>
</apex:page>