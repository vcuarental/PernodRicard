<apex:page showHeader="false" controller="BMCServiceDesk.UrgencyController" standardStylesheets="false">
   <c:CommonIncludes />
<!-- <script type="text/javascript" src="{!$Resource.ExtJS}/ext-all-debug.js"></script> -->
 	<style>
 		.clsIdInputTextBox{
			*height:13px;
		}
 	</style>
 
    <script>
    
     var urgencyName;               
     var urgencyId;
     var errormsg;
     var chkBoxValue;
     var wid = '{!JSENCODE($CurrentPage.parameters.wid)}';
     var enablesavebtn = {!currentUserAdmin};
     var enablecopybtn = {!copybtnflag};
     var enabledeletebtn = {!deletebtnflag};
     var urgencyHeader = '{!JSENCODE($ObjectType.Urgency__c.label)}';
	 document.onclick = activateWindow; 
     function getWID(){
            return '{!JSENCODE($CurrentPage.parameters.wid)}';
     }
        /*
            Code for handling Data change on Page
            - START
        */
        var wid2 = '{!JSENCODE($CurrentPage.parameters.wid)}';
        var clickedOnce = false;  
        function handleChange(){
            if(!clickedOnce){
                clickedOnce = true;
                window.parent.registerChange(wid2);
            }
        }
	        
	    function handleResetChange(){
	    	if(clickedOnce){
               clickedOnce = false;
               window.parent.registerSave(wid2);
           }
	       }
	       
        
     	
    function callCopyPage(){
        window.parent.addTab("UrgencyPage?copyId=" + urgencyId,urgencyHeader,urgencyHeader);
    }
    
     function completeDelete(){
        if(errormsg == '{!JSENCODE($Label.InsufficentDeletePrivilege)}'){
            showError();
        }else{
            closeWindow();
        }
     }
     

        function closeWindow(){
                window.parent.refreshList();
                window.parent.closeTab(wid);
        }
        
        Ext.onReady(function(){
        Ext.QuickTips.init();
        if({!isRecDeleted}){
			Ext.Msg.alert('{!JSENCODE($Label.Information)}', '{!JSENCODE($Label.DeletedRecord)}', function(){
				if ((typeof(window.parent) != 'undefined') && (typeof(window.parent.popUpWindow) != 'undefined'))
					window.parent.popUpWindow.close();
					closeWindow();
			});
		}   
        
        // This function renders a block of buttons
        var NewBtnhandler = function(button,event) { activeAllWindowFlag=false;  openPage("UrgencyPage",urgencyHeader,urgencyHeader); };
        var SaveBtnHandler = function(button,event) {  
        Ext.getCmp('saveId').setDisabled(true);
        chkBoxValue=Ext.getCmp('idInactive').getValue();
        waitbox(0);
        save(chkBoxValue); };
        var CopyBtnHandler = function(button,event) {activeAllWindowFlag=false; callCopyPage(); };
       var DeleteBtnHandler = function(button,event) { 
                                                        
                                                        Ext.MessageBox.confirm('{!JSENCODE($Label.delete)}', '{!JSENCODE($Label.DeleteConfirmMessage)}', function(btn){
                                                            if(btn === 'yes'){
                                                               deleteUrgency();
                                                           }});
                                                                 };
       
        var ResetBtnHandler = function(button,event) {  resetUrgency(); 
       
         };
        var NextBtnHandler = function (button,event) { if(document.getElementById('nextId').disabled!=true) nextUrgencyBtnHandler1();};
        var PreviuosBtnHandler = function (button,event) { if(document.getElementById('prevId').disabled!=true) previousUrgencyBtnHandler1();};
        
          var SamplePanel = Ext.extend(Ext.Panel, {
            renderTo: 'btnToolbar',
            defaults: {bodyStyle:'border:0px;padding:0px;margin:0px;zoom:0px;'}
        });
        
        new SamplePanel({
            title: '',
            cls:'toolSpCls',
             bodyStyle:'border:0px;padding:0px;margin:0px;zoom:0px;',
            tbar: [ {
                scale: 'medium',
                iconCls: 'bmcNew',
                tooltipType : 'title',
               tooltip: '{!JSENCODE($Label.new)}',
               id:'newId',
               listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcNewOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcNew');          
                     }
                },               
                handler:NewBtnhandler
            } ,' ', {
                scale: 'medium',
                iconCls: 'bmcSave',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.save)}',
                id:'saveId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcSaveOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcSave');          
                     }
                },                
                handler:SaveBtnHandler
            },' ',{
                scale: 'medium',
                iconCls: 'bmcCopy',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.copy)}',
                id:'copyId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcCopyOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcCopy');          
                     }
                },                
                handler:CopyBtnHandler
                 },' ','-',' ',{
                scale: 'medium',
                iconCls: 'bmcDelete',
                tooltipType : 'title',
                tooltip: '{!JSENCODE($Label.delete)}',
                id:'deleteId',
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcDeleteOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcDelete');          
                     }
                },
                handler:DeleteBtnHandler
            },' ',{
                scale: 'medium',
                iconCls: 'bmcRefreshDasboard',
                tooltipType : 'title',
                 tooltip: '{!JSENCODE($Label.Refresh)}',
                id:'resetId',
                          
                handler:ResetBtnHandler
                       
                            
            },
            new Ext.Toolbar.Fill(), 
            {
                  id :'idInactive',
               xtype  : 'checkbox',
               width  : 93,
               align:'top',
               checked: false,
               boxLabel:'{!JSENCODE($ObjectType.Urgency__c.fields.inactive__c.label)}',
               cls:'chkStyle',
               boxLabel:'<span class="checkboxLabelCls">{!JSENCODE($ObjectType.Urgency__c.fields.inactive__c.label)}</span>',
               /*Modified to fix the tooltip bug*/
           	   listeners:{
                    render:function(){
                        Ext.QuickTips.register({
                            target:this,
                            text:'{!JSENCODE($ObjectType.Urgency__c.fields.inactive__c.label)}', 
                            dismissDelay: 20000
                        });
                    }               
               }/*Modification done*/              
            }, {
               
               
                 xtype : 'box',
		         id    : 'prevId',
                autoEl:  {tag: 'img', 
                          src:('{!$Resource.SDEFStyles}/SDEFbuttons/b_previous.gif'),   
                         title:'{!JSENCODE($Label.previousRecord)}'
                         },
                          
                cls:'cursorCls',
               listeners : { render: function(f){f.el.on('click', PreviuosBtnHandler);}}
                             
            },{
               
                xtype : 'box',
         		id    : 'nextId',
                autoEl:  {tag: 'img', 
                          src:'{!$Resource.SDEFStyles}/SDEFbuttons/b_next.gif',
                          title:'{!JSENCODE($Label.nextRecord)}' },
                cls:'cursorSpaceCls',
                listeners : { render: function(f){f.el.on('click', NextBtnHandler)}}
               
                
            }
            ] 
        });
        
        Ext.getCmp('idInactive').setValue('{!urgency.inactive__c}');
        urgencyId = '{!JSENCODE(urgency.Id)}';    
        if(urgencyId == null ||urgencyId == ''){                
        Ext.getCmp('deleteId').setDisabled(true);
		Ext.getCmp('deleteId').setIconClass('bmcDeleteDisable');
        Ext.getCmp('copyId').setDisabled(true);
        Ext.getCmp('resetId').setDisabled(true);
    	Ext.getCmp('prevId').setDisabled(true);
	    Ext.getCmp('nextId').setDisabled(true)
        document.getElementById('{!$Component.Urgency.Urgency_Id}').focus();
        }
       resetbuttonstatus();    
        handleElemEvent();
                
    });
    
    
        function buttonValidator() {
       
       if((urgencyName != null && urgencyName != '')&&(errormsg == null||errormsg ==''||errormsg=='{!JSENCODE($Label.savedSuccessfully)}')){   
  		Ext.getCmp('deleteId').setDisabled(false);
		Ext.getCmp('deleteId').setIconClass('bmcDelete');
        Ext.getCmp('copyId').setDisabled(false);
        Ext.getCmp('resetId').setDisabled(false);
        
       }  
     }
     
     var UrgencyIdSet;
	if(UrgencyIdSet == null || UrgencyIdSet == ''){
		if('{!JSENCODE($CurrentPage.parameters.isDirect)}' == ''){
			if(typeof(window.parent.returnListOfId)=='function')
				UrgencyIdSet=window.parent.returnListOfId();
	}else{
		if(typeof(window.parent.parent.getIdArray)=='function')
			UrgencyIdSet=window.parent.parent.getIdArray();
			window.parent.handleSave('{!JSENCODE($CurrentPage.parameters.wid)}','{!JSENCODE($CurrentPage.parameters.id)}');
		}
	}
	function resetbuttonstatus()
    {
    	
    	if(!enablesavebtn)
        {
           Ext.getCmp('saveId').setDisabled(true);
             
        }
        if(!enablecopybtn)
        {
        	Ext.getCmp('newId').setDisabled(true);
        	Ext.getCmp('copyId').setDisabled(true);
        }
        if(!enabledeletebtn)
        {
        	 Ext.getCmp('deleteId').setDisabled(true);
             Ext.getCmp('deleteId').setIconClass('bmcDeleteDisable');
        }   
    }
        function previousUrgencyBtnHandler1(){
            var idSetString='';
            var i=0;
            while(UrgencyIdSet.length > i){
                if(idSetString==''){
                    idSetString=UrgencyIdSet[i];
                }else{
                    idSetString=idSetString+','+UrgencyIdSet[i];
                }
                i++;
            }
            previousUrgencyBtnHandler(idSetString);
        
        }

       function nextUrgencyBtnHandler1(){
            var idSetString='';
            var i=0;
            while(UrgencyIdSet.length > i){
                if(idSetString==''){
                    idSetString=UrgencyIdSet[i];
                }else{
                    idSetString=idSetString+','+UrgencyIdSet[i];
                }
                i++;
            }
            nextUrgencyBtnHandler(idSetString);
        
        } 
     
    </script>
   
    
    <apex:outputPanel id="panelId">
        <script>
        
           urgencyName = '{!JSENCODE(urgency.name)}';               
           urgencyId = '{!JSENCODE(urgency.Id)}';      
        
        </script>
        </apex:outputPanel>
        
        <apex:outputPanel id="errorId">
        <script>
        
           errormsg = '{!JSENCODE(messageString)}';               
                
        
        </script>
        </apex:outputPanel>
      <apex:outputPanel id="afterSavePanel">
        <script>
           function handleSave(){
               var id = "{!JSENCODE(urgency.Id)}";
            window.parent.handleSave(wid, id);
        }
         function updateTitle(){
            var newTitle= "{!JSENCODE(urgency.name)}";
            if(newTitle != ""){		    				
                window.parent.changeTitle(wid,newTitle,urgencyHeader); 
            }   
         } 
    		
    		function enableSaveButton() {
        		Ext.getCmp('saveId').setDisabled(false);
      		} 
      		 enablesavebtn={!currentUserAdmin};
     		  enablecopybtn = {!copybtnflag};
              enabledeletebtn = {!deletebtnflag};
        </script>
     </apex:outputPanel>
      <apex:outputPanel id="titlePanel">
            <script>
                function updateList(){
                    window.parent.refreshList();
                }
        
        </script>
    </apex:outputPanel>    
    
      <apex:outputPanel id="inactivePanel">
        <script>
        function updateInactive(){
        Ext.getCmp('idInactive').setValue('{!urgency.inactive__c}');
        }
        </script>
       </apex:outputPanel>
    
    <apex:outputPanel >
    <apex:form id="Urgency">
     <c:ValidationComponent errorMsgList="{!messageString}" id="validationComponent"></c:ValidationComponent>
     <apex:actionFunction action="{!save}" name="save" reRender="validationComponent,panelId,errorId,afterSavePanel" oncomplete="waitMsg.hide();showError();buttonValidator();updateList();handleElemEvent();handleSave();updateTitle();enableSaveButton();resetbuttonstatus();">
       <apex:param assignTo="{!chkBoxValue}" name="idSetString" value=""/> 
                 </apex:actionFunction>
     <apex:actionFunction action="{!newUrgency}" name="newUrgency"/>
      <apex:actionFunction action="{!reset}" name="resetUrgency" rerender="tablePanel,inactivePanel,afterSavePanel" oncomplete="updateInactive();handleResetChange();handleElemEvent();"/>
     <apex:actionFunction action="{!deleteUrgency}" name="deleteUrgency" onComplete="completeDelete();" rerender="errorId,validationComponent"/>
    <apex:actionFunction action="{!nextBtnHandler}" name="nextUrgencyBtnHandler" 
                                    rerender="tablePanel,inactivePanel,afterSavePanel" oncomplete="updateInactive();handleResetChange();handleElemEvent();updateTitle();">  
                                    <apex:param assignTo="{!tempString}" name="idSetString" value=""/>
     </apex:actionFunction>
     <apex:actionFunction action="{!previousBtnHandler}" name="previousUrgencyBtnHandler" 
                                    rerender="tablePanel,inactivePanel,afterSavePanel" oncomplete="updateInactive();handleResetChange();handleElemEvent();updateTitle();"> 
                                    <apex:param assignTo="{!tempString}" name="idSetString" value=""/>
     </apex:actionFunction>
     
     
     <div id="capsule" class="CapsuleDiv1">
        <table class="clsMainTable" cellspacing="0" cellpadding="0">
                <tr class="clsRowGreyBg">
                    <td>
                        <div id="btnToolbar"></div>
                     </td>
                 </tr>
                 <tr>
                                 <td class="clsTopAlignment75">
                  
                    <apex:outputPanel id="tablePanel">
                       <table class="clsTable" cellspacing="0" cellpadding="0">
                            <tr>
                                <td colspan="2"><div class="div15pxVspacing"/></td>
                            </tr> 
                            <tr>
                                                 <td class="clsInputLabelTD"> 

                                                        <apex:outputLabel value="{!$ObjectType.BMCServiceDesk__Urgency__c.fields.Name.label}"/><span class="clsRequiredBlack">&nbsp;*</span>
                                </td>
                                                 <td >
                                    <apex:inputText title="{!$Label.bmcservicedesk__tooltipurgencyurgencyid}" id="Urgency_Id" value="{!urgency.name}" styleClass="clsIdInputTextBox"/>
                                </td>
                            </tr>
                        </table>
                       
                          
                        </apex:outputPanel>
                      </td>
                   </tr>
                   <tr class="clsRowGreyBg" valign="middle" width="5%">
                   <td valign="middle" style="width: 100%">
                        <table border="0" cellpadding="0" cellspacing="0" width="100%">
                            <tr>
                                <td>
                                    &nbsp;
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>   
         </div>                
    </apex:form>                           
    </apex:outputPanel>
</apex:page>