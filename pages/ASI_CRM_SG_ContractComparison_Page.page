<!--
*********************************************************************************
 * Name: ASI_CRM_SG_ContractComparison_Page
 * Description: Compare the different contract records 
 *
 * Version History
 * Date             Developer               Comments
 * ---------------  --------------------    --------------------------------------------------------------------------------
 * 06/02/2017       Hugo Cheung             Created    
 * 13/11/2017       Jeffrey Cheung          Hide things when showComparison=true
-->
<apex:page controller="ASI_CRM_SG_ContractComparison_Controller" sidebar="false">
<head>
<title>Contract Comparison Page</title>
</head>

    <!-- Import Library -->
    <!-- CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/styles/main.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/styles/jquery-ui.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/styles/bootstrap.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/styles/datatables.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/styles/multiple-select.css')}" />
    <!-- JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/bootstrap.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/datatables.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/vertical-datatables.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/jquery.knob.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/multiple-select.js')}" />
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    
    <!-- Style -->
    <style>
        .savingRecord .fullScreenLoading{
            display : block;
        }

        .fullScreenLoading {
            display    : none;
            position   : fixed;
            z-index    : 1000;
            top        : 0;
            left       : 0;
            height     : 100%;
            width      : 100%;
            background : rgba( 255, 255, 255, .8 ) 
                         url('{!URLFOR($Resource.ASI_CRM_SG_Library, '/images/loading.gif')}')  
                         50% 50% 
                         no-repeat;
        }

        th, td {
                padding-top    : 5px;
                padding-bottom : 5px;
                padding-right  : 10px;
                padding-left   : 10px;
				vertical-align : middle;
            }
            
        table { 
            table-layout : fixed; 
        }
        
        <!-- Datatable Styling -->
        table.dataTable td {
            height : 30px;
        }
        
        table.dataTable thead tr {
            background-color : #cce6ff;
        }
    
        table.dataTable tbody tr { 
            background-color : #e6f3ff; 
        }
        
        table.dataTable tbody tr:nth-child(even) {
            background-color : white;  
        }
        
        table.dataTable td { 
            border-bottom : 2px solid #e0e0d1; 
        }
        
        <!-- Vertical Datatable Styling -->
        table.verticalDataTable .dataTableHeader,
        table.verticalDataTable .dataTableSubHeader {
			background-color : #cce6ff;
            border-right     : 2px solid #e0e0d1;
            font-weight      : bold;
        }
        
        table.verticalDataTable .dataTableSubHeader {
            border-top      : 2px solid #e0e0d1;
            text-decoration : underline;
        }
    
        table .verticalDataTable .dataTableBody {
            border-right : 2px solid #e0e0d1;
        }
        
        table.verticalDataTable .dataTableBody.odd {
        	background-color : #e6f3ff;
        }
        
        table.verticalDataTable .dataTableBody.even {
            background-color : white;  
        }
        
        table.verticalDataTable .numberTableColumn {
            text-align : right;
        }
        
        table.verticalDataTable .dataTableItemHeader {
        	padding-left : 30px;
            font-weight  : normal;
        }
        
        table.verticalDataTable .dataTableItemHeaderWithBold {
        	padding-left : 30px;
        }

        table.verticalDataTable .dataTableBody .textGreen {
            color: green;
        }

        table.verticalDataTable .dataTableBody .textRed {
            color: red;
        }
		
		table.verticalDataTable .dataTableBody.oddodd {
			background-color : #e6f3ff;
		}

		table.verticalDataTable .dataTableBody.oddeven {
			background-color : #ECF6FF;  
		}
		
		table.verticalDataTable .dataTableBody.evenodd {
			background-color : #F8FFE6;
		}

		table.verticalDataTable .dataTableBody.eveneven {
			background-color : #FAFFEE;  
		}
		
		table.verticalDataTable .numberTableColumn {
			text-align : right;
		}

        
    </style>

    <script>
        /*****************
        VF Page Config
        *****************/
    const CONST_DATA_TABLE_PROPERTIES = {
            "bDestroy":true,
            "bStateSave":true,
            "bSearch":false,
            "bFilter" : true,
            "aLengthMenu":[10,25,50],
            "iDisplayLength":10,
            "bSort" : false,
            "bPaginate": true,
            "bScrollCollapse": true,
            "bJQueryUI": false
        };

        const MAX_CONTRACT_SELECTION_LIMIT = 4;

       const BASE_CONTRACT_DOES_NOT_INSIDE_SELECTED_CONTRACT = 'Base contract does not included in selected contract records and selected contract records reach the limit (' + MAX_CONTRACT_SELECTION_LIMIT + ')';
       const SELECTED_CONTRACT_OVER_LIMIT                    = 'The selected contract records reach the limit (' + MAX_CONTRACT_SELECTION_LIMIT + ')';
       const BASE_CONTRACT_MUST_BE_SELECTED                  = 'The base contract must be selected before compare';
       const SELECTED_CONTRACT_MUST_MORE_THAN_ONE            = 'Please select at least two contracts to compare';
       const SEARCH_ERROR                  					 = 'Please input From, To Date and the Status before search';
       const DUPLICATION_ERROR                  			 = 'You have already selected this contract / proposal';

    /*****************
        Datatable Field Config
        *****************/
        const deleteContractToCompare   = {"title"          : "Delete", 
											"data"           : "",
											"render"         : function(data, type, full) {
																	return "<a class='link-button' value='" + full.Id + "' onClick='deleteContract(this, this.value)'>Delete</a>";  
															}
									};
									
        const selectContractToCompare   = {"title"          : "Select", 
											 "data"           : "",
											 "render"         : function(data, type, full) {
																	return "<a class='link-button' onClick='addContract(this.parentNode.parentNode)'>Select</a>";  
															  }
									};
									
        const isBaseContract   = {"title"  : "As Base Contract",
                                  "data"   : "",
                                  "render" : function(data, type, full) {
                                           return "<input type='radio' name='baseContract' class='baseContract' value='" + full.Id + 
                                                  "' onChange='selectBaseContract(this, this.value)'>";
                                             }
                                  };

        const selectedContract = {"title"  : "Select",
                                  "data"   : "",
                                  "render" : function(data, type, full) {
                                             return "<input type='checkbox' name='isSelected' class='selectContract' value='" + full.Id + 
                                                    "' onChange='selectContract(this, this.value)'>";  
                                             }
                                 };

        const contractNo       = {"title"          : "Contractt No.",
                                  "data"           : "Name",
                                  "defaultContent" : ""
                                  };

        const outletName       = {"title"          : "Outlet",
                                  "data"           : "ASI_CRM_CN_Outlet_WS__r.Name",
                                  "defaultContent" : ""
                                  };

        const ownerName        = {"title"          : "Owner",
                                  "data"           : "Owner.Name",
                                  "defaultContent" : ""
                                  };

        const sectorCode       = {"title"          : "Sector Code",
                                  "data"           : "ASI_CRM_CN_Outlet_WS__r.ASI_CRM_SG_Category_Code_13__c",
                                  "defaultContent" : ""
                                  };

        const status           = {"title"          : "Status",
                                  "data"           : "ASI_TH_CRM_Contract_Status__c",
                                  "defaultContent" : ""
                                  };
								  
        const startDate        = {"title"          : "Start Date",
                                  "data"           : "ASI_TH_CRM_Start_Date__c",
                                  "defaultContent" : ""
                                  };
								  
        const endDate          = {"title"          : "End Date",
                                  "data"           : "ASI_TH_CRM_End_Date__c",
                                  "defaultContent" : ""
                                  };

        /*****************
        Vertical Datatable Field Config
        *****************/
        //Header
        const outlet                         = {"title"           : "Outlet : ",
                                                "data"            : ["outlet"],
                                                "defaultContent"  : [""],
                                                "colspan"         : [3]
                                               };
        
        const contractNoForVerticalDataTable = {"title"           : "Contract No. : ",
                                                "data"            : ["contractNo"],
                                                "defaultContent"  : [""],
                                                "colspan"         : [3]
                                               };
        
        const contractPeriod                 = {"title"           : "Contract Period : ",
                                                "data"            : ["contractPeriod"],
                                                "defaultContent"  : [""],
                                                "colspan"         : [3]
                                               };
        
        const sectorCodeDetail               = {"title"           : "Sector Code : ",
                                                "data"            : ["sectorCodeDetail"],
                                                "defaultContent"  : [""],
                                                "colspan"         : [3]
                                               };
        
        const statusDetail                   = {"title"           : "Status : ",
                                                "data"            : ["statusDetail"],
                                                "defaultContent"  : [""],
                                                "colspan"         : [3]
                                               };
		
        const gaugeChart                     = {"title"           : "",
                                                "render"          : [function(data, type, full) {
                                                    					var salesValue             = (full.salesVolPerformance 
                                                                                                     / (full.salesVol == 0 ? 1 : full.salesVol)) 
                                                                                                     * 100;
                                                                        var allowancesAndDiscounts = (full.allowancesAndDiscountsPerformance 
                                                                                                      / (full.allowancesAndDiscounts == 0 ? 1 : full.allowancesAndDiscounts)) 
                                                                                                      * 100;
                                                                       	var netSales               = (full.netSalesPerformance 
                                                                                                      / (full.netSales == 0 ? 1 : full.netSales)) 
                                                                                                      * 100;
                                                                       	var grossMargin            = (full.grossMarginPerformance 
                                                                                                      / (full.grossMargin == 0 ? 1 : full.grossMargin)) 
                                                                                                      * 100;
                                                    					
                                                    					salesValue             = salesValue < 0 ? 0 : salesValue > 100 ? 100 : salesValue.toFixed(2);
                                                    					allowancesAndDiscounts = allowancesAndDiscounts < 0 ? 0 : allowancesAndDiscounts > 100 ? 100 : allowancesAndDiscounts.toFixed(2);
                                                    					netSales               = netSales < 0 ? 0 : netSales > 100 ? 100 : netSales.toFixed(2);
                                                    					grossMargin            = grossMargin < 0 ? 0 : grossMargin > 100 ? 100 : grossMargin.toFixed(2);
                                                    
                                                    					var chartDivIdList = [];
                                                    					var tableStr = "<table>";
                                                                        tableStr += "<tr>";
                                                    					tableStr += "<td align='center'>Sales</td>";
                                                    					tableStr += "<td align='center'>Allowances & Discounts</td>";
                                                    					tableStr += "</tr>";
                                                    					tableStr += "<tr>";
                                                    					tableStr += "<td><input type='text' class='chart' data-min='0' data-max='100' data-bgColor='#5f6672' data-angleOffset='-90' data-angleArc='180' readOnly='true' data-width='120' data-height='120' value='" + salesValue + "'></td>";
                                                    					tableStr += "<td><input type='text' class='chart' data-min='0' data-max='100' data-bgColor='#5f6672' data-angleOffset='-90' data-angleArc='180' readOnly='true' data-width='120' data-height='120' value='" + allowancesAndDiscounts + "'></td>";
                                                    					tableStr += "</tr>";
                                                                        tableStr += "<tr>";
                                                    					tableStr += "<td align='center'>Net Sales</td>";
                                                                        tableStr += "<td align='center'>Gross Margin</td>";
                                                    					tableStr += "</tr>";
                                                    					tableStr += "<tr>";
                                                    					tableStr += "<td><input type='text' class='chart' data-min='0' data-max='100' data-bgColor='#5f6672' data-angleOffset='-90' data-angleArc='180' readOnly='true' data-width='120' data-height='120' value='" + netSales + "'></td>";
                                                    					tableStr += "<td><input type='text' class='chart' data-min='0' data-max='100' data-bgColor='#5f6672' data-angleOffset='-90' data-angleArc='180' readOnly='true' data-width='120' data-height='120' value='" + grossMargin + "'></td>";
                                                    					tableStr += "</tr>";
                                                                        tableStr += "<tr>";
                                                    					tableStr += "<td align='center' colspan='2'><b>% of Actual vs Target</b></td>";
                                                    					tableStr += "</tr>";
                                                    					tableStr += "</table>";
                                                    					return tableStr;
                                                                     }],
                                                "colspan"         : [3]
                                               };
        
        //Detail
        const emptyRow                       = {"title"           : "",
                                                "numberOfRows"    : 3
                                               };
        
        const subtitle                       = {"title"           : ".",
                                                "subtitle"        : ["Contract (9L)", "Achievement (9L)", "DTG"],
                                                "numberOfRows"    : 3
                                               };
        
        const subtitleRepeat                 = {"title"           : ".",
                                                "subtitle"        : ["Contract ($)", "Achievement ($)", "DTG"],
                                                "numberOfRows"    : 3
                                               };
        
        const vol                            = {"title"            : "Vol(9Lc) (Variance vs Base Contract)",
                                                "headerStyleClass" : "",
                                                "defaultContent"   : ["", "", ""],
                                                "numberOfRows"     : 3
                                               };
        
        const salesVol                       = {"title"            : "Sales",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["salesVol", "salesVolPerformance", "salesVolDTG"],
                                                "defaultContent"   : ["0", "0", "0"],
                                                "render"           : [function(data, type, full) {
                                                                        var salesVolBaseContract = baseContract.salesVol;
                                                                        var diff = '<div class=\'';
                                                                        if(salesVolBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (salesVolBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - salesVolBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 0});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 0}) + '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var salesVolPerformanceBaseContract = baseContract.salesVolPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(salesVolPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (salesVolPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - salesVolPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 0});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 0}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var salesVolDTGBaseContract = baseContract.salesVolDTG;
                                                                        var diff = '<div class=\'';
                                                                        if(salesVolDTGBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (salesVolDTGBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - salesVolDTGBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 0});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 0}) +  '<br />' + diff;
                                                                      }
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const focVol                         = {"title"            : "FOC",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["focVol", "focVolPerformance", "focVolDTG"],
                                                "defaultContent"   : ["0", "0", "0"],
                                                "render"           : [function(data, type, full) {
                                                    					var focVolBaseContract = baseContract.focVol;
                                                    					var diff = '<div class=\'';
                                                    					if(focVolBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (focVolBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - focVolBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                    					diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                    					return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var focVolPerformanceBaseContract = baseContract.focVolPerformance;
                                                    					var diff = '<div class=\'';
                                                    					if(focVolPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (focVolPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - focVolPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                    					diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                    					return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                      	var focVolDTGBaseContract = baseContract.focVolDTG;
                                                    					var diff = '<div class=\'';
                                                    					if(focVolDTGBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (focVolDTGBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - focVolDTGBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                    					diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                    					return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      }
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const focRatioVol                    = {"title"            : "FOC Ratio",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["focRatioVol", "focRatioVolPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var focRatioVolBaseContract = baseContract.focRatioVol;
                                                                        var diff = '<div class=\'';
                                                                        if(focRatioVolBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (focRatioVolBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - focRatioVolBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var focRatioVolPerformanceBaseContract = baseContract.focRatioVolPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(focRatioVolPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (focRatioVolPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - focRatioVolPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const grossSales                     = {"title"            : "Gross Sales ($'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["grossSales", "grossSalesPerformance", "grossSalesDTG"],
                                                "defaultContent"   : ["0", "0", "0"],
                                                "render"           : [function(data, type, full) {
                                                                        var grossSalesBaseContract = baseContract.grossSales;
                                                                        var diff = '<div class=\'';
                                                                        if(grossSalesBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (grossSalesBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - grossSalesBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var grossSalesPerformanceBaseContract = baseContract.grossSalesPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(grossSalesPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (grossSalesPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - grossSalesPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var grossSalesDTGBaseContract = baseContract.grossSalesDTG;
                                                                        var diff = '<div class=\'';
                                                                        if(grossSalesDTGBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (grossSalesDTGBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - grossSalesDTGBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      }
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const freeGoods                      = {"title"            : "Free Goods",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["freeGoods", "freeGoodsPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var freeGoodsBaseContract = baseContract.freeGoods;
                                                                        var diff = '<div class=\'';
                                                                        if(freeGoodsBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (freeGoodsBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - freeGoodsBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var freeGoodsPerformanceBaseContract = baseContract.freeGoodsPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(freeGoodsPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (freeGoodsPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - freeGoodsPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                              };
        
        const freeGoodsAdhoc                 = {"title"            : "Free Goods (Ad-hoc)",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["", "freeGoodsAdhocPerformance", ""],
                                                "defaultContent"   : ["N.A.", "0", ""],
                                                "render"           : [null,
                                                                      function(data, type, full) {
                                                                        var freeGoodsAdhocPerformanceBaseContract = baseContract.freeGoodsAdhocPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(freeGoodsAdhocPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (freeGoodsAdhocPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - freeGoodsAdhocPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const contractMarginPriceOverwrite   = {"title"            : "Contract Margin / Price Overwrite",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["contractMarginAndPriceOverwrite", "contractMarginAndPriceOverwritePerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var contractMarginAndPriceOverwriteBaseContract = baseContract.contractMarginAndPriceOverwrite;
                                                                        var diff = '<div class=\'';
                                                                        if(contractMarginAndPriceOverwriteBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (contractMarginAndPriceOverwriteBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - contractMarginAndPriceOverwriteBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var contractMarginAndPriceOverwritePerformanceBaseContract = baseContract.contractMarginAndPriceOverwritePerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(contractMarginAndPriceOverwritePerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (contractMarginAndPriceOverwritePerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - contractMarginAndPriceOverwritePerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                              };
        
        const wholesalerMargin   = 			   {"title"            : "Wholesaler Margin",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["wholesalerMargin", "wholesalerMarginPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var wholesalerMarginBaseContract = baseContract.wholesalerMargin;
                                                                        var diff = '<div class=\'';
                                                                        if(wholesalerMarginBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (wholesalerMarginBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - wholesalerMarginBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var wholesalerMarginPerformanceBaseContract = baseContract.wholesalerMarginPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(wholesalerMarginPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (wholesalerMarginPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - wholesalerMarginPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                              };
        
        const bottleIncentive                = {"title"            : "Bottle Incentive / Back Rebates",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["bottleIncentive", "bottleIncentivePerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var bottleIncentiveBaseContract = baseContract.bottleIncentive;
                                                                        var diff = '<div class=\'';
                                                                        if(bottleIncentiveBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (bottleIncentiveBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - bottleIncentiveBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var bottleIncentivePerformanceBaseContract = baseContract.bottleIncentivePerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(bottleIncentivePerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (bottleIncentivePerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - bottleIncentivePerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const cashSponsorship                = {"title"            : "Cash Sponsorship",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["cashSponsorship", "cashSponsorshipPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var cashSponsorshipBaseContract = baseContract.cashSponsorship;
                                                                        var diff = '<div class=\'';
                                                                        if(cashSponsorshipBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (cashSponsorshipBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - cashSponsorshipBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var cashSponsorshipPerformanceBaseContract = baseContract.cashSponsorshipPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(cashSponsorshipPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (cashSponsorshipPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - cashSponsorshipPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const allowancesAndDiscounts         = {"title"            : "Total Allowances & Discounts",
                                                "headerStyleClass" : "dataTableItemHeaderWithBold",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["allowancesAndDiscounts", "allowancesAndDiscountsPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var allowancesAndDiscountsBaseContract = baseContract.allowancesAndDiscounts;
                                                                        var diff = '<div class=\'';
                                                                        if(allowancesAndDiscountsBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (allowancesAndDiscountsBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - allowancesAndDiscountsBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var allowancesAndDiscountsPerformanceBaseContract = baseContract.allowancesAndDiscountsPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(allowancesAndDiscountsPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (allowancesAndDiscountsPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - allowancesAndDiscountsPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               }; 
        
        const netSales                       = {"title"            : "Net Sales ($'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["netSales", "netSalesPerformance", "netSalesDTG"],
                                                "defaultContent"   : ["0", "0", "0"],
                                                "render"           : [function(data, type, full) {
                                                                        var netSalesBaseContract = baseContract.netSales;
                                                                        var diff = '<div class=\'';
                                                                        if(netSalesBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (netSalesBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - netSalesBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var netSalesPerformanceBaseContract = baseContract.netSalesPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(netSalesPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (netSalesPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - netSalesPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var netSalesDTGBaseContract = baseContract.netSalesDTG;
                                                                        var diff = '<div class=\'';
                                                                        if(netSalesDTGBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (netSalesDTGBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - netSalesDTGBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      }
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const duty                           = {"title"            : "Duty",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["duty", "dutyPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var dutyBaseContract = baseContract.duty;
                                                                        var diff = '<div class=\'';
                                                                        if(dutyBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (dutyBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - dutyBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var dutyPerformanceBaseContract = baseContract.dutyPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(dutyPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (dutyPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - dutyPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const fobHandlingCost                = {"title"            : "FOB + Handling Cost",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["fobHandlingCost", "fobHandlingCostPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var fobHandlingCostBaseContract = baseContract.fobHandlingCost;
                                                                        var diff = '<div class=\'';
                                                                        if(fobHandlingCostBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (fobHandlingCostBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - fobHandlingCostBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var fobHandlingCostPerformanceBaseContract = baseContract.fobHandlingCostPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(fobHandlingCostPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (fobHandlingCostPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - fobHandlingCostPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const distributionCost               = {"title"            : "Distribution Cost",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["distributionCost", "distributionCostPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var distributionCostBaseContract = baseContract.distributionCost;
                                                                        var diff = '<div class=\'';
                                                                        if(distributionCostBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (distributionCostBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - distributionCostBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var distributionCostPerformanceBaseContract = baseContract.distributionCostPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(distributionCostPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (distributionCostPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - distributionCostPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const costOfSales                    = {"title"            : "Total Cost of Sales",
                                                "headerStyleClass" : "dataTableItemHeaderWithBold",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["costOfSales", "costOfSalesPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var costOfSalesBaseContract = baseContract.costOfSales;
                                                                        var diff = '<div class=\'';
                                                                        if(costOfSalesBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (costOfSalesBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - costOfSalesBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var costOfSalesPerformanceBaseContract = baseContract.costOfSalesPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(costOfSalesPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (costOfSalesPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - costOfSalesPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               }; 
        
        const grossMargin                    = {"title"            : "Gross Margin ($'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["grossMargin", "grossMarginPerformance", "grossMarginDTG"],
                                                "defaultContent"   : ["0", "0", "0"],
                                                "render"           : [function(data, type, full) {
                                                                        var grossMarginBaseContract = baseContract.grossMargin;
                                                                        var diff = '<div class=\'';
                                                                        if(grossMarginBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (grossMarginBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - grossMarginBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var grossMarginPerformanceBaseContract = baseContract.grossMarginPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(grossMarginPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (grossMarginPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - grossMarginPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var grossMarginDTGBaseContract = baseContract.grossMarginDTG;
                                                                        var diff = '<div class=\'';
                                                                        if(grossMarginDTGBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (grossMarginDTGBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - grossMarginDTGBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      }
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const tradeAPExpenses                = {"title"            : "Trade A&P Expenses",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["tradeAPExpenses", "tradeAPExpensesPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var tradeAPExpensesBaseContract = baseContract.tradeAPExpenses;
                                                                        var diff = '<div class=\'';
                                                                        if(tradeAPExpensesBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (tradeAPExpensesBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - tradeAPExpensesBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var tradeAPExpensesPerformanceBaseContract = baseContract.tradeAPExpensesPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(tradeAPExpensesPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (tradeAPExpensesPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - tradeAPExpensesPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const marketingSupport               = {"title"            : "Marketing Support",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["marketingSupport", "N.A.", ""],
                                                "defaultContent"   : ["0", "", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var marketingSupportBaseContract = baseContract.marketingSupport;
                                                                        var diff = '<div class=\'';
                                                                        if(marketingSupportBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (marketingSupportBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - marketingSupportBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null,
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const salesSupport                   = {"title"            : "Sales Support",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["", "salesSupportPerformance", ""],
                                                "defaultContent"   : ["N.A.", "0", ""],
                                                "render"           : [null,
                                                                      function(data, type, full) {
                                                                        var salesSupportPerformanceBaseContract = baseContract.salesSupportPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(salesSupportPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (salesSupportPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - salesSupportPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const roi                            = {"title"            : "Return On Investment ($'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["roi", "roiPerformance", "roiDTG"],
                                                "defaultContent"   : ["0", "0", "0"],
                                                "render"           : [function(data, type, full) {
                                                                        var roiBaseContract = baseContract.roi;
                                                                        var diff = '<div class=\'';
                                                                        if(roiBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var roiPerformanceBaseContract = baseContract.roiPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(roiPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var roiDTGBaseContract = baseContract.roiDTG;
                                                                        var diff = '<div class=\'';
                                                                        if(roiDTGBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiDTGBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiDTGBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      }
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const roiCurrency                    = {"title"            : "ROI (S$'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["roiCurrency", "roiCurrencyPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var roiCurrencyBaseContract = baseContract.roiCurrency;
                                                                        var diff = '<div class=\'';
                                                                        if(roiCurrencyBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiCurrencyBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiCurrencyBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var roiCurrencyPerformanceBaseContract = baseContract.roiCurrencyPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(roiCurrencyPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiCurrencyPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiCurrencyPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const roiPercentage                  = {"title"            : "ROI (%)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["roiPercentage", "roiPercentagePerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var roiPercentageBaseContract = baseContract.roiPercentage;
                                                                        var diff = '<div class=\'';
                                                                        if(roiPercentageBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiPercentageBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiPercentageBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var roiPercentagePerformanceBaseContract = baseContract.roiPercentagePerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(roiPercentagePerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiPercentagePerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiPercentagePerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const additionalDirectCost           = {"title"            : "Additional Direct Cost",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["", "", ""],
                                                "defaultContent"   : ["", "", ""],
                                                "render"           : [null, null, null],
                                                "numberOfRows"     : 3
                                               };
        
        const promptPayment                  = {"title"            : "Prompt Payment",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["promptPayment", "promptPaymentPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var promptPaymentBaseContract = baseContract.promptPayment;
                                                                        var diff = '<div class=\'';
                                                                        if(promptPaymentBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (promptPaymentBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - promptPaymentBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var promptPaymentPerformanceBaseContract = baseContract.promptPaymentPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(promptPaymentPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (promptPaymentPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - promptPaymentPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const blindBonus                     = {"title"            : "Blind Bonus",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["blindBonus", "blindBonusPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var blindBonusBaseContract = baseContract.blindBonus;
                                                                        var diff = '<div class=\'';
                                                                        if(blindBonusBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (blindBonusBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - blindBonusBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var blindBonusPerformanceBaseContract = baseContract.blindBonusPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(blindBonusPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (blindBonusPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - blindBonusPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const tneMarketVisitOwner            = {"title"            : "T&E Market Visit (account owner)",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["", "tneMarketVisitOwner", ""],
                                                "defaultContent"   : ["N.A.", "0", ""],
                                                "render"           : [null,
                                                                      function(data, type, full) {
                                                                        var tneMarketVisitOwnerBaseContract = baseContract.tneMarketVisitOwner;
                                                                        var diff = '<div class=\'';
                                                                        if(tneMarketVisitOwnerBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (tneMarketVisitOwnerBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - tneMarketVisitOwnerBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const tneMarketVisitOthers           = {"title"            : "T&E Market Visit (others)",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["", "tneMarketVisitOthers", ""],
                                                "defaultContent"   : ["N.A.", "0", ""],
                                                "render"           : [null,
                                                                      function(data, type, full) {
                                                                        var tneMarketVisitOthersBaseContract = baseContract.tneMarketVisitOthers;
                                                                        var diff = '<div class=\'';
                                                                        if(tneMarketVisitOthersBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (tneMarketVisitOthersBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - tneMarketVisitOthersBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const brandEventHeld                 = {"title"            : "Brand Event Held",
                                                "headerStyleClass" : "dataTableItemHeader",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["", "brandEventHeld", ""],
                                                "defaultContent"   : ["N.A.", "0", ""],
                                                "render"           : [null,
                                                                      function(data, type, full) {
                                                                        var brandEventHeldBaseContract = baseContract.brandEventHeld;
                                                                        var diff = '<div class=\'';
                                                                        if(brandEventHeldBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (brandEventHeldBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - brandEventHeldBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        
        const subtotalForAdditionalCost      = {"title"            : "Subtotal for the Additional Direct Cost ($'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["subtotalForAdditionalCost", "subtotalForAdditionalCostPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var subtotalForAdditionalCostBaseContract = baseContract.subtotalForAdditionalCost;
                                                                        var diff = '<div class=\'';
                                                                        if(subtotalForAdditionalCostBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (subtotalForAdditionalCostBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - subtotalForAdditionalCostBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var subtotalForAdditionalCostPerformanceBaseContract = baseContract.subtotalForAdditionalCostPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(subtotalForAdditionalCostPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (subtotalForAdditionalCostPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - subtotalForAdditionalCostPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
																	  null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const roiAfterAdditionalCost         = {"title"            : "ROI after Additional Direct Cost ($'000)",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["roiAfterAdditionalCost", "roiAfterAdditionalCostPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var roiAfterAdditionalCostBaseContract = baseContract.roiAfterAdditionalCost;
                                                                        var diff = '<div class=\'';
                                                                        if(roiAfterAdditionalCostBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiAfterAdditionalCostBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiAfterAdditionalCostBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var roiAfterAdditionalCostPerformanceBaseContract = baseContract.roiAfterAdditionalCostPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(roiAfterAdditionalCostPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiAfterAdditionalCostPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiAfterAdditionalCostPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        const roiPercentAfterAdditionalCost  = {"title"            : "ROI % after Additional Direct Cost",
                                                "dataStyleClass"   : "numberTableColumn", 
                                                "data"             : ["roiPercentAfterAdditionalCost", "roiPercentAfterAdditionalCostPerformance", ""],
                                                "defaultContent"   : ["0", "0", ""],
                                                "render"           : [function(data, type, full) {
                                                                        var roiPercentAfterAdditionalCostBaseContract = baseContract.roiPercentAfterAdditionalCost;
                                                                        var diff = '<div class=\'';
                                                                        if(roiPercentAfterAdditionalCostBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiPercentAfterAdditionalCostBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiPercentAfterAdditionalCostBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      function(data, type, full) {
                                                                        var roiPercentAfterAdditionalCostPerformanceBaseContract = baseContract.roiPercentAfterAdditionalCostPerformance;
                                                                        var diff = '<div class=\'';
                                                                        if(roiPercentAfterAdditionalCostPerformanceBaseContract > data) {
                                                                            diff += 'textRed\'> (-' + (roiPercentAfterAdditionalCostPerformanceBaseContract - data).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        } else {
                                                                            diff += 'textGreen\'> (+' + (data - roiPercentAfterAdditionalCostPerformanceBaseContract).toLocaleString('en-US', {minimumFractionDigits: 2}) + ')';
                                                                        }
                                                                        diff += '</div>';
                                                                        if(full.isBaseContract) {
                                                                            return data.toLocaleString('en-US', {minimumFractionDigits: 2});
                                                                        }
                                                                        return data.toLocaleString('en-US', {minimumFractionDigits: 2}) +  '<br />' + diff;
                                                                      },
                                                                      null
                                                                     ],
                                                "numberOfRows"     : 3
                                               };
        
        var baseContractId;
        var selectedContractIdList = [];
		var toPDF = false;
        
        //Base Contract Object For Calculate the diff
        var baseContract;
        
        /****************
        Define Page Standard Function
        ****************/                          
        $(document).ready(
        function() {
        	//$('#contractComparisonResultDialog').hide();
        	var showComparison = {!showComparison};
            if(showComparison){
                compareContractComplete(true, '{!JSENCODE(contractComparisonResultWrapperListJson)}')
                return;
            }
            if('{!JSENCODE(contractComparisonResultWrapperListJson)}' != 'null') {
                $("body").hide();
				toPDF = true;
                compareContractComplete(false, '{!JSENCODE(contractComparisonResultWrapperListJson)}');
            	redirectPDF($('#contractComparisonResultDialog').html());
            } else {
        		//setContractTable('{!JSENCODE(contractListJson)}');
				setDatepicker();
				setMultiSelect();
				$("#searchContractButton").trigger("click");
        		setContractSelectionTable();
            }
        }
       );

        //Set Contract Selection Data Table
        function setContractSelectionTable() {
			var dataTableProperties = CONST_DATA_TABLE_PROPERTIES;

			//Convert contract list JSON to Object format
            dataTableProperties["rowId"] = "Id";

			//Set the data table columns
            var columns = [];
            columns.push(deleteContractToCompare);
            columns.push(isBaseContract);
            columns.push(selectedContract);
            columns.push(contractNo);
			columns.push(outletName);
			columns.push(sectorCode);
			columns.push(status);
			columns.push(ownerName);
			columns.push(startDate);
			columns.push(endDate);

            dataTableProperties["aoColumns"] = columns;

            $("#contractSelectionTable").dataTable(dataTableProperties);
        }

        //Set Contract Selection Data Table
        function setContractTable(contractListJson) {
			var dataTableProperties = CONST_DATA_TABLE_PROPERTIES;

			//Convert contract list JSON to Object format
			dataTableProperties["aaData"] = jQuery.parseJSON(contractListJson);
            dataTableProperties["rowId"] = "Id";

			//Set the data table columns
            var columns = [];
            columns.push(selectContractToCompare);
            columns.push(contractNo);
			columns.push(outletName);
			columns.push(sectorCode);
			columns.push(status);
			columns.push(ownerName);
			columns.push(startDate);
			columns.push(endDate);

            dataTableProperties["aoColumns"] = columns;

            $("#contractTable").dataTable(dataTableProperties);
        }

        //Set Contract Comparsion Result Table
        function setContractComparisonResultTable(isShowChart, contractComparisonResultWrapperListJson) {
            var contractComparisonResultWrapperList = jQuery.parseJSON(contractComparisonResultWrapperListJson);
            var showComparison = {!showComparison};
            var submitRTM = '{!submitRTM}' == 'true';

            
            //Find out the base contract
            for(var i = 0 ; i < contractComparisonResultWrapperList.length ; i++) {
            	if(contractComparisonResultWrapperList[i].isBaseContract) baseContract = contractComparisonResultWrapperList[i];
            }

			//Set width of the table
			if (!toPDF){
				var tableWidth = 20 + 20 * contractComparisonResultWrapperList.length;
				$("#contractComparisonResultTable").css("width",tableWidth+"%");
			} else {
				var tableWidth = 33 + 33 * contractComparisonResultWrapperList.length;
				$("#contractComparisonResultTable").css("width",tableWidth+"%");
				$("#contractComparisonResultTable").css("font-size","11px");
			}
            
            //Set the Contract Comparsion Result Table Config
			var verticalDataTableProperties = {};
			verticalDataTableProperties["data"] = contractComparisonResultWrapperList;
           
            //Set column
            var column = [];
			column.push(outlet);
            column.push(contractNoForVerticalDataTable);
            column.push(contractPeriod);
            column.push(sectorCodeDetail);
            column.push(statusDetail);
            if(isShowChart) {
            	column.push(gaugeChart);
            }
            column.push(subtitle);
            column.push(vol);
            column.push(salesVol);
            column.push(focVol);
            column.push(focRatioVol);
            column.push(emptyRow);
            column.push(subtitleRepeat);
            column.push(grossSales);
            // debugger;
            // skip if toPDF true
			/*
            if(contractExistBeforeRTM){
                column.push(freeGoods);
            } else if(!toPDF){
                if (!showComparison) column.push(freeGoods);
            }
            column.push(freeGoodsAdhoc);
            if(contractExistBeforeRTM){
                column.push(freeGoods);
            } else if(!toPDF){
                if (!showComparison) column.push(contractMarginPriceOverwrite);
            }
			*/
            if(!submitRTM){
                column.push(freeGoods);
            }
            column.push(freeGoodsAdhoc);
            if(!submitRTM){
                column.push(contractMarginPriceOverwrite);
            }
            column.push(wholesalerMargin);
            column.push(bottleIncentive);
            column.push(cashSponsorship);
            column.push(allowancesAndDiscounts);
            column.push(subtitleRepeat);
            column.push(netSales);
            column.push(duty);
            column.push(fobHandlingCost);
            column.push(distributionCost);
            column.push(costOfSales);
            column.push(subtitleRepeat);
            column.push(grossMargin);
            column.push(tradeAPExpenses);
            column.push(marketingSupport);
            column.push(salesSupport);
            column.push(emptyRow);
            column.push(emptyRow);
            column.push(roi);
            //column.push(roiCurrency);
            column.push(roiPercentage);
            column.push(emptyRow);
            column.push(emptyRow);
            column.push(subtitleRepeat);
			column.push(additionalDirectCost);
			column.push(blindBonus);
			column.push(promptPayment);
			column.push(tneMarketVisitOwner);
			column.push(tneMarketVisitOthers);
			column.push(brandEventHeld);
			column.push(subtotalForAdditionalCost);
			column.push(roiAfterAdditionalCost);
			column.push(roiPercentAfterAdditionalCost);
            
            verticalDataTableProperties["columns"] = column;
            
            $("#contractComparisonResultTable").verticalDatatTable(verticalDataTableProperties);
        }

        function setGaugeChart() {
            $(".chart").knob();
        }
        
        /****************
       Compare Contract Handler
        ****************/
        function beforeCompareContract() {
            //Hide the error message
            $('.saveErrorPanel').css("display","none");
            $('.saveErrorPanelBottom').css("display","none");

            if(baseContractId && selectedContractIdList.length > 1) {
				compareContract(JSON.stringify(selectedContractIdList), baseContractId);
				//Show loading gif
				$('body').addClass('savingRecord');
            } else {
				var errorMessage = '';
				if(!baseContractId) errorMessage += BASE_CONTRACT_MUST_BE_SELECTED + '<br />';
				if(selectedContractIdList.length <= 1) errorMessage += SELECTED_CONTRACT_MUST_MORE_THAN_ONE + '<br />';

				//Display the error message
				   $('.errorMessage').html(errorMessage);
				$('.saveErrorPanel').css("display","block");
            }
        }

        function compareContractComplete(isShowChart, contractComparisonResultWrapperListJson) {
            setContractComparisonResultTable(isShowChart, contractComparisonResultWrapperListJson);
            setGaugeChart();

            //Hide loading gif and select contract dialog
            $('body').removeClass('savingRecord');
            $('#preparationDialog').hide();

            //Show contract comparison result dialog
            $('#contractComparisonResultDialog').show();
        }

        function backToSelect() {
            //Show contract comparison result dialog
			$("#contractComparisonResultTable").empty();
            $('#contractComparisonResultDialog').hide();
			
            //Hide loading gif and select contract dialog
            $('#preparationDialog').show();
        }
		
		function searchContractComplete(contractListJson){
            //Hide loading gif and select contract dialog
            $('body').removeClass('savingRecord');
        	setContractTable(contractListJson);
		
		}

        /****************
        Contract Selection Table Row Event Handler
        ****************/
        function selectBaseContract(radioButton, baseContractId) {
            //Hide the error message
            $('.saveErrorPanel').css("display","none");
            $('.saveErrorPanelBottom').css("display","none");

            var contractIndex = selectedContractIdList.indexOf(baseContractId);

            //Show error when user already selected 4 contract records and the base contract not include in those contract records
            if(selectedContractIdList.length == MAX_CONTRACT_SELECTION_LIMIT && 
               contractIndex == -1) {
            	//Display the error message
                $('.errorMessage').html(BASE_CONTRACT_DOES_NOT_INSIDE_SELECTED_CONTRACT);
            	$('.saveErrorPanel').css("display","block");

            	console.log(this.baseContractId);
            	//Restore last base contract
                if(this.baseContractId) {
                    $('#' + this.baseContractId).find('.baseContract').prop('checked', true);
                }

                //Unselect the select button 
                $(radioButton).prop('checked', false);
           	} else {
                //Set the base contract
                this.baseContractId = baseContractId;
                //Auto check the related checkbox
                $(radioButton.parentNode.parentNode).find('.selectContract').prop('checked', true);
                //Only add to array if the contract does not inside array
                if(contractIndex == -1) selectedContractIdList.push(baseContractId);
            }
        }

        function selectContract(checkbox, contractId) {
            //Hide the error message
            $('.saveErrorPanel').css("display","none");
            $('.saveErrorPanelBottom').css("display","none");

            if($(checkbox).prop('checked')) {
				if(selectedContractIdList.length == MAX_CONTRACT_SELECTION_LIMIT) {
					//Display the error message
					   $('.errorMessage').html(SELECTED_CONTRACT_OVER_LIMIT);
					$('.saveErrorPanel').css("display","block");

					//Uncheck the checkbox
					$(checkbox).prop('checked', false);
				} else {
					selectedContractIdList.push(contractId);
				}
            } else {
				//Only remove the contract id in array if contract does not equals to baseContractId
				if(baseContractId == contractId) {
					$(checkbox).prop('checked', true);
				} else {
					//Remove the contractId in array
					var selectedContractIdIndex = selectedContractIdList.indexOf(contractId);
					if(selectedContractIdIndex != -1) selectedContractIdList.splice(selectedContractIdIndex, 1);
				}
            }
        }

        function searchContractJS() {
            //Hide the error message
            $('.saveErrorPanel').css("display","none");
            $('.saveErrorPanelBottom').css("display","none");
			
			var statusList = [];
			var inputDate = $("#inputDate").val();
			console.log(inputDate);
			var startDate = $("#inputStartDate").val();
			var endDate = $("#inputEndDate").val();
			$.each($("#inputStatus option:selected"), function(){
				statusList.push($(this).val());
			});
			
			if(inputDate!='' && startDate!='' && endDate!='' && statusList.length >= 1) {
            	//Show loading gif
            	$("body").addClass("savingRecord");
                searchContract(inputDate, startDate, endDate, JSON.stringify(statusList));
            } else {
				var errorMessage = SEARCH_ERROR;

				//Display the error message
				   $('.errorMessage').html(errorMessage);
				$('.saveErrorPanel').css("display","block");
			}
        }
		
		function setDatepicker(){
			$("#inputStartDate").datepicker({
				dateFormat: "yy-mm-dd",
				onSelect: function () {
					var dt2 = $('#inputEndDate');
					var startDate = $(this).datepicker('getDate');
					var minDate = $(this).datepicker('getDate');
					//first day which can be selected in dt2 is selected date in dt1
					dt2.datepicker('option', 'minDate', minDate);
				}
			});
			$('#inputEndDate').datepicker({
				dateFormat: "yy-mm-dd",
				minDate: $("#inputStartDate").datepicker('getDate'),
				onSelect: function () {
					var dt2 = $('#inputStartDate');
					var startDate = $(this).datepicker('getDate');
					var maxDate = $(this).datepicker('getDate');
					//first day which can be selected in dt2 is selected date in dt1
					dt2.datepicker('option', 'maxDate', maxDate);
				}
			});
		}
		
		function setMultiSelect(){
			$("#inputStatus").multipleSelect();
		}
		
        function addContract(row) {
            //Hide the error message
            $('.saveErrorPanel').css("display","none");
            $('.saveErrorPanelBottom').css("display","none");
			
            var contract = $("#contractTable").DataTable().row(row).data();
			
			var added = false;
			$("#contractSelectionTable").DataTable().rows().every( function (){
				var addedContract = this.data();
				if (contract.Id == addedContract.Id) added = true;
			});
            
            //Add new contract target record to data table and redraw
            if (!added) {
				$("#contractSelectionTable").DataTable().row.add(contract).draw();
			} else {
				
				var errorMessage = DUPLICATION_ERROR;

				   $('.errorMessageBottom').html(errorMessage);
				$('.saveErrorPanelBottom').css("display","block");
			}
            
        }
        
        function deleteContract(deleteButton, contractId) {
            //Hide the error message
            $('.saveErrorPanel').css("display","none");
            $('.saveErrorPanelBottom').css("display","none");
			
			var row;
			$("#contractSelectionTable").DataTable().rows().every( function (){
				var contractToDelete = this.data();
				if (contractId == contractToDelete.Id) {
				
					row = this;
				
					var selectedContractIdIndex = selectedContractIdList.indexOf(contractId);
					if(selectedContractIdIndex != -1) selectedContractIdList.splice(selectedContractIdIndex, 1);
					
					// Remove base contract id
					if(this.baseContractId == contractId) this.baseContractId = '';
				}
			});
			$("#contractSelectionTable").DataTable().row(row).remove().draw();
			
        }
        
    </script>

    <body>
    <div class="fullScreenLoading"></div>
    <div class="saveErrorPanel alert alert-danger" style="display: none;">
        <strong>Error</strong> 
        <br />
        <p class="errorMessage"></p>
    </div>

        <!-- Define Action Function -->
        <apex:form >
            <apex:actionFunction name="compareContract" action="{!compareContractFromVFPage}" onComplete="compareContractComplete(true, '{!JSENCODE(contractComparisonResultWrapperListJson)}');">
            	<apex:param name="CONTRACT_ID_LIST_JSON" value="" />
            	<apex:param name="BASE_CONTRACT_ID" value="" />
            </apex:actionFunction>
            <apex:actionFunction name="redirectPDF" action="{!redirectPDF}" reRender="nothing">
            	<apex:param name="TABLE_CONTENT" value="" />
            </apex:actionFunction>
            <apex:actionFunction name="searchContract" action="{!searchContract}" reRender="pageMsg" onComplete="searchContractComplete('{!JSENCODE(contractListJson)}')">
                <apex:param name="inputDate" value="" />
                <apex:param name="startDate" value="" />
				<apex:param name="endDate" value="" />
				<apex:param name="statusListJson" value="" />
            </apex:actionFunction>
        </apex:form>

		<div id="preparationDialog">
		
			<!-- Selection Dialog for user select contract -->
			<div id="contractSelectionDialog">
				<!-- Call JS Function to retrieve contract record from Apex Controller -->
				<input type="button" class="btn newRowBtn" onClick="beforeCompareContract()" value="Compare" />
				<br/>
				<br/>
				<h3>Selected Contracts/Proposals (Maximum 4 can be selected to compare)</h3>
				<br/>
				<br/>
				<table id="contractSelectionTable" width="100%" />
			</div>
				<br/>
				<br/>

			<div class="saveErrorPanelBottom alert alert-danger" style="display: none;">
				<strong>Error</strong> 
				<br />
				<p class="errorMessageBottom"></p>
			</div>
	
			<!-- Selection Dialog for user select contract -->
			<div id="contractDialog">
				<!-- Call JS Function to retrieve contract record from Apex Controller -->
				<h3>All Contracts/Proposals</h3>
				<br/>
				<br/>
				<label for="inputDate">Filter by
				<select id="inputDate" class="form-control input-sm">
				  <option value="start" selected="true">Start Date</option>
				  <option value="end">End Date</option>
				</select></label>
				<label for="inputStartDate">From</label>
				<input type="text" id="inputStartDate" value="{!inputStartDate}"/>
				<label for="inputEndDate">To</label>
				<input type="text" id="inputEndDate" value="{!inputEndDate}"/>
				<label for="inputStatus">Status</label>
				<select id="inputStatus" multiple="true" style="width:250px;">
				  <option value="Draft">Draft</option>
				  <option value="Submitted">Submitted</option>
				  <option value="Contract Approved" selected="true">Contract Approved</option>
				  <option value="Contract Rejected">Contract Rejected</option>
				  <option value="Proposal Approved">Proposal Approved</option>
				  <option value="Proposal Rejected">Proposal Rejected</option>
				  <option value="Proposal Converted">Proposal Converted</option>
				  <option value="Completed" selected="true">Completed</option>
				  <option value="Archived">Archived</option>
				</select>
				<input type="button" class="btn newRowBtn" onClick="searchContractJS()" value="Search" id="searchContractButton" />
				<table id="contractTable" width="100%" />
			</div>
		
		</div>

        <!-- Dialog for showing the contract record comparison result -->
        <div id="contractComparisonResultDialog" style="display:none">
        <input type="button" class="btn newRowBtn {!If(showComparison,'hide','')}" onClick="backToSelect()" value="Back" />
        <table id="contractComparisonResultTable" width="100%" />
        </div>

    </body>

</apex:page>