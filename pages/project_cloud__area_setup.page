<apex:page showHeader="true" sidebar="true" controller="project_cloud.AreaSetupController" tabStyle="Event">
    <apex:includeScript value="{!$Resource.project_cloud__jquery_js}" />
        <body class="homeTab">
        <style>
            .area-table {
                border-collapse: collapse;
                border-spacing: 0px;
                width: 100%;
            }
            .area-table tr {
                background: white;
            }
            .area-table th {
                text-align: center;
                width: 220px;
                background: #dfdfdf;
            }
            .area-table td:last-child {
                padding: 0;
            }
            .area-table input {
                margin: 0;
                border: 0;
                padding: 2px 4px;
                background: transparent;
            }
            .area-table img:not(.toggle-arrow) {
                float: right;
                visibility: hidden;
                padding: 5px;
                cursor: pointer;
                cursor: hand;
                width: 9px;
            }
            .sub-table td {
                border-bottom: solid 1px gray;
                width: 100%
            }
            .sub-table tr:last-child td {
                border-bottom-width: 0;
            }
            div.placeholder {
                height: 15px;
                padding: 2px 4px;
                display: none;
            }
            [id$="loadingGif"] {
                position: relative;
                top: 3px;
            }
            #changeWrapper {
                display: inline-block;
                float: left;
                width: 150px;
                height: 32px;
                position: relative;
            }
            #changesMade, #removedAreas {
                padding: 2px 3px;
                display: none;
                position: absolute;
                left: 0px;
                right: 0px;
            }
            #changesMade {
                background: yellow;
                top: 0px;
            }
            #removedAreas {
                background: red;
                bottom: 0px;
            }
            .message.infoM3, .message.errorM3 {
                margin: 0 0 8px 0;
            }
            .errorMsg {
                display: none;
            }
        </style>
        <style>
            #bodyDiv {
                padding-top: 8px;
            }
            #areaTabs {
                display: block;
                position: relative;
                list-style: none;
                margin: 0;
                -webkit-padding-start: 9px;
            }
            #areaTabs > li {
                float: left;
                margin: 0;
            }
            #areaTabs input[type=radio] {
                display: none;
            }
            #areaTabs input[type=radio] + label {
                display: block;
                -moz-border-radius: 7px 7px 0 0;
                -webkit-border-radius: 7px 7px 0 0;
                border-radius: 7px 7px 0 0;
                padding: 6px 7px;
                cursor: pointer;
                cursor: hand;
                position: relative;
                top: 0px;
                border-bottom: none;
                color: #353535;
                background: #cde8f0;
                -moz-box-shadow: 3px 0 5px -3px #999,-3px 0 5px -3px #999;
                -webkit-box-shadow: 3px 0 5px -3px #999,-3px 0 5px -3px #999;
                box-shadow: 3px 0 5px -3px #999,-3px 0 5px -3px #999;
            }
            #areaTabs input[type=radio] + label:hover {
                background-image: -o-linear-gradient(#79bcd8, #58b0d0 12px);
                background-image: -moz-linear-gradient(#79bcd8, #58b0d0 12px);
                background-image: -webkit-linear-gradient(#79bcd8, #58b0d0 12px);
                background-image: linear-gradient(#79bcd8, #58b0d0 12px);
                color: white;
                z-index: 1;
            }
            #areaTabs input[type=radio]:checked + label {
                color: white;
                background-image: -o-linear-gradient(#58b0d0, #1797c0 12px);
                background-image: -moz-linear-gradient(#58b0d0, #1797c0 12px);
                background-image: -webkit-linear-gradient(#58b0d0, #1797c0 12px);
                background-image: linear-gradient(#58b0d0, #1797c0 12px);
                z-index: 2;
                padding: 7px 8px;
                top: -2px;
            }

            #areaTabs input[type=radio] + label:before, #areaTabs input[type=radio] + label:after {
                position: absolute;
                bottom: -1px;
                width: 7px;
                height: 7px;
                content: " ";
                border: 1px solid #cde8f0;

            }
            #areaTabs input[type=radio]:checked + label:before, #areaTabs input[type=radio]:checked + label:after {
                border: 1px solid #1797C0;
                z-index: 2;
            }
            #areaTabs input[type=radio]:checked + label:hover:before, #areaTabs input[type=radio]:checked + label:hover:after {
                border: 1px solid #1797C0;
                z-index: 2;
            }
            #areaTabs input[type=radio] + label:hover:before, #areaTabs input[type=radio] + label:hover:after {
                border: 1px solid #58b0d0;
                z-index: 1;
            }
            #areaTabs input[type=radio] + label:before {
                left: -7px;
                -moz-border-bottom-right-radius: 7px;
                border-bottom-right-radius: 7px;
                border-bottom-right-radius: 7px;
                border-width: 0 1px 1px 0;
                -moz-box-shadow: 3.5px 3.5px 0 #cde8f0;
                -webkit-box-shadow: 3.5px 3.5px 0 #cde8f0;
                box-shadow: 3.5px 3.5px 0 #cde8f0;
            }
            #areaTabs input[type=radio] + label:after {
                right: -7px;
                border-bottom-left-radius: 7px;
                border-width: 0 0 1px 1px;
                -moz-box-shadow: -3.5px 3.5px 0 #cde8f0;
                -webkit-box-shadow: -3.5px 3.5px 0 #cde8f0;
                box-shadow: -3.5px 3.5px 0 #cde8f0;
            }
            #areaTabs input[type=radio]:checked + label:before, #areaTabs input[type=radio]:checked + label:hover:before {
                border-width: 0 1px 1px 0;
                -moz-box-shadow: 3.5px 3.5px 0 #1797c0;
                -webkit-box-shadow: 3.5px 3.5px 0 #1797c0;
                box-shadow: 3.5px 3.5px 0 #1797c0;
            }
            #areaTabs input[type=radio]:checked + label:after, #areaTabs input[type=radio]:checked + label:hover:after {
                border-width: 0 0 1px 1px;
                -moz-box-shadow: -3.5px 3.5px 0 #1797c0;
                -webkit-box-shadow: -3.5px 3.5px 0 #1797c0;
                box-shadow: -3.5px 3.5px 0 #1797c0;
            }
            #areaTabs input[type=radio] + label:hover:before {
                border-width: 0 1px 1px 0;
                -moz-box-shadow: 3.5px 3.5px 0 #58b0d0;
                -webkit-box-shadow: 3.5px 3.5px 0 #58b0d0;
                box-shadow: 3.5px 3.5px 0 #58b0d0;
            }
            #areaTabs input[type=radio] + label:hover:after {
                border-width: 0 0 1px 1px;
                -moz-box-shadow: -3.5px 3.5px 0 #58b0d0;
                -webkit-box-shadow: -3.5px 3.5px 0 #58b0d0;
                box-shadow: -3.5px 3.5px 0 #58b0d0;
            }
        </style>
        <script>
            var src = '';
            var srcs = [];
            <apex:repeat value="{!allAreas}" var="area">
            srcs.push('{!area}');
            var open{!area}SubAreas = [];
            var removed{!area}Areas = [];
            var {!area}HasChanged = 0;
            var {!area}RemovedAreas = 0;
            </apex:repeat>

            $(document).ready(function() {
                $('.ccpe_ghostText').remove();
                $('br', '#ccpe_Tree_Section').remove();
                //Remove secondary color pallete, giving pageBlocks standard SF color
                $('#bodyDiv .bPageBlock').removeClass('secondaryPalette');
                $('[id$="pageButtons"]').prev().prepend('<div id="changeWrapper"><div id="changesMade"></div><div id="removedAreas"></div></div>');

                for(var type in srcs) {
                    src = srcs[type];
                    for(var i = 0; i < $('#' + src + 'Content .area-table > tbody > tr').length - 2; i++) {
                        window['open' + src + 'SubAreas'].push(true);
                    }
                    window['open' + src + 'SubAreas'].push(true);
                }
                setOpenSubAreas();
                src = '{!curRType}';
                $('#' + src + 'Tab').attr('checked', 'checked');
            });

            function appendAddRemoveButtons() {
                $('#' + src + 'Content .area-table > tbody > tr').each(function() {
                    if($(this).is(':last-child')) {
                        var btn = $(' > td > div > .removeAreaButton', $(this));
                        btn.toggleClass('removeAreaButton addAreaButton').attr({onclick : 'addAreaContainer(event);',
                                                                                     title : 'Add Area', 
                                                                                       src : '/img/setup_plus.gif'});
                    } else if($('> td > div > input', $(this)).attr('data-remove') == 'true') {
                        var btn = $(' > td > div > .removeAreaButton', $(this));
                        btn.toggleClass('removeAreaButton addAreaButton').attr({onclick : 'unremoveAreaContainer($(this));',
                                                                                     title : 'Restore Area', 
                                                                                       src : '/img/func_icons/util/ileUndo16.gif'});
                    }
                    $('.sub-table > tbody > tr', $(this)).each(function() {
                        if($(this).is(':last-child')) {
                            var btn = $(' > td > div > .removeSubButton', $(this));
                            btn.toggleClass('removeSubButton addSubButton').attr({onclick : 'addSubAreaContainer($(this));',
                                                                                         title : 'Add Sub-Area', 
                                                                                           src : '/img/setup_plus.gif'});
                        } else if($('> td > div > input', $(this)).attr('data-remove') == 'true') {
                            var btn = $(' > td > div > .removeSubButton', $(this));
                            btn.toggleClass('removeSubButton addSubButton').attr({onclick : 'unremoveSubAreaContainer($(this));',
                                                                                         title : 'Restore Sub-Area', 
                                                                                           src : '/img/func_icons/util/ileUndo16.gif'});
                        }
                    });
                });
            }

            function addSubAreaContainer(addButton) {
                loadingChanges();

                var subTable = addButton.closest('.sub-table');
                var index = subTable.closest('tr').index() - 1;

                var newSub = $('<tr><td><div class="placeholder"></div></td></tr>');
                subTable.append(newSub);

                $('div', newSub).slideToggle(function() {
                    addSub(index);
                });
                updateChanges();
            }

            function removeSubAreaContainer(deleteButton) {
                loadingChanges();
                if(deleteButton.prev().attr('data-name') == '') {
                    if(deleteButton.prev().val() != '') {
                        window[src + 'HasChanged']--;
                    }
                    deleteButton.parent().slideToggle(function() {
                        deleteButton.closest('td').css('border-bottom-width', '0px');
                        removeSub(deleteButton.closest('table').closest('tr').index() - 1, deleteButton.closest('tr').index());
                    });
                }
                else {
                    if(deleteButton.prev().attr('data-remove') != 'true') {
                        if(deleteButton.prev().attr('data-name') != deleteButton.prev().val()) {
                            window[src + 'HasChanged']--;
                        }
                        window[src + 'RemovedAreas']++;
                    }
                    deleteButton.closest('td').css('background', 'red');
                    removeSub(deleteButton.closest('table').closest('tr').index() - 1, deleteButton.closest('tr').index());
                }
                updateChanges();
            }

            function unremoveSubAreaContainer(addButton) {
                loadingChanges();
                var input = addButton.siblings('input');
                if(input.attr('data-name') != input.val()) {
                    addButton.closest('td').css('background', 'yellow');
                    window[src + 'HasChanged']++;
                } else {
                    addButton.closest('td').css('background', 'transparent');
                }
                window[src + 'RemovedAreas']--;
                unremoveSub(addButton.closest('table').closest('tr').index() - 1, addButton.closest('tr').index());
                updateChanges();
            }

            function addAreaContainer(event) {
                loadingChanges();
                event.stopPropagation();

                var newArea = $('<tr><td><div class="placeholder"></td><td><div class="placeholder"></td></tr>');
                $('.area-table', '#' + src + 'Content').append(newArea);

                window['open' + src + 'SubAreas'].push(true);
                $('div', newArea).slideToggle(function() {
                    if($(this).closest('td').is(':last-child')) {
                        addArea();
                    }
                });
                updateChanges();
            }

            function removeAreaContainer(event, deleteButton) {
                loadingChanges();
                event.stopPropagation();

                var index = deleteButton.closest('tr').index() - 1;
                window['removed' + src + 'Areas'].push(index);

                //Check if sub-areas were changed
                $('input', deleteButton.closest('td').next()).each(function() {
                    if($(this).attr('data-name') != $(this).val()) {
                        window[src + 'HasChanged']--;
                    }
                });
                //If the are wasn't saved, scrap it
                if(deleteButton.siblings('input').attr('data-name') == '') {
                    if(deleteButton.siblings('input').val() != '') {
                        window[src + 'HasChanged']--;
                    }
                    $('div', deleteButton.closest('td').next()).slideToggle();
                    deleteButton.parent().slideToggle(function() {
                        $(this).closest('tr').remove();
                        removeArea(index);
                    });
                }
                //If the area is saved and
                if(deleteButton.siblings('input').attr('data-name') != '') {
                    if(deleteButton.siblings('input').val() != deleteButton.siblings('input').attr('data-name')) {
                        window[src + 'HasChanged']--;
                    }
                    window[src + 'RemovedAreas']++;
                    window['open' + src + 'SubAreas'][index] = false;
                    deleteButton.closest('td').css('background', 'red');
                    deleteButton.closest('td').next().css('background', 'red');
                    $('td', deleteButton.closest('td').next()).each(function() {
                        $(this).css('background', 'red');
                        if($('input', $(this)).attr('data-name') != '' && $('input', $(this)).attr('data-remove') == 'false') {
                            window[src + 'RemovedAreas']++;
                        }
                    });
                    //toggleSubArea(deleteButton.siblings('.toggle-arrow'));
                    removeArea(index);
                }
                updateChanges();
            }

            function unremoveAreaContainer(addButton) {
                loadingChanges();
                if(window['open' + src + 'SubAreas'][addButton.closest('tr').index() - 1] == true) {
                    event.stopPropagation();
                }
                var input = addButton.siblings('input');
                if(input.attr('data-name') != input.val()) {
                    addButton.closest('td').css('background', 'yellow');
                    window[src + 'HasChanged']++;
                } else {
                    addButton.closest('td').css('background', 'transparent');
                }
                window[src + 'RemovedAreas']--;
                $('td', addButton.closest('td').next()).each(function() {
                    if($('input', $(this)).attr('data-name') != $('input', $(this)).val()) {
                        $(this).css('background', 'yellow');
                        window[src + 'HasChanged']++;
                    } else {
                        $(this).css('background', 'transparent');
                    }
                    if($('input', $(this)).attr('data-remove') == 'true') {
                        window[src + 'RemovedAreas']--;
                    }
                });

                var subTable = $('.sub-table', addButton.closest('td').next());

                var newSub = $('<tr><td><div class="placeholder"></div></td></tr>');
                subTable.append(newSub);

                loadingChanges();
                $('div', newSub).slideToggle(function() {
                    unremoveArea(addButton.closest('tr').index() - 1);
                });
                updateChanges();
            }

            function valueChanged(container, event) {
                if(event.keyCode != 9) {
                    var isChanged = container.val() != container.attr('data-name');

                    if(isChanged) {
                        //Do not regester multiple unsaved changes to a single area as multiple changes
                        if(container.closest('td').css('background-color') != 'rgb(255, 255, 0)' && container.closest('td').css('background-color') != 'rgb(255, 0, 0)') {
                            window[src + 'HasChanged']++;
                            container.closest('td').css('background-color', 'yellow');
                        }
                    } else {
                        //Continuous backspaces should not continue to decrement
                        if(container.closest('td').css('background-color') == 'rgb(255, 255, 0)') {
                            window[src + 'HasChanged']--;
                            container.closest('td').css('background-color', 'transparent');
                        }
                    }

                    updateChanges();
                }
                if(event.keyCode == 13 && container.val() != '') {
                    if(container.closest('table').hasClass('sub-table')) {
                        if(container.next().hasClass('addSubButton')) {
                            addSubAreaContainer(container.next());
                        }
                    } else {
                        if(container.next().next().hasClass('addAreaButton')) {
                            addAreaContainer(event);
                        }
                    }
                }
                container.attr('value', container.val());
            }

            function updateChanges() {
                var updateCount = window[src + 'HasChanged'];
                var deleteCount = window[src + 'RemovedAreas']
                $('#changesMade').text(updateCount + ' Unsaved Change' + (updateCount > 1 ? 's' : '')).toggle(updateCount != 0);
                $('#removedAreas').text(deleteCount + ' Pending Removal' + (deleteCount > 1 ? 's' : '') + ' on Save').toggle(deleteCount != 0);
                $('.message').slideUp();
            }

            function loadingChanges() {
                $('[id$=' + src + 'SaveButton').attr('disabled', 'disabled');
                $('#loadingGif').parent().show();
                $('#no-click').show();
            }

            function changesComplete() {
                $('[id$="saveButton"]').removeAttr('disabled');
                setOpenSubAreas();
                console.log('Changes Complete');
                $('#no-click').hide();
            }

            function removeErrorMsg() {
                $('.errorMsg').each(function() {
                    var button = $(this).next();
                    button.remove();
                    button.insertBefore($(this));
                });

                window[src + 'HasChanged'] = 0;
                window[src + 'RemovedAreas'] = 0;
                $('#changesMade').hide();
                $('#removedAreas').hide();
                //If saved failed, then replace toggle state of the deleted area
                if($('.errorM3').length) {
                    for(var i = 0; i < window['removed' + src + 'Areas'].length; i++) {
                        window['open' + src + 'SubAreas'].splice(window['removed' + src + 'Areas'].pop(), 0, false);
                    }
                }
                window['removed' + src + 'Areas'] = [];
                changesComplete();
            }

            function preventProp(event) {
                event.stopPropagation();
            }

            function changeTab(type) {
                loadingChanges();
                $('#' + src + 'Content', '#contentDiv').hide();
                src = srcs[type.parent().index()];
                $('#' + src + 'Content', '#contentDiv').show();
                setType(src);
                updateChanges();
            }
        </script>
        <script>
            $.fn.animateRotate = function(angle, duration, easing, complete) {
                var args = $.speed(duration, easing, complete);
                var step = args.step;
                return this.each(function(i, e) {
                    args.step = function(now) {
                        $.style(e, 'transform', 'rotate(' + now + 'deg)');
                        if (step) return step.apply(this, arguments);
                    };
                    var start = (angle == -90 ? 0 : -90);
                    $({deg: start}).animate({deg: angle}, args);
                });
            };

            function toggleSubArea(arrowImg) {
                var subTable = arrowImg.closest('td').next().children().first();

                if(subTable.css('display') != 'none') {
                    arrowImg.animateRotate(-90);
                    window['open' + src + 'SubAreas'][arrowImg.closest('tr').index() - 1] = false;
                } else {
                    arrowImg.animateRotate(0);
                    window['open' + src + 'SubAreas'][arrowImg.closest('tr').index() - 1] = true;
                }

                subTable.slideToggle();
            }

            function toggleSubAreas(isOpen) {
                $('.toggle-arrow', '#' + src + 'Content').each(function() {
                    if($(this).css('transform') == 'none' || $(this).css('transform') == 'matrix(1, 0, 0, 1, 0, 0)') {
                        if(!isOpen) {
                            toggleSubArea($(this));
                        }
                    } else {
                        if(isOpen) {
                            toggleSubArea($(this));
                        }
                    }
                });
            }

            function setOpenSubAreas() {
                var temp = src;
                for(var i = 0; i < srcs.length; i++) {
                    src = srcs[i];
                    appendAddRemoveButtons();
                    $('.toggle-arrow', '#' + src + 'Content').each(function() {
                        if(!window['open' + src + 'SubAreas'][$(this).closest('tr').index() - 1]) {
                            $(this).closest('td').next().children().first().hide();
                            $(this).css('transform', 'rotate(-90deg)');
                        }
                    });
                }
                src = temp;
            }

            function openAllSubs() {
                var subs = window['open' + src + 'SubAreas'];
                for(var i = 0; i < subs.length; i++) {
                    subs[i] = true;
                }
            }
        </script>
        <apex:sectionHeader subtitle="Area Setup"/>
        <div id="no-click" style="position: fixed; top: 0; right: 0; bottom: 0; left: 0; background: transparent; z-index: 100; display: none;" onclick="preventProp(event);"></div>
        <apex:form >
        <div id="bodyDiv">
            <ul id="areaTabs">
                <apex:repeat value="{!allAreas}" var="type">
                    <li>
                        <input type="radio" name="tabs" id="{!type}Tab"/>
                        <label for="{!type}Tab" onclick="changeTab($(this));"><h2>{!type}s</h2></label>
                    </li>
                </apex:repeat>
            </ul>
            <div style="position: relative; top: -2px; z-index: 3; display: inline-block; width: 100%">
                <apex:pageBlock id="pBlock">
                    <apex:pageBlockButtons location="top" id="pageButtons">
                    <apex:commandButton value="Reset" action="{!reset}" rerender="outPanel, messages" oncomplete="openAllSubs(); removeErrorMsg();" status="loading" />
                    <apex:commandButton value="Save" action="{!save}" rerender="outPanel, messages" oncomplete="removeErrorMsg();" status="loading" />
                        <a style="color: #015ba7; text-decoration: none; cursor: pointer" onclick="toggleSubAreas(false);" >Collapse All</a>
                        |
                        <a style="color: #015ba7; text-decoration: none; cursor: pointer" onclick="toggleSubAreas(true);" >Expand All</a>
                        <apex:actionStatus id="loading">
                            <apex:facet name="start" >
                              <img id="loadingGif" src="/img/loading.gif"/>
                            </apex:facet>
                        </apex:actionStatus>
                    </apex:pageBlockButtons>
                    <apex:pageMessages id="messages"/>
                    <apex:outputPanel id="outPanel" >
                        <div id="contentDiv" style="display: inline-block;">
                            <apex:repeat value="{!allAreas}" var="area">
                                <div id="{!area}Content" class="tabContent" style="display: {!IF(curRType == area, 'block;', 'none;')}" html-data-curType="{!curRType}" html-data-type="{!area}">
                                    <div style="margin: 0 auto; display: inline-block; width: 100%;">
                                        <table class="area-table" border="1" cellspacing="0" cellpadding="0">
                                            <tr>
                                                <th>Area</th>
                                                <th>Sub-Areas</th>
                                            </tr>
                                            <apex:repeat value="{!allAreas[area]}" var="wrapper">
                                                <tr>
                                                    <td style="vertical-align: middle; background-color: {!IF(wrapper.isRemoved, 'red;', IF(wrapper.area.Name != wrapper.savedName, 'yellow;', 'transparent;'))}" onmouseover="$('img:not(.toggle-arrow)', $(this)).css('visibility', 'visible');" onmouseout="$('img:not(.toggle-arrow)', $(this)).css('visibility', 'hidden');" onclick="toggleSubArea($('.toggle-arrow', $(this)));">
                                                        <div>
                                                            <apex:inputField value="{!wrapper.area.Name}" html-data-name="{!wrapper.savedName}" html-data-remove="{!wrapper.isRemoved}" onkeyup="valueChanged($(this), event);" onclick="preventProp(event);" onchange="valueChanged($(this), event);" />
                                                            <img class="toggle-arrow" src="/img/arrowDown.gif" title="Edit" style="float: right; padding: 2.5px"/>
                                                            <img class="removeAreaButton" src="/img/setup_minus.gif" onclick="removeAreaContainer(event, $(this));" title="Remove Area"/>
                                                        </div>
                                                    </td>
                                                    <td style="background: {!IF(wrapper.isRemoved, 'red;', '#F8F8F8')}">
                                                        <div>
                                                            <table class="sub-table" style="width: 100%; border-spacing: 0;">
                                                                <apex:repeat value="{!wrapper.subs}" var="subWrap" >
                                                                    <tr>
                                                                        <td onmouseover="$('img', $(this)).css('visibility', 'visible');" onmouseout="$('img', $(this)).css('visibility', 'hidden');" style="background-color: {!IF(subWrap.isRemoved, 'red;', IF(subWrap.sub.Name != subWrap.savedName, 'yellow;', 'transparent;'))}">
                                                                            <div>
                                                                                <apex:inputField value="{!subWrap.sub.Name}" html-data-name="{!subWrap.savedName}" html-data-remove="{!subWrap.isRemoved}" onkeyup="valueChanged($(this), event);" onchange="valueChanged($(this), event);" />
                                                                                <img class="removeSubButton" src="/img/setup_minus.gif" onclick="removeSubAreaContainer($(this));" title="Remove Sub-Area"/>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                </apex:repeat>
                                                            </table>
                                                        </div>
                                                    </td>
                                                </tr>
                                            </apex:repeat>
                                        </table>
                                    </div>
                                </div>
                            </apex:repeat>
                        </div>
                    </apex:outputPanel>
                </apex:pageBlock>
                <div>
                    <apex:actionFunction name="addArea" action="{!addArea}" rerender="outPanel" oncomplete="changesComplete();" status="loading" />
                    <apex:actionFunction name="removeArea" action="{!removeArea}" rerender="outPanel" oncomplete="changesComplete();" status="loading">
                        <apex:param name="areaEdit" value="" assignTo="{!areaIndex}" />
                    </apex:actionFunction>
                    <apex:actionFUnction name="unremoveArea" action="{!unremoveArea}" rerender="outPanel" oncomplete="changesComplete()" status="loading">
                        <apex:param name="areaEdit" value="" assignTo="{!areaIndex}" />
                    </apex:actionFUnction>
                    <apex:actionFunction name="addSub" action="{!addSubArea}" rerender="outPanel" oncomplete="changesComplete();" status="loading">
                        <apex:param name="areaEdit" value="" assignTo="{!areaIndex}" />
                    </apex:actionFunction>
                    <apex:actionFunction name="removeSub" action="{!removeSubArea}" rerender="outPanel" oncomplete="changesComplete();" status="loading">
                        <apex:param name="areaEdit" value="" assignTo="{!areaIndex}" />
                        <apex:param name="subAreaEdit" value="" assignTo="{!subAreaIndex}" />
                    </apex:actionFunction>
                    <apex:actionFunction name="unremoveSub" action="{!unremoveSubArea}" rerender="outPanel" oncomplete="changesComplete();" status="loading">
                        <apex:param name="areaEdit" value="" assignTo="{!areaIndex}" />
                        <apex:param name="subAreaEdit" value="" assignTo="{!subAreaIndex}" />
                    </apex:actionFunction>
                    <apex:actionFunction name="setType" action="{!setType}" rerender="" status="loading" oncomplete="changesComplete();">
                        <apex:param name="rType" value="" assignTo="{!curRType}" />
                    </apex:actionFunction>
                </div>
            </div>
        </div>
        </apex:form>
    </body>
</apex:page>