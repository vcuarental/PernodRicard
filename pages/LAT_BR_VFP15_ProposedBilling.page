<apex:page standardController="Analise_de_credito__c" extensions="LAT_BR_VFC13_NuevoAnalisisCredito" docType="html-5.0" action="{!pageActionInit}">
    <apex:includeScript value="{!$Resource.LAT_BR_CreditAnalysisResources}/js/jquery.min.js" />
    <apex:includeScript value="{!$Resource.LAT_BR_CreditAnalysisResources}/js/functions.js" />
    <apex:includeScript value="{!$Resource.LAT_BR_CreditAnalysisResources}/js/accounting.min.js" />
    <style>
        .accountTab .listViewport .subNav .linkBar, .accountTab .mComponent .cHeader, .accountTab .genericTable, .accountTab .bSubBlock, .accountTab .bPageBlock {
            border-top: 0px solid #236fbd;
        }
    </style>
    <apex:pageBlock mode="edit">
        <apex:outputpanel rendered="{!billingProposal.size == 0}">
            <c:LAT_BR_NoInformationToDisplay />
        </apex:outputpanel>
        <apex:pageBlockTable value="{!billingProposal}" var="item" rendered="{!billingProposal.size > 0}">
            <apex:column headerValue="{!$Label.LAT_BR_VFP13_QuarterColumn}" footerValue="Total">
                <apex:outputText value="{!item.Trimestre}" />
            </apex:column>
            <apex:column headerValue="{!$Label.LAT_BR_VFP13_PrevFY}" footerValue="0%" footerClass="PFAntTotal" styleClass="PFAnt" rendered="{!isRevision}">
                {!item.FYAnt}%
               
            </apex:column>
            <apex:column headerValue="{!$Label.LAT_BR_VFP13_CurrentFY}" footerValue="0%" footerClass="PFAtualTotal" styleClass="PFAtual">
                <apex:outputText value="{0, number, ###,###,##0.00}%">
                    <apex:param value="{!item.FY}" />
                </apex:outputText>
            </apex:column>
            <apex:column headerValue="{!$Label.LAT_BR_VFP13_FatPrevColumn}" footerValue="0" footerClass="PFTotalFooterAnt" styleClass="PFValorColumnAnt" rendered="{!isRevision}">
                <apex:outputText value="{0, number, ###,###,##0.00}">
                    <apex:param value="{!item.ValorAnt}" />
                </apex:outputText>
            </apex:column>
            <apex:column headerValue="{!$Label.LAT_BR_VFP13_CurrentFatColumn}" footerValue="0" footerClass="PFValorTotal" styleClass="PFValorColumn15">
                <apex:outputText value="{0, number, ###,###,##0.00}">
                    <apex:param value="{!item.Valor}" />
                </apex:outputText>
            </apex:column>
            <apex:column headerValue="{!$Label.LAT_BR_VFP_Growth}" footerValue="0%" footerClass="PFTotalCrescimiento" styleClass="PFCrescimiento" rendered="{!isRevision}">
                <input type="hidden" value="{!IF(item.ValorAnt != 0, ROUND(((item.Valor - item.ValorAnt ) / item.ValorAnt) * 100, 2), 0)}" />
                <apex:outputText value="{!IF(item.ValorAnt != 0, ROUND(((item.Valor - item.ValorAnt ) / item.ValorAnt) * 100, 2), 0)}%">
                </apex:outputText>
            </apex:column>
        </apex:pageBlockTable>
    </apex:pageBlock>
    
    <script>
    function parseDotToComma(val){
            /*nStr = val.replace(/\./g, '');
            nStr += '';
            x = nStr.split('.');
            x1 = x[0];
            x2 = x.length > 1  ? ',' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + '.' + '$2');
            }
            ret = x1 + x2;
            ret = val;
            ret = ret.toString().replace(/\./g, ',');
            ret = ret.toString().replace(/,/g, '.');
            return ret;*/
            
            val = val.toString();
            val = val.replace(/\./g, ',');
            

            nStr = val;
            x = nStr.split(',');
            x1 = x[0];
            x2 = x.length > 1  ? ',' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + '.' + '$2');
            }
            ret = x1 + x2;
            return ret;
        }

        function parseCommaToDot(val){
            val = val.replace(/\./g, '');
            return val.replace(/,/g, '.');
            //return val;
        }

            var PercentAtual = 0;
            $('.PFAtual').each(function() {
                var percent = $(this).text().replace('%','');
                PercentAtual += eval(percent);
                $(this).text(parseDotToComma($(this).text()));
            });
            $('.PFAtualTotal').text(parseDotToComma(PercentAtual.toFixed(2)) + '%');
        
            var PercentAnt = 0;
            $('.PFAnt').each(function() {
                var percent = $(this).text().replace('%','');
                percent = eval(percent).toFixed(2);
                PercentAnt += eval(percent);
                $(this).text(parseDotToComma(percent));
            });
            $('.PFAntTotal').text(parseDotToComma(PercentAnt.toFixed(2)) + '%');
        
            var total = 0;
            $('.PFValorColumn15').each(function() {
                total += eval($(this).text().replace(/,/g,''));
            });
            var calculatedTotal = ((total*100)/PercentAtual) || 0;
            $('.PFValorTotal').text(calculatedTotal.toFixed(2));
        
            total = 0;
            $('.PFValorColumnAnt').each(function() {
                total += eval($(this).text().replace(/,/g,''));
            });
            calculatedTotal = ((total*100)/PercentAnt) || 0;
            $('.PFTotalFooterAnt').text(calculatedTotal.toFixed(2));
            
            total = 0;
            $('.PFCrescimiento').each(function() {
                var percent = eval($(this).find('input').val());
                total += eval(percent);
                $(this).text(parseDotToComma(eval($(this).find('input').val())));
            });
            $('.PFTotalCrescimiento').text(parseDotToComma(Math.round(total * 100) / 100 + '%'));

            init();
    </script>
</apex:page>