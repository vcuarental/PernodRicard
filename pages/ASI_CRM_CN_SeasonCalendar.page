<!--
 ***************************************************************************************************************************
 * Name:        ASI_CRM_CN_SeasonCalendar.page
 * Description:
 *
 * Version History
 * Date             Developer               Comments
 * *************************************************************************************************************************
 * 2019-07-16       Wilson Chow             Created
 ***************************************************************************************************************************
-->

<apex:page controller="ASI_CRM_CN_SeasonCalendarPage_Ctrl"  standardStylesheets="false" showHeader="false" sidebar="false" >
    <head>
        <meta http-equiv="Content-type" content="text/html; charset=utf-8"/>
    </head>

    <!-- Import Library -->
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/styles/jquery-ui.min.css')}" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.7.5/css/bootstrap-select.min.css"/>

    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.ASI_CRM_SG_Library, '/lib/jquery.knob.min.js')}" />
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.7.5/js/bootstrap-select.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script src="/resource/1384483690000/ASI_MFM_dhtmlxschedulerJS" type="text/javascript" charset="utf-8"></script>
    <script src="/resource/1384669286000/ASI_MFM_dhtmlxscheduler_tooltipJS" type="text/javascript" charset="utf-8"></script>
    <link rel="stylesheet" href="/resource/1384664718000/ASI_MFM_dhtmlxschedulerCSS" type="text/css" media="screen" title="no title" charset="utf-8"/>

    <style type="text/css" media="screen">
        <!-- dhtmlx scheduler default style -->
        html, body {
            margin:0px;
            padding:0px;
            height:100%;
            overflow:hidden;
        }

        #nav_line_table_div .bootstrap-select {
            width: 150px;
            top: 0px;
        }

        <!-- Cause: dhx_cal_header not align with dhx_cal_data due to default bootstrap style = border-box -->
        *, *:before, *:after{
            -webkit-box-sizing: inherit;
            -moz-box-sizing: inherit;
            box-sizing: inherit;
        }

        <!-- Align bootstrap dropdown box style since the whole page box-sizing is changed to inherit -->
        .filter, .filter:before, .filter:after,
        .selectpicker, .selectpicker:before, .selectpicker:after,
        .form-control, .form-control:before, .form-control:after,
        #nav_line_table_div .bootstrap-select, #nav_line_table_div .bootstrap-select:before, #nav_line_table_div .bootstrap-select:after{
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }

        .btn:hover {
            opacity: 0.8;
        }

        .dhx_now .dhx_month_head, .dhx_now .dhx_month_body {
            background-color: lightblue;
        }

        .viewMoreDiv .popover {
            z-index: 999;
            text-align: left;
            max-width: 150px;
        }

        .bgGreen .dhx_month_head, .bgGreen .dhx_month_body{
            background-color: lightgreen;
        }

        .bgYellow .dhx_month_head, .bgYellow .dhx_month_body{
            background-color: yellow;
        }

        #spinnerDiv {
            display: none;
            z-index: 9999;
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            background-color: rgba(255,255,255,0.7);
        }

        .loader {
            margin: 100px auto;
            font-size: 25px;
            width: 1em;
            height: 1em;
            border-radius: 50%;
            position: relative;
            top: 50%;
            text-indent: -9999em;
            -webkit-animation: load5 1.1s infinite ease;
            animation: load5 1.1s infinite ease;
            -webkit-transform: translateZ(0);
            -ms-transform: translateZ(0);
            transform: translateZ(0);
        }
        @-webkit-keyframes load5 {
            0%,
            100% {
                box-shadow: 0em -2.6em 0em 0em #ff0000, 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.5), -1.8em -1.8em 0 0em rgba(255,0,0, 0.7);
            }
            12.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.7), 1.8em -1.8em 0 0em #ff0000, 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.5);
            }
            25% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.5), 1.8em -1.8em 0 0em rgba(255,0,0, 0.7), 2.5em 0em 0 0em #ff0000, 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            37.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.5), 2.5em 0em 0 0em rgba(255,0,0, 0.7), 1.75em 1.75em 0 0em #ff0000, 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            50% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.5), 1.75em 1.75em 0 0em rgba(255,0,0, 0.7), 0em 2.5em 0 0em #ff0000, -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            62.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.5), 0em 2.5em 0 0em rgba(255,0,0, 0.7), -1.8em 1.8em 0 0em #ff0000, -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            75% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.5), -1.8em 1.8em 0 0em rgba(255,0,0, 0.7), -2.6em 0em 0 0em #ff0000, -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            87.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.5), -2.6em 0em 0 0em rgba(255,0,0, 0.7), -1.8em -1.8em 0 0em #ff0000;
            }
        }
        @keyframes load5 {
            0%,
            100% {
                box-shadow: 0em -2.6em 0em 0em #ff0000, 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.5), -1.8em -1.8em 0 0em rgba(255,0,0, 0.7);
            }
            12.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.7), 1.8em -1.8em 0 0em #ff0000, 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.5);
            }
            25% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.5), 1.8em -1.8em 0 0em rgba(255,0,0, 0.7), 2.5em 0em 0 0em #ff0000, 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            37.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.5), 2.5em 0em 0 0em rgba(255,0,0, 0.7), 1.75em 1.75em 0 0em #ff0000, 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            50% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.5), 1.75em 1.75em 0 0em rgba(255,0,0, 0.7), 0em 2.5em 0 0em #ff0000, -1.8em 1.8em 0 0em rgba(255,0,0, 0.2), -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            62.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.5), 0em 2.5em 0 0em rgba(255,0,0, 0.7), -1.8em 1.8em 0 0em #ff0000, -2.6em 0em 0 0em rgba(255,0,0, 0.2), -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            75% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.5), -1.8em 1.8em 0 0em rgba(255,0,0, 0.7), -2.6em 0em 0 0em #ff0000, -1.8em -1.8em 0 0em rgba(255,0,0, 0.2);
            }
            87.5% {
                box-shadow: 0em -2.6em 0em 0em rgba(255,0,0, 0.2), 1.8em -1.8em 0 0em rgba(255,0,0, 0.2), 2.5em 0em 0 0em rgba(255,0,0, 0.2), 1.75em 1.75em 0 0em rgba(255,0,0, 0.2), 0em 2.5em 0 0em rgba(255,0,0, 0.2), -1.8em 1.8em 0 0em rgba(255,0,0, 0.5), -2.6em 0em 0 0em rgba(255,0,0, 0.7), -1.8em -1.8em 0 0em #ff0000;
            }
        }
    </style>

    <script type="text/javascript" charset="utf-8">
        var seasonData = new Array();
        var regionPicklistIndexMap = {};

        function init() {
            //scheduler.config.xml_date="%Y-%m-%d %H:%i";
            scheduler.config.xml_date="%m/%d/%Y %H:%i";
            scheduler.init('scheduler_here', new Date(),"month");
            scheduler.config.dblclick_create = false;
            scheduler.config.show_loading = true;
            scheduler.config.drag_create = false;
            scheduler.config.drag_resize = false;
            scheduler.config.drag_move = false;
            scheduler.config.time_step = 30;
            scheduler.config.update_render = true;
            scheduler.config.mark_now = false;
            scheduler.config.start_on_monday = false;
            scheduler.config.max_month_events = 4;

            scheduler.locale.labels.section_location="Location";

            scheduler.templates.month_date_class = function(date){
                var data = seasonData[formatDate(date)];

                if(checkEmptyVal(data)) {
                    return "";
                }

                if(Object.keys(data).length == Object.keys(regionPicklistIndexMap).length) {
                    return 'bgGreen';
                }
                else {
                    return 'bgYellow';
                }

                return "";
            };
            scheduler.templates.event_bar_text = function(start,end,event){
                return event.text;
            };
            scheduler.templates.event_bar_date = function(start,end,ev){
                return "• ";
            };
            scheduler.templates.month_events_link = function(date, count){
                var data = seasonData[formatDate(date)];

                var tmpMap = {};
                for(var region in data) {
                    tmpMap[regionPicklistIndexMap[region]] = region;
                }

                Object.keys(tmpMap).sort().forEach(function(key) {
                    tmpMap[key] = tmpMap[key];
                });

                var allData = '<div class="pop-content" style="display: none;">';
                for(var index in tmpMap) {
                    allData += '• ' + tmpMap[index] + '<br/>';
                }
                allData += '</div>';

                var startDate1stWk = getSchedulerMinDate();
                var endDate1stWk = new Date(startDate1stWk);
                endDate1stWk.setDate(startDate1stWk.getDate() + 6);

                if(date >= startDate1stWk && date <= endDate1stWk) {
                    return "<div class='viewMoreDivFirst'><a href='#' class='viewMoreLink'>View more(Total "+count+" regions)</a>" + allData + "</div>";
                }

                return "<div class='viewMoreDiv'><a href='#' class='viewMoreLink'>View more(Total "+count+" regions)</a>" + allData + "</div>";
            };
            scheduler.attachEvent("onViewMoreClick", function(date){
                return;
            });
            scheduler.attachEvent("onClick", function (id, e){
                return;
            });
            scheduler.attachEvent("onDblClick", function (id, e){
                return;
            });
        }

        function htmlDecode(value){
            if(value){
                return $('<div />').html(value).text();
            }else{
                return '';
            }
        }

        function showErrorMsg(type, msg) {
            if(type != null && type != undefined && type != '') {
                switch(type) {
                    case 'invalidStartDateFormat':
                        alert('Invalid start date format. Please follow yy-mm-dd.');
                        break;
                    case 'invalidEndDateFormat':
                        alert('Invalid end date format. Please follow yy-mm-dd.');
                        break;
                    case 'invalidDateFormat':
                        alert('Invalid date format. Please follow yy-mm-dd.');
                        break;
                    case 'missingStartDate':
                        alert('Missing start date.');
                        break;
                    case 'missingEndDate':
                        alert('Missing end date.');
                        break;
                    case 'missingRegion':
                        alert('Missing region.');
                        break;
                    case 'missingStatus':
                        alert('Missing status.');
                        break;
                    case 'remoteAction':
                        alert(msg);
                        break;
                    default:
                }
            }
        }

        function cloneObj(obj) {
            return JSON.parse(JSON.stringify(obj));
        }

        function getSchedulerMinDate() {
            return scheduler.getState().min_date;
        }

        function getSchedulerMaxDate() {
            var maxDate = scheduler.getState().max_date;
            var tmpDate = new Date(cloneObj(maxDate));
            tmpDate.setDate(tmpDate.getDate() - 1);
            return tmpDate;
        }

        function formatDate(date) {
            return $.datepicker.formatDate('yy-mm-dd', date);
        }

        function parseDate2Str(date) {
            if(checkEmptyVal(date)) {
                return null;
            }

            var tmpDateStr = formatDate(date);

            if(new Date(tmpDateStr) == 'Invalid Date') {
                if(datepickerId.toLowerCase().indexOf('start') != -1) {
                    showErrorMsg('invalidStartDateFormat', null);
                }
                else if(datepickerId.toLowerCase().indexOf('end') != -1) {
                    showErrorMsg('invalidEndDateFormat', null);
                }
                else {
                    showErrorMsg('invalidDateFormat', null);
                }
                return null;
            }

            return tmpDateStr;
        }

        function getEventDataByDefaultParams() {
            /*
            getEventData(
                getSchedulerMinDate(),
                getSchedulerMaxDate(),
                $('.selectpicker').val(),
                $('#status_dropdown').val());
            */
            getEventData(
                getSchedulerMinDate(),
                getSchedulerMaxDate(),
                $('.selectpicker').val(),
                'Active');
        }

        function setRegionPicklistIndexMap() {
            $('.selectpicker option').each(function(index) {
                if($(this).val() != 'All') {
                    regionPicklistIndexMap[$(this).val()] = index;
                }
            });
        }

        function setViewMorePopOver() {
            $(".viewMoreDiv > a").each(function(){
                var _this = this;
                $(_this).popover({
                    html : true,
                    placement: 'top',
                    trigger: 'hover',
                    content: function() {
                        return $(_this).siblings('.pop-content').html();
                    }
                });
            });

            $(".viewMoreDivFirst > a").each(function(){
                var _this = this;
                $(_this).popover({
                    html : true,
                    placement: 'bottom',
                    trigger: 'hover',
                    content: function() {
                        return $(_this).siblings('.pop-content').html();
                    }
                });
            });
        }

        function assign2GlobalSeasonData(data) {
            var result = {};
            for(var index in data) {
                var dateStr = formatDate(new Date(data[index].start_date));
                if(checkEmptyVal(dateStr)) {
                    continue;
                }
                if(checkEmptyVal(result[dateStr])) {
                    result[dateStr] = {};
                }
                result[dateStr][data[index].text] = data[index].seasonId;
            }
            seasonData = result;
            console.log('assign2GlobalSeasonData:' + seasonData);
        }

        function showSpinner() {
            $('#spinnerDiv').show();
        }

        function hideSpinner() {
            $('#spinnerDiv').hide();
        }

        function getEventData(startDate, endDate, regionList, status){

            console.log('getEventData(startDate=' + startDate + ', endDate='
                + endDate + ', regionList=' + regionList + ', status=' + status);

            showSpinner();

            if(checkEmptyVal(startDate)) {
                showErrorMsg('missingStartDate', null);
                hideSpinner();
                return;
            }
            var tmpStartDateStr = parseDate2Str(startDate);
            if(checkEmptyVal(tmpStartDateStr)) {
                hideSpinner();
                return;
            }

            if(checkEmptyVal(endDate)) {
                showErrorMsg('missingEndDate', null);
                hideSpinner();
                return;
            }
            var tmpEndDateStr = parseDate2Str(endDate);
            if(checkEmptyVal(tmpEndDateStr)) {
                hideSpinner();
                return;
            }

            if(checkEmptyVal(regionList)) {
                /*
                showErrorMsg('missingRegion', null);
                hideSpinner();
                return;
                */
            }
            var regionListJson = JSON.stringify(regionList);

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ASI_CRM_CN_SeasonCalendarPage_Ctrl.getEventData}',
                tmpStartDateStr, tmpEndDateStr, regionListJson, status,
                 function(result, event){
                    if(event.status) {
                        console.log('getEventData success');
                        scheduler.clearAll();
                        var formatted_json_event = JSON.parse(htmlDecode(result));
                        assign2GlobalSeasonData(formatted_json_event.Event.wholelist);
                        scheduler.parse(formatted_json_event.Event.wholelist, "json");
                        // trigger to set custom backgroud color css class
                        scheduler.updateView();
                        // resize grid cell height
                        setMonthDayHeight();
                        // set the view more link
                        setViewMorePopOver();
                        hideSpinner();
                    }
                    else {
                        showErrorMsg('remoteAction', event.message);
                        hideSpinner();
                    }
                 },
                 {escape: true}
            );
        }

        function setDatePicker() {
            $('#startDatePicker').datepicker({
                dateFormat: 'yy-mm-dd',
                onClose: function(dateText, instance) {
                    console.log('startDatePicker is changed');
                    if(new Date(dateText) == 'Invalid Date' || !isNaN(dateText)) {
                        showErrorMsg('invalidStartDateFormat', null);
                        // revert to last value
                        $(this).val(instance.lastVal);
                        return;
                    }
                    $('#startDatePicker').datepicker().datepicker('setDate', dateText);
                    scheduler.setCurrentView(new Date(dateText));
                    $('#endDatePicker').datepicker('option', 'minDate', dateText);

                    getEventDataByDefaultParams();
                }
            });
            $('#startDatePicker').datepicker().datepicker('setDate', getSchedulerMinDate());

            $('#endDatePicker').datepicker({
                dateFormat: 'yy-mm-dd',
                onClose: function(dateText, instance) {
                    console.log('endDatePicker is changed');
                    if(new Date(dateText) == 'Invalid Date' || !isNaN(dateText)) {
                        showErrorMsg('invalidEndDateFormat', null);
                        // revert to last value
                        $(this).val(instance.lastVal);
                        return;
                    }
                    $('#endDatePicker').datepicker().datepicker('setDate', dateText);
                }
            });
            $('#endDatePicker').datepicker('option', 'minDate', $('#startDatePicker').datepicker('getDate'));
            $('#endDatePicker').datepicker().datepicker('setDate', getSchedulerMaxDate());
        }

        function weekCount(year, month_number) {
            var minDate = getSchedulerMinDate();
            var maxDate = getSchedulerMaxDate();
            var diffTime = Math.abs(maxDate.getTime() - minDate.getTime());
            var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return Math.ceil(diffDays/7);
        }

        function setMonthDayHeight() {
            var year = scheduler.getState().date.getYear() + 1900;
            var month = scheduler.getState().date.getMonth();
            var weekNum = weekCount(year, month);
            var finalMonthBodyHeight = $('.dhx_cal_data').height() * 0.75 / weekNum;
            var ratio = finalMonthBodyHeight / $('.dhx_month_body').height();

            $('.dhx_month_body').css('height', finalMonthBodyHeight + 'px');
            $('.dhx_cal_event_clear').each(function(){
                $(this).css('top', (parseFloat($(this).css('top')) * ratio) + 'px');
            });
            $('.dhx_month_link').each(function(){
                $(this).css('top', (parseFloat($(this).css('top')) * ratio) + 'px');
            });
        }

        function setStyle() {
            $('#nav_line_table').children().find('tr').each(function(){
                $(this).children().css('padding', '5px');
            });

            $('.filter').css('width', '150px')

            $('.filter_label').css('font-size', '14px');

            $('.dhx_cal_navline').css({'height': '5%', 'position': 'relative'});

            $('#calendar_data').css({'height': '95%', 'position': 'relative'});

            setMonthDayHeight();
        }

        function valuesOf(elements) {
            return $.map(elements, function(element) {
                return element.value;
            });
        }

        function setDefaultSelectOption() {
            $('#status_dropdown').val('Active');
        }

        function setEvent() {
            $('.selectpicker').on('loaded.bs.select', function(){
	            var top =
	                $('#nav_line_table_div .bootstrap-select').position().top
	                + $('#nav_line_table_div .bootstrap-select').height();

	            $('#nav_line_table_div .dropdown-menu').css('top', top + 'px');
            });

            $(".selectpicker").on("changed.bs.select", function(e, clickedIndex, newValue, oldValue) {
                // newValue = selected
                //oldValue = unselected
                //console.log(this.options[clickedIndex].value, clickedIndex, newValue, oldValue);
                console.log('Region dropdown option is clicked:' + this.options[clickedIndex].value);
                if(this.options != null
                    && this.options != undefined
                    && clickedIndex != null
                    && clickedIndex != undefined
                    && this.options[clickedIndex] != null
                    && this.options[clickedIndex] != undefined
                    && this.options[clickedIndex].value == 'All') {

                    if(newValue != null
                        && newValue != undefined
                        && newValue) {
                        // prevent trigger multiple change event
                        $('.selectpicker').selectpicker('val', valuesOf($('.selectpicker').find('option')));
                    }
                    else if(oldValue != null
                        && oldValue != undefined
                        && oldValue) {
                        $('.selectpicker').selectpicker('val', []);
                    }
                }
                else {
                    // unselect All
                    if(oldValue != null
                        && oldValue != undefined
                        && oldValue
                        && $('.selectpicker').val() != null
                        && $('.selectpicker').val() != undefined
                        && $('.selectpicker').find('option') != null
                        && $('.selectpicker').find('option') != undefined
                        && $('.selectpicker').val().length != $('.selectpicker').find('option').length) {
                        $('.selectpicker').selectpicker('val', valuesOf($('.selectpicker').find('option:selected[value!=All]')));
                    }
                    // select All
                    else if(newValue != null
                        && newValue != undefined
                        && newValue
                        && $('.selectpicker').val() != null
                        && $('.selectpicker').val() != undefined
                        && $('.selectpicker').find('option') != null
                        && $('.selectpicker').find('option') != undefined
                        && $('.selectpicker').val().length == $('.selectpicker').find('option').length - 1) {
                        $('.selectpicker').selectpicker('val', valuesOf($('.selectpicker').find('option')));
                    }
                }
                $('.selectpicker').selectpicker('refresh');
                getEventDataByDefaultParams();
            });

            $('#status_dropdown').on('change', function() {
                console.log('status dropdown option is changed to:' + $(this).val());
                getEventDataByDefaultParams();
            });

            $('#confirmBtn').on('click', function(){
                console.log('Confirm Button is clicked');
                saveSeasonData(
                    $('#startDatePicker').datepicker().datepicker('getDate'),
                    $('#startDatePicker').val(),
                    $('#endDatePicker').datepicker().datepicker('getDate'),
                    $('#endDatePicker').val(),
                    $('.selectpicker').val());

            });

            $(".dhx_cal_prev_button, .dhx_cal_next_button, .dhx_cal_today_button").click(function(){
                console.log($(this).attr('class') + ' is clicked');
                $('#startDatePicker').datepicker().datepicker('setDate', getSchedulerMinDate());
                $('#endDatePicker').datepicker('option', 'minDate', $('#startDatePicker').datepicker('getDate'));
                $('#endDatePicker').datepicker().datepicker('setDate', getSchedulerMaxDate());
                getEventDataByDefaultParams();
            });
        }

        function checkEmptyVal(val) {
            if(val == null || val == undefined || val == '') {
                return true;
            }
            return false;
        }

        function saveSeasonData(startDate, startDateVal, endDate, endDateVal, regionList) {
            console.log('saveSeasonData(startDate=' + startDate + ', startDateVal=' + startDateVal
                + ', endDate=' + endDate + ', endDateVal=' + endDateVal + ', regionList=' + regionList);

            showSpinner();

            if(checkEmptyVal(startDate) || checkEmptyVal(startDateVal)) {
                showErrorMsg('missingStartDate', null);
                hideSpinner();
                return;
            }
            var tmpStartDateStr = parseDate2Str(startDate);
            if(checkEmptyVal(tmpStartDateStr)) {
                hideSpinner();
                return;
            }
            else if(tmpStartDateStr != startDateVal) {
                showErrorMsg('invalidStartDateFormat', null);
                hideSpinner();
                return;
            }

            if(checkEmptyVal(endDate) || checkEmptyVal(endDateVal)) {
                showErrorMsg('missingStartDate', null);
                hideSpinner();
                return;
            }
            var tmpEndDateStr = parseDate2Str(endDate);
            if(checkEmptyVal(tmpEndDateStr)) {
                hideSpinner();
                return;
            }
            else if(tmpEndDateStr != endDateVal) {
                showErrorMsg('invalidEndDateFormat', null);
                hideSpinner();
                return;
            }

            if(checkEmptyVal(regionList)) {
                showErrorMsg('missingRegion', null);
                hideSpinner();
                return;
            }

            var greppedRegionList = jQuery.grep(regionList, function(value) {
              return value != 'All';
            });

            console.log('greppedRegionList=' + greppedRegionList);
            var regionListJson = JSON.stringify(greppedRegionList);

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ASI_CRM_CN_SeasonCalendarPage_Ctrl.saveSeasonData}',
                tmpStartDateStr, tmpEndDateStr, regionListJson,
                 function(result, event){
                    if(event.status) {
                        console.log('saveSeasonData success');
//                        getEventData(startDate, endDate, regionList, 'Active');
                        getEventDataByDefaultParams();
                    }
                    else {
                        showErrorMsg('remoteAction', event.message);
                        hideSpinner();
                    }
                 },
                 {escape: true}
            );
        }

        // testing purpose
        function deleteSeasonData(startDateStr, endDateStr, regionList, status) {
            console.log('deleteSeasonData(startDate=' + startDateStr + ', endDate='
                + endDateStr + ', regionList=' + regionList + ', status=' + status);

            var greppedRegionList = jQuery.grep(regionList, function(value) {
              return value != 'All';
            });

            console.log('greppedRegionList=' + greppedRegionList);
            var regionListJson = JSON.stringify(greppedRegionList);

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ASI_CRM_CN_SeasonCalendarPage_Ctrl.deleteSeasonData}',
                startDateStr, endDateStr, regionListJson, status,
                 function(result, event){
                    if(event.status) {
                        console.log('deleteSeasonData success');
                    }
                    else {
                        showErrorMsg('remoteAction', event.message);
                    }
                 },
                 {escape: true}
            );
        }

        $(document).ready(
            function() {
                init();
                setRegionPicklistIndexMap();
                setDatePicker();
                setDefaultSelectOption();
                setStyle();
                setEvent();
                getEventDataByDefaultParams();
            }
        );
    </script>


    <body>

        <div id="scheduler_here"
             class="dhx_cal_container"
             style='width:100%; height:100%;'>

            <div class="dhx_cal_navline">

                <div class="dhx_cal_prev_button"
                     style="text-align: center">
                    Prev
                </div>
                <div class="dhx_cal_next_button"
                     style="text-align: center">
                    Next
                </div>
                <div class="dhx_cal_today_button"/>
                <div class="dhx_cal_date"/>

                <div id="nav_line_table_div">
                    <apex:form >
                        <table id="nav_line_table"
                               cellpadding="0"
                               cellspacing="0">
                            <tr>
                                <td>
                                    <label for="startDatePicker"
                                           class="filter_label">
                                        Start Date
                                    </label>
                                </td>
                                <td>
                                    <input type="text"
                                           id="startDatePicker"
                                           class="datePicker"
                                           data-provide="datepicker"/>
                                </td>

                                <td>
                                    <label for="region_dropdown"
                                           class="filter_label">
                                        Region
                                    </label>
                                </td>
                                <td>
                                    <select id="region_dropdown"
                                            class="filter selectpicker"
                                            multiple="true">
                                        <apex:repeat value="{!RegionPicklist}" var="index">
                                            <option value="{!index}" selected="selected">{!index}</option>
                                        </apex:repeat>
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label for="endDatePicker"
                                           class="filter_label">
                                        End Date
                                    </label>
                                </td>
                                <td>
                                    <input type="text"
                                           id="endDatePicker"
                                           class="datePicker"
                                           data-provide="datepicker"/>
                                </td>

                                <td>
                                    <!--
                                    <label for="status_dropdown"
                                           class="filter_label">
                                        Status
                                    </label>
                                    -->
                                </td>
                                <td>
                                    <!--
                                    <select id="status_dropdown"
                                            class="filter form-control">
                                        <apex:repeat value="{!StatusPicklist}" var="index">
                                            <option value="{!index}">{!index}</option>
                                        </apex:repeat>
                                    </select>
                                    -->
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <input type="button"
                                           id="confirmBtn"
                                           class="btn btn-outline-secondary"
                                           value="Confirm"/>
                                </td>
                            </tr>
                        </table>
                    </apex:form>
                </div>
            </div>

            <div id="calendar_data">
                <div class="dhx_cal_header"
                     style="margin-top:35px;"/>

                <div class="dhx_cal_data"
                     style="margin-top:35px;"/>
            </div>
        </div>

        <div id="spinnerDiv">
            <div class="loader"></div>
        </div>
    </body>
</apex:page>