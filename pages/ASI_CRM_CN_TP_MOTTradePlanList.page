<!-- Name: ASI_CRM_CN_TP_MOTTradePlanList -->
<apex:page controller="ASI_CRM_CN_TP_MOTTradePlanListCtrl" sidebar="false" showHeader="true">
    <link href="{!URLFOR($Resource.ASI_CRM_CN_TP_AngularUIGrid,'ui-grid-min.css')}" rel="stylesheet" type="text/css" />
    <style>
    .fontSize {
        font-size: 12px;
    }

    .inputFontSize {
        font-size: 8px;
    }

    .inputDateWidth {
        width: 90px;
    }

    .cellP {
        margin: 0;
        padding: 5px;
    }

    .editCell {
        width: 80%;
    }

    .redCell {
        background: #f1de91 !important;

    }

    .ui-grid-cell-contents,
    .ui-grid-header-cell-primary-focus {
        text-overflow: clip;
        white-space: normal;
    }

    .ui-grid-header-cell-primary-focus {
        height: 30px;
    }

    button {
        cursor: pointer;
    }

    .gridContainer {
        position: relative;77
    }

    .grid {
        width: 97vw;
        height: 70vh;
    }
    </style>
    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_Angular, 'angular/angular.min.js')}"></script> 
    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_Angular, 'angular-sanitize/angular-sanitize.min.js')}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_Angular, 'angular-touch/angular-touch.min.js')}"></script>

    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_AngularUIGrid, 'lodash.min.js')}"></script> 
    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_AngularUIGrid, 'jszip.min.js')}"></script> 
    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_AngularUIGrid, 'excel-builder.dist.js')}"></script> 
    <script type="text/javascript" src="{!URLFOR($Resource.ASI_CRM_CN_TP_AngularUIGrid, 'ui-grid.js')}"></script> 
    <apex:stylesheet value="{!URLFOR($Resource.ASI_CRM_CN_TP_UploadCSV, '/JSPackage/css/all.min.css')}" />
    <apex:slds />
    <div ng-app="app" ng-controller="MainCtrl" class="fontSize girdContainer">
        <div class="slds-scope">
                    <div ng-show='loading' class="demo-only">
                      <div class="slds-spinner_container">
                        <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
                          <span class="slds-assistive-text">Loading</span>
                          <div class="slds-spinner__dot-a"></div>
                          <div class="slds-spinner__dot-b"></div>
                        </div>
                      </div>
                    </div>
        </div>

        <div style="margin: 5px; text-align: right;">
            <div style="width: 140px;height: 30px; float: left;">
                <a onclick="window.open('{!bpListViewURL}')" style="float: left;margin-top: 10px; text-decoration: underline;">
                {!$Label.ASI_CRM_CN_TP_ViewAllBP}</a>
            </div>
            <div style="width: 150px;height: 30px; float: left;">
                <a onclick="window.open('/apex/ASI_CRM_CN_TP_TradePlanUpload')" style="float: left;margin-top: 10px; text-decoration: underline;">
                {!$Label.ASI_CRM_CN_TP_Trade_Plan_Upload}</a>
            </div>
            <button class="slds-button slds-button_neutral" ng-click="generate999()" ng-show="isShow999" >{!$Label.ASI_CRM_CN_TP_S_Generate_Dum_Product}</button>
            <button class="slds-button slds-button_neutral" ng-click="deleteItems()">{!$Label.ASI_CRM_CN_FG_Delete}</button>
            <button class="slds-button slds-button_neutral" ng-click="submitForApproval()" ng-show="isShowSubmit" >{!$Label.ASI_CRM_CN_TP_S_Submit_Approval}</button>
            <button class="slds-button slds-button_neutral" ng-click="generatePO()" ng-show="isShowPo">{!$Label.ASI_CRM_CN_TP_S_Generate_PO}</button>
            <button class="slds-button slds-button_neutral" ng-click="generatePayment()" ng-show="isShowPayment">{!$Label.ASI_CRM_CN_TP_S_Make_Payment}</button>
            <button class="slds-button slds-button_neutral" ng-click="generatePayment()" ng-show="isShowPayment2">{!$Label.ASI_CRM_CN_TP_S_Generate_Payment}</button>
            <button class="slds-button slds-button_neutral" ng-click="save()" ng-show="isShowSave">{!$Label.ASI_CRM_CN_TP_S_Save}</button>
            <button class="slds-button slds-button_neutral" ng-click="cancel()" ng-show="isShowCancel">{!$Label.ASI_CRM_CN_TP_S_Cancel}</button>
        </div>

        <div ui-grid-exporter="true" ui-grid="gridOptions" ui-grid-selection="true" ui-grid-cellNav="true" ui-grid-edit="true" ui-grid-row-edit="true" ui-grid-pinning='true' class="grid" ></div>
        <!-- show submit approval remark -->
        <div ng-if="showNegativeApprovalModal">
            <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open slds-modal_small" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" style="width: 85%;padding-left: 100px;
text-align: -webkit-center;">
            <div class="slds-modal__container">
                <header class="slds-modal__header">
                      <h2 id="modal-heading-01" class="slds-modal__title slds-hyphenate">特殊项说明</h2>
                </header>
                <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1" >
                      <p>当前提交审批的Trade Plan数据中有{{remarkNum}}条数据由于包含特殊数据(低于LPP，单笔超100K，超过标准费比)，需填写说明</p><br/>
                      <p style="float: left; padding-left: 12px;"><abbr class="slds-required" title="required">* </abbr>说明 </p><textarea required="true" style="width: 570px; height: 60px;" id="remarkMsg"></textarea>
                </div>
                <footer class="slds-modal__footer">
                      <button class="slds-button slds-button_neutral" ng-click="hideModal()">Cancel</button>
                      <button class="slds-button slds-button_brand" ng-click="subSave()">Save</button>
                </footer>
              </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open"></div>
        </div>
    </div>

    

    <script>

    // Set timeout at page level
    Visualforce.remoting.timeout = 120000;


    var app = angular.module('app', ['ngTouch','ui.grid', 'ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.selection', 'ngSanitize', 'ui.grid.exporter','ui.grid.pinning']);

    app.controller('MainCtrl', ['$scope', 'uiGridConstants', '$q', '$sce', function MainCtrl($scope, uiGridConstants, $q, $sce) {
        // $scope.editMsg = [];
        $scope.myData = [];
        $scope.isShowSubmit = false;
        $scope.isShowPo = false;
        $scope.isShowPayment = false;
        $scope.isShowPayment2 = false;
        $scope.isShowSave = false;
        $scope.showPmtSave = false;
        $scope.isShowCancel = false;
        $scope.isShow999 = true;
        //$scope.loading = true;
        $scope.remarkNum = 0;
        // $scope.remarkMsg = '';
        $scope.showNegativeApprovalModal = false;
        $scope.fiscalYears = getFiscalYears();
        $scope.proModeOptions = JSON.parse('{!proModeOptions}');
        $scope.planStatusOptions = JSON.parse('{!planStatusOptions}');;
        $scope.poStatusOptions = JSON.parse('{!poStatusOptions}');;

        
        $scope.gridOptions = {
            data: $scope.myData,
            enableFiltering: true,
            enableGridMenu: true,
            rowHeight: 48,
            exporterMenuExcel: false,
            exporterMenuPdf: false,
            enableColumnMenus: true,
            enableRowSelection: true,
            showGridFooter: true,
            enableCellEdit: false,
            exporterOlderExcelCompatibility : true,
            onRegisterApi: function(gridApi){
                $scope.gridApi = gridApi;
                gridApi.rowEdit.on.saveRow($scope, $scope.saveRow);
                //edit
                gridApi.edit.on.afterCellEdit($scope,function(rowEntity, colDef, newValue, oldValue){
                    var msg = 'edited Column:' + rowEntity.Id + ' Column:' + colDef.displayName + ' newValue:' + newValue + ' oldValue:' + oldValue ;
                    //edit trigger other cols change
                    
                    if (newValue != oldValue) {
                        if (colDef.field != 'ActualQty' && colDef.field != 'ThisPromotionAmount' && colDef.field != 'ThisFixedCost') {
                            $scope.isShowSave = true;
                        }
                        rowEntity.isEdit=true;
                        $scope.isShowCancel = true;
                        $scope.isShowSubmit = false;
                        $scope.isShowPo = false;
                        $scope.isShowPayment = false;
                        $scope.isShowPayment2 = false;
                        $scope.isShow999 = false;

                        rowEntity.ThisFixedCost = judgeNumber(rowEntity.ThisFixedCost);
                        rowEntity.PromotionPaymentAmount = judgeNumber(rowEntity.PromotionPaymentAmount);
                        rowEntity.FixedCostPaymentAmount = judgeNumber(rowEntity.FixedCostPaymentAmount);
                        rowEntity.ActualQty = judgeNumber(rowEntity.ActualQty);
                        rowEntity.TotalActualQty = judgeNumber(rowEntity.TotalActualQty);
                        rowEntity.T1Price = judgeNumber(rowEntity.T1Price);
                        if (colDef.field === 'ActualQty' || colDef.field == 'Subsidies') {
                            rowEntity.AdvicePromotionAmount = judgeNumber(rowEntity.ActualQty * rowEntity.Subsidies).toFixed(2);
                            if (rowEntity.PromotionMode == 'intake price verification' || rowEntity.PromotionMode == '进价核销') {
                                rowEntity.AdvicePromotionAmount = judgeNumber((rowEntity.AdvicePromotionAmount / (1 + $scope.cnTaxRate)).toFixed(2));
                            }
                            rowEntity.ThisPromotionAmount = rowEntity.AdvicePromotionAmount;
                        }
                        
                        if (colDef.field === 'ThisPromotionAmount' || colDef.field === 'ThisFixedCost' || colDef.field === 'ActualQty') {
                            var totalFee = parseFloat(rowEntity.ThisPromotionAmount) + parseFloat(rowEntity.ThisFixedCost) + parseFloat(rowEntity.PromotionPaymentAmount) + parseFloat(rowEntity.FixedCostPaymentAmount);
                            var totalAmount = (parseFloat(rowEntity.ActualQty) + parseFloat(rowEntity.TotalActualQty)) * rowEntity.T1Price;
                            rowEntity.ActualTotalFeePercent = judgeNumber((totalFee / totalAmount) * 100).toFixed(2) + '%';
                            $scope.isShowPayment2 = true;
                        }
                        
                        if (colDef.field === 'PromotionMode' || colDef.field == 'Subsidies' || colDef.field == 'EstimatedQty') {
                            rowEntity.EstimatedAmount = judgeNumber(rowEntity.EstimatedQty * rowEntity.Subsidies).toFixed(2);
                            if (rowEntity.PromotionMode == 'intake price verification' || rowEntity.PromotionMode == '进价核销') {
                                rowEntity.EstimatedAmount = judgeNumber((rowEntity.EstimatedAmount / (1 + $scope.cnTaxRate)).toFixed(2));
                            }
                            
                        }
                        
                    }

                    // alert(msg);
                    $scope.$apply();
                });

                //change filter
                var filterChanged = false;

                gridApi.core.on.filterChanged($scope, function() {
                    filterChanged = true;
                });

                gridApi.core.on.rowsVisibleChanged($scope, function() {
                    if(!filterChanged || $scope.isShowSave || $scope.isShowPayment2){
                        return;
                    }
                    filterChanged = false;
                    var filtered = _.filter($scope.gridApi.grid.rows, function(o) { return o.visible; });
                    var entities = _.map(filtered, 'entity'); 
                    const kaSet = new Set();
                    const fySet = new Set();
                    entities.forEach(function(row){
                        kaSet.add(row.KAAccountName);
                        fySet.add(row.FiscalYear);
                    });
                    
                    if (kaSet.size === 1 && fySet.size ===1) {
                        $scope.isShowSubmit = true;
                        $scope.isShowPo = true;
                        $scope.isShowPayment = true;
                    } else {
                        $scope.isShowSubmit = false;
                        $scope.isShowPo = false;
                        $scope.isShowPayment = false;
                    }

                });

            },
            columnDefs: [
                {
                    field: 'PlanName',
                    displayName: '活动编号',
                    enablePinning:true,
                    pinnedLeft:true,
                    minWidth: 120,
                    cellTemplate: '<p><a href="/{{row.entity.PlanId}}" target="_blank" ng-bind-html="row.entity.PlanName"></a></p>'
                },
                {
                    field: 'KAAccountName',
                    displayName: 'KA客户',
                    enablePinning:true,
                    minWidth: 100,
                    cellTemplate: '<p ng-bind-html="row.entity.KAAccountName"></p>'
                },
                {
                    field: 'FiscalYear',
                    displayName: '财年',
                    enablePinning:true,
                    minWidth: 100,
                    filter: {
                        type: uiGridConstants.filter.SELECT,
                        condition: uiGridConstants.filter.EXACT,
                        selectOptions: $scope.fiscalYears
                    },
                },
                {
                    field: 'Region',
                    displayName: '区域',
                    minWidth: 100,
                },
                {
                    field: 'CoverCity',
                    displayName: '覆盖城市',
                    minWidth: 70,
                },
                 {
                    field: 'OutletCount',
                    displayName: '店家数量',
                    minWidth: 70,
                },
                {
                    field: 'CustomerName',
                    displayName: '店家名称',
                    minWidth: 130,
                    cellTemplate: '<p ><a href="/{{row.entity.CustomerId}}" target="_blank" ng-bind-html="row.entity.CustomerName"></a></p>'
                },
                {
                    field: 'CustomerOwnerName',
                    displayName: '店家所有人信息',
                    minWidth: 120,
                },
                {
                    field: 'AccountType',
                    displayName: '客户类型',
                    minWidth: 70,
                },
                {
                    field: 'Channel',
                    displayName: '渠道',
                    minWidth: 100,
                },
               
                
                {
                    field: 'PlanStartDate',
                    minWidth: 120,
                    displayName: '活动开始时间',
                    type: 'date',
                    cellFilter: 'date:"yyyy/MM/dd"',
                    filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input class="inputFontSize inputDateWidth" type="date" ng-model="colFilter.term" /></div>',
                    filters: [{
                            filterName: "from",
                            condition: uiGridConstants.filter.GREATER_THAN_OR_EQUAL,
                            placeholder: 'from'
                        }
                    ]
                },
                {
                    field: 'PlanEndDate',
                    minWidth: 120,
                    displayName: '活动结束时间',
                    type: 'date',
                    cellFilter: 'date:"yyyy/MM/dd"',
                    filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input class="inputFontSize inputDateWidth" type="date" ng-model="colFilter.term" /></div>',
                    filters: [
                        {
                            filterName: "to",
                            condition: uiGridConstants.filter.LESS_THAN_OR_EQUAL,
                            placeholder: 'to'
                        }
                    ]
                },
                {
                    field: 'PlanStatus',
                    minWidth: 80,
                    displayName: '状态',
                    filter: {
                        type: uiGridConstants.filter.SELECT,
                        condition: uiGridConstants.filter.EXACT,
                        selectOptions: $scope.planStatusOptions
                    },
                },
                {
                    field: 'PONumber',
                    minWidth: 100,
                    displayName: 'PO编号',
                    cellTemplate: '<p ><a href="/{{row.entity.POId}}" target="_blank" ng-bind-html="row.entity.PONumber"></a></p>'
                },
                {
                    field: 'POStatus',
                    minWidth: 80,
                    displayName: 'PO状态',
                    filter: {
                        type: uiGridConstants.filter.SELECT,
                        condition: uiGridConstants.filter.EXACT,
                         selectOptions: $scope.poStatusOptions
                    },
                },
                {
                    field: 'Remark',
                    minWidth: 80,
                    displayName: 'PO Remark',
                },
                {
                    field: 'Note',
                    minWidth: 80,
                    displayName: '备注',
                },
                {
                    field: 'SubbrandNumber',
                    displayName: '子品牌',
                    minWidth: 130,
                    cellTemplate: '<p ><a href="/{{row.entity.SubbrandId}}" target="_blank" ng-bind-html="row.entity.SubbrandNumber"></a></p>'
                },
                {
                    field: 'BottleSize',
                    displayName: '尺寸(cl)',
                    minWidth: 70,
                },
                {
                    field: 'ItemGroupName',
                    displayName: '产品',
                    minWidth: 130,
                    cellTemplate: '<p ><a href="/{{row.entity.ItemGroupId}}" target="_blank" ng-bind-html="row.entity.ItemGroupName"></a></p>'
                },
                {
                    field: 'PromotionMode',
                    displayName: '促销机制 ✎',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    editableCellTemplate: 'ui-grid/dropdownEditor',
                    editDropdownValueLabel: 'PromotionMode',
                    editDropdownOptionsArray: $scope.proModeOptions,
                    minWidth: 100,
                },
                {
                    field: 'PromotionContent',
                    minWidth: 130,
                    displayName: '促销内容 ✎',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                },
                {
                    field: 'RetailPrice',
                    displayName: '产品零售价/瓶 ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 120,
                },
                {
                    field: 'PromotionUnitPrice',
                    displayName: '促销单价/瓶 ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 110,
                },
                {
                    field: 'NormalPurchasePrice',
                    displayName: '正常进价/瓶 ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 110,
                },
                {
                    field: 'PromotionPurchasePrice',
                    displayName: '促销进价/瓶 ✎',
                    enableCellEdit: true,
                    type: 'number',
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 110,
                },
                {
                    field: 'LPP',
                    displayName: 'LPP',
                    minWidth: 80,
                },
                {
                    field: 'PriceDiffer',
                    displayName: '价差',
                    minWidth: 80,
                    cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {if (grid.getCellValue(row,col) != '' && Number(grid.getCellValue(row,col)) < 0) {
                            return 'redCell';
                          }
                        }
                },
                {
                    field: 'Subsidies',
                    displayName: '单瓶补贴 ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete' && (scope.row.entity.PromotionMode == 'scan data' || scope.row.entity.PromotionMode == 'scan data(含税)') && scope.row.entity.SubbrandNumber != '999';
                    },
                    minWidth: 100,
                },
                {
                    field: 'EstimatedQty',
                    displayName: '预计销量(瓶) ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 120,
                },
                {
                    field: 'EstimatedAmount',
                    displayName: '预计促销金额',
                    minWidth: 100,
                     cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {
                        if (grid.getCellValue(row,col) != '' && Number(grid.getCellValue(row,col)) > {!estAmountLimit}) { 
                            return 'redCell';
                        }
                    }
                },
                {
                    field: 'PostersFee',
                    displayName: '海报费 ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 100,
                },
                {
                    field: 'DisplayFee',
                    displayName: '二次陈列费 ✎',
                    type: 'number',
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus != 'Complete'
                    },
                    minWidth: 100,
                },
                {
                    field: 'PlanFeePercent',
                    displayName: '预计促销费比',
                    minWidth: 100,
                },
                {
                    field: 'Benchmark',
                    displayName: '标准费比',
                    minWidth: 80,
                },
                {
                    field: 'PercentDiffers',
                    displayName: '费比差',
                    minWidth: 80,
                    cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {if (grid.getCellValue(row,col) != '' && parseFloat(grid.getCellValue(row,col)) < 0) {
                            return 'redCell';
                          }
                        }
                },
                {
                    field: 'TotalFeePercent',
                    displayName: '合计费比',
                    minWidth: 80,
                },
                {
                    field: 'AdvicePromotionAmount',
                    displayName: '建议促销付款金额',
                    minWidth: 120,
                    cellTemplate: '<p ng-bind-html="row.entity.AdvicePromotionAmount"></p>'
                },
                {
                    field: 'AdviceFixedCost',
                    displayName: '建议海报陈列费',
                    minWidth: 120,
                },
                {
                    field: 'ActualFeePercent',
                    displayName: '实际促销费比',
                    minWidth: 100,
                },
                {
                    field: 'ActualTotalFeePercent',
                    displayName: '实际合计费比',
                    minWidth: 100,
                },
                {
                    field: 'TotalActualQty',
                    displayName: '已付款销量(瓶)',
                    minWidth: 100,
                },
                {
                    field: 'PromotionPaymentAmount',
                    displayName: '已付款促销费',
                    minWidth: 120,
                },
                {
                    field: 'FixedCostPaymentAmount',
                    displayName: '已付款海报陈列费',
                    minWidth: 120,
                },
            ],
        }

        function createSuperLabel(url, id) {      
            let a = document.createElement("a");           
            a.setAttribute("href", url);      
            a.setAttribute("target", "_blank");   
            a.setAttribute("id", id);       
               
            if(!document.getElementById(id)) {
                document.body.appendChild(a);
            }      
            a.click();    
        }
        $scope.generate999 = function() {
            var selectedLineItems = $scope.gridApi.selection.getSelectedRows();
            if (selectedLineItems.length == 0) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_Generate_Dum_Product_QTY}');
                return;
            }
            var hasOtherStatus = false;
            for (let i = 0; i < selectedLineItems.length; i++) {
                if (selectedLineItems[i].PlanStatus == 'Complete') {
                    hasOtherStatus = true;
                }
            }
            if (hasOtherStatus) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_TP_Status}');
                return;
            }
            if (confirm('{!$Label.ASI_CRM_CN_TP_S_Selected_TP_QTY}' + selectedLineItems.length + ' {!$Label.ASI_CRM_CN_TP_S_IS_Generate_Dum_Product}')) {
                $scope.loading = true;
                var pliJson = JSON.stringify(selectedLineItems);
                 ASI_CRM_CN_TP_MOTTradePlanListCtrl.generate999(pliJson,function(result,event){
                    if(event.statusCode == 200 ){
                        console.log(result);
                        if (result.ERROR == undefined || result.ERROR ==  null) {
                            alert('{!$Label.ASI_CRM_CN_TP_S_Dum_Product_Success_Generated}');
                            location.reload();
                        } else {
                            alert(result.ERROR);
                            $scope.loading = false;
                            $scope.$apply();
                        }
                        
                    } else if(event.type === 'exception'){
                        alert('{!$Label.ASI_CRM_CN_TP_S_Dum_Product_Error_Generated}' + event.message);
                        $scope.loading = false;
                        $scope.$apply();
                    }
                });
            }

        }
        $scope.deleteItems = function() {
            var selectedLineItems = $scope.gridApi.selection.getSelectedRows();
            if (selectedLineItems.length == 0) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_Delete_Qty}');
                return;
            }
            console.log("selectedLineItems",selectedLineItems);
            var hasOtherStatus = false;
            var notOwner = false;

            for (let i = 0; i < selectedLineItems.length; i++) {
                if (selectedLineItems[i].PlanStatus != 'Draft') {
                    hasOtherStatus = true;
                }
                console.log("userName",'{!$User.Id}');
                if (selectedLineItems[i].CustomerOwnerId != '{!$User.Id}') {
                    notOwner = true;
                }
            }
            if (hasOtherStatus) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_Draft}');
                return;
            }
            if (notOwner) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_Owner}');
                return;
            }

            if (confirm('{!$Label.ASI_CRM_CN_TP_S_Selected_TP_QTY}' + selectedLineItems.length + ' {!$Label.ASI_CRM_CN_TP_S_Chk_Confirm_Delete}')) {
                $scope.loading = true;
                var pliJson = JSON.stringify(selectedLineItems);
                 ASI_CRM_CN_TP_MOTTradePlanListCtrl.deleteItems(pliJson,function(result,event){
                    if(event.statusCode == 200 ){
                        console.log(result);
                        if (result.ERROR == undefined || result.ERROR ==  null) {
                            alert('Delete Success');
                            location.reload();
                        } else {
                            alert(result.ERROR);
                            $scope.loading = false;
                            $scope.$apply();
                        }
                        
                    } else if(event.type === 'exception'){
                        alert('{!$Label.ASI_CRM_CN_TP_S_Dum_Product_Error_Generated}' + event.message);
                        $scope.loading = false;
                        $scope.$apply();
                    }
                });
            }

        }
        $scope.submitForApproval = function() {
            var selectedLineItems = $scope.gridApi.selection.getSelectedRows();

            if (selectedLineItems.length == 0) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_Submit_TP}');
                return;
            }

            var hasOtherStatus = false;
            let showModal = false;
            for (let i = 0; i < selectedLineItems.length; i++) {
                if (selectedLineItems[i].PlanStatus != 'Draft') {
                    hasOtherStatus = true;
                }
                if ((selectedLineItems[i].PriceDiffer < 0 
                    || selectedLineItems[i].EstimatedAmount > {!estAmountLimit}
                    || selectedLineItems[i].PercentDiffer < 0) && $scope.showNegativeApprovalModal == false) {
                    $scope.remarkNum ++;
                    showModal = true;
                }
            }
            
            if (hasOtherStatus) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Chk_TP_Status_IS_Draft}');
                return;
            }
            $scope.showNegativeApprovalModal = showModal;
            if ($scope.showNegativeApprovalModal) return;
            var remarkMsg = '';
            if (document.getElementById('remarkMsg') != undefined) {
                remarkMsg = document.getElementById('remarkMsg').value;
            }
            
            console.log(remarkMsg);
            // 调用后台审批方法
            if (confirm('{!$Label.ASI_CRM_CN_TP_S_Submit_TP_QTY}' + selectedLineItems.length + ' {!$Label.ASI_CRM_CN_TP_S_IS_Confirm_Approval}')) {
                $scope.loading = true;
                var pliJson = JSON.stringify(selectedLineItems);
                 ASI_CRM_CN_TP_MOTTradePlanListCtrl.submitApproval(remarkMsg, pliJson,function(result,event){
                    if(event.statusCode == 200 ){
                        console.log(result);
                        if (result.ERROR == undefined || result.ERROR ==  null) {
                            alert('{!$Label.ASI_CRM_CN_TP_S_Submit_Approval_Success}');
                            location.href = '/' + result.SUCCESS;
                            // createSuperLabel('/' + result.SUCCESS ,'new_a');
                            // location.reload();
                        } else {
                            alert(result.ERROR);
                            $scope.loading = false;
                            $scope.$apply();
                        }
                        
                    } else if(event.type === 'exception'){
                        alert('{!$Label.ASI_CRM_CN_TP_S_Submit_Approval_Error}' + event.message);
                        $scope.loading = false;
                        $scope.$apply();
                    }
                });
            } else {
                $scope.remarkNum = 0;
            }
        }

        $scope.generatePO = function() {
            // $scope.gridApi.selection.clearSelectedRows();
            // $scope.gridOptions.enableRowHeaderSelection = false;
            // $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);
            // var filtered = _.filter($scope.gridApi.grid.rows, function(o) { return o.visible; });
            // var entities = _.map(filtered, 'entity'); 
            var entities = $scope.gridApi.selection.getSelectedRows();
            if (entities.length == 0) {
                alert('{!$Label.ASI_CRM_CN_TP_S_PO_Not_Generated}');
                return;
            }
            const remarkSet = new Set();
            const poIdSet = new Set();
            const customerIdSet = new Set();
            var hasOtherStatus = false;

            for (let i = 0; i < entities.length; i++) {
                if (entities[i].PlanStatus != 'Final') {
                    hasOtherStatus = true;
                }
                if (entities[i].POId != undefined) {
                    poIdSet.add(entities[i].POId);
                }
                if (entities[i].CustomerId != undefined) {
                    customerIdSet.add(entities[i].CustomerId);
                }
                
                remarkSet.add(entities[i].Remark);
            }
            if (hasOtherStatus) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Generate_PO_TP_Final}');
                return;
            }

            if (remarkSet.size != 1) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Generate_PO_Same_Remark}'); 
                return;
            }
            if (poIdSet.size > 1) {
                alert('勾选Trade Plan 包含一条以上PO，请勾选少于两条PO的Trade Plan记录'); 
                return;
            }
            if (customerIdSet.size > 1) {
                alert('勾选Trade Plan 关联了不同的Customer，请勾关联同一个Customer的Trade Plan记录'); 
                return;
            }

            // 调用后台生成PO方法
            if (confirm('{!$Label.ASI_CRM_CN_TP_S_Generate_PO_TP_QTY}' + entities.length + ' {!$Label.ASI_CRM_CN_TP_S_IS_Generate_PO}')){
                $scope.loading = true;
                var pliJson = JSON.stringify(entities);
                 ASI_CRM_CN_TP_MOTTradePlanListCtrl.generatePo(pliJson,function(result,event){
                    if(event.statusCode == 200 ){
                        console.log(result);
                        if (result.ERROR == undefined || result.ERROR ==  null) {
                            alert('{!$Label.ASI_CRM_CN_TP_S_Generated_PO_Success}');
                            location.href = '/' + result.SUCCESS;
                            // createSuperLabel('/' + result.SUCCESS ,'new_a');
                            // location.reload();
                        } else {
                            alert(result.ERROR);
                            $scope.loading = false;
                            $scope.$apply();
                        }
                        
                    } else if(event.type === 'exception'){
                        alert('{!$Label.ASI_CRM_CN_TP_S_Generate_PO_Error}' + event.message);
                        $scope.loading = false;
                         $scope.$apply();
                    }
                });
            }
        }

        $scope.generatePayment = function() {
            
            var filtered = _.filter($scope.gridApi.grid.rows, function(o) { return o.visible; });
            var entities = _.map(filtered, 'entity'); 
            if (entities.length == 0) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Payment_Not_Generated}');
                return;
            }
            const poSet = new Set();
            var hasOtherStatus = false;
            var noPutAmount = true;
            var validPmtCount = 0;
            var entitiesNew = [];
            for (let i = 0; i < entities.length; i++) {
               
                if ((entities[i].ActualQty != undefined && entities[i].ActualQty != '' 
                    && entities[i].ThisPromotionAmount != undefined && entities[i].ThisPromotionAmount != '')
                    || entities[i].ThisFixedCost != undefined && entities[i].ThisFixedCost != '') {
                    noPutAmount = false;
                    validPmtCount ++;
                     if (entities[i].POStatus != 'Final') {
                        hasOtherStatus = true;
                    }
                    poSet.add(entities[i].POId);
                    entitiesNew.push(entities[i]);
                }
                
            }
            if (hasOtherStatus) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Generate_Payment_TP_Final}');
                return;
            }

            if (poSet.size > 1) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Generate_Payment_Same_PO}');
                return;
            }
            
            var firstColumns = $scope.gridApi.grid.columns;
            if (!firstColumns[46]) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Fill_Payment_Info}');
                $scope.gridOptions.columnDefs.push({
                    field: 'ActualQty',
                    displayName: '本次付款销量(瓶) ✎',
                    type: 'number',
                    minWidth: 135,
                    enableCellEdit: true,
                    pinnedRight: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus === 'Final' && 
                        scope.row.entity.POStatus === 'Final'
                    },
                },
                {
                    field: 'ThisPromotionAmount',
                    displayName: '本次付款促销金额 ✎',
                    type: 'number',
                    minWidth: 135,
                    pinnedRight: true,
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus === 'Final' && 
                        scope.row.entity.POStatus === 'Final'
                    },
                },
                {
                    field: 'ThisFixedCost',
                    displayName: '本次付款海报陈列金额 ✎',
                    type: 'number',
                    minWidth: 185,
                    pinnedRight: true,
                    enableCellEdit: true,
                    cellEditableCondition: function(scope) {
                        return scope.row.entity.PlanStatus === 'Final' && 
                        scope.row.entity.POStatus === 'Final'
                    }
                });
                
                $scope.isShowSubmit = false;
                $scope.isShowPo = false;
                $scope.isShowSave = false;
                $scope.isShowCancel = true;
                $scope.isShowPayment2 = true;
                $scope.isShowPayment = false;
                $scope.isShow999 = false;

                $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                // alert('本次付款销量、本次付款促销金额及本次付款海报陈列费 三列已显示，请填写信息');
                return;
            }
            if (noPutAmount) {
                alert('{!$Label.ASI_CRM_CN_TP_S_Fill_Value}');
                return;
            }
            
            // 调用后台生成Payment方法
            if (confirm('{!$Label.ASI_CRM_CN_TP_S_Generate_Payment_TP_QTY}' + validPmtCount + ' {!$Label.ASI_CRM_CN_TP_S_IS_Generate_Payment}')) {
                $scope.loading = true;
                var pliJson = JSON.stringify(entitiesNew);
                ASI_CRM_CN_TP_MOTTradePlanListCtrl.generatePayment(pliJson,function(result,event){
                    if(event.statusCode == 200 ){
                        console.log(result);
                        if (result.ERROR == undefined || result.ERROR ==  null) {
                            alert('{!$Label.ASI_CRM_CN_TP_S_Generated_Payment_Success}');
                            // createSuperLabel('/' + result.SUCCESS ,'new_a');
                            location.href = '/' + result.SUCCESS;
                            // location.reload();
                        } else {
                            alert(result.ERROR);
                            $scope.loading = false;
                            $scope.$apply();
                        }
                    } else if(event.type === 'exception'){
                        alert('{!$Label.ASI_CRM_CN_TP_S_Generate_Payment_Error}' + event.message);
                        $scope.loading = false;
                        $scope.$apply();
                    }
                });
            }

        }

        $scope.save = function() {
            var filtered = _.filter($scope.gridApi.grid.rows, function(o) { 
                        return o.visible;
                 });
            var entities = _.map(filtered, 'entity'); 
            var editEntities = _.filter(entities, function(k){
                        return k.isEdit;
            });
            // 保存到后台
            if (confirm('{!$Label.ASI_CRM_CN_TP_S_IS_Save_All_Changes}')) {
                $scope.loading = true;
                var pliJson = JSON.stringify(editEntities);
                ASI_CRM_CN_TP_MOTTradePlanListCtrl.save(pliJson,function(result,event){
                    if(event.statusCode == 200 ){
                        console.log(result);
                        
                        if (result.ERROR == undefined || result.ERROR ==  null) {
                            alert('{!$Label.ASI_CRM_CN_TP_S_Save_Success}');
                            location.reload();
                        } else {
                            alert(result.ERROR);
                            $scope.loading = false;
                            $scope.$apply();
                        }
                        
                    } else if(event.type === 'exception'){
                        alert('{!$Label.ASI_CRM_CN_TP_S_Save_Error}' + event.message);
                        $scope.loading = false;
                        $scope.$apply();
                    }
                });
            }
        }

        $scope.cancel = function() {
            // $scope.isShowSave = false;
            // $scope.isShowCancel = false;
            // $scope.isShowSubmit = true;
            // $scope.isShowPo = true;
            // $scope.isShowPayment = true;
            location.reload();
            $scope.$apply();
        }

        //edit
        $scope.saveRow = function( rowEntity ) {
            var promise = $q.defer();
            $scope.gridApi.rowEdit.setSavePromise(rowEntity, promise.promise );

            // promise.reject();
            
            promise.resolve();
           
        }

        $scope.hideModal = function(){
            $scope.showNegativeApprovalModal = false;
            $scope.remarkNum = 0;
        }

        $scope.subSave = function(){
            if (document.getElementById('remarkMsg').value == '' || document.getElementById('remarkMsg').value == undefined) {
                alert('请填写说明');
                return;
            }
            $scope.submitForApproval();
        }

        function getFiscalYears() {
            let fiscalYearMaps = [];
            
            var myDate = new Date();
            let fyear = myDate.getFullYear(); //获取完整的年份(4位,1970-????)
            let fmonth = myDate.getMonth(); //获取当前月份(0-11,0代表1月)

            let lastFiscalYear = fmonth < 6 ? 'FY' + (fyear - 2002) + (fyear - 2001) : 'FY' + (fyear - 2001) + (fyear - 2000);
            let currentFiscalYear = fmonth < 6 ? 'FY' + (fyear - 2001) + (fyear - 2000) : 'FY' + (fyear - 2000) + (fyear - 1999);
            let nextFiscalYear = fmonth < 6 ? 'FY' + (fyear - 2000) + (fyear - 1999) : 'FY' + (fyear - 1999) + (fyear - 1998);
            let fiscalYears = [lastFiscalYear, currentFiscalYear,nextFiscalYear];
            fiscalYears.forEach(item => {
                let fiscalMap = new Object();
                fiscalMap.label = item;
                fiscalMap.value = item;
                fiscalYearMaps.push(fiscalMap);
            })
            return fiscalYearMaps;
        }

        $scope.loadedTPSize = 0;
        $scope.totalTPSize = 0;
        $scope.tpBatchSize = 200;
        $scope.cnTaxRate = {!taxRate};
        
        ASI_CRM_CN_TP_MOTTradePlanListCtrl.queryTpItemIds(function(result,event){
            $scope.totalTPSize = result.length;
            var tpList = splitIntoSubArray(result, $scope.tpBatchSize);
            if (tpList.length > 0) {
                concurrentCallRemoteActions(tpList);
            }
        });

        

        /*
         * Splits array into subarrays.
         * count parameter indicates that how many item per subarray contains.
         * Example usage: splitIntoSubArray([1,2,3,4,5], 2) -> [[1, 2], [3, 4], [5]]
         */
        var splitIntoSubArray = (arr, count) => {
            var newArray = [];
            while (arr.length > 0) {
                newArray.push(arr.splice(0, count));
            }
            return newArray;
        }

        function judgeNumber(num){
            if(num==''||typeof(num) == "undefined"||isNaN(num)||num==null||num== Infinity){
              return 0;
            }else{
              return num;
            }
        }

        var concurrentCallRemoteActions = function(tpList){
            tpList.map(tpIds =>{
                callQueryTPsWithMoreInfo(tpIds).then(tpItemIds => {
                    $scope.gridOptions.data = $scope.gridOptions.data.concat(tpItemIds);
                    $scope.loadedTPSize += tpItemIds.length;
                    return "Done";
                })
            })
        }
        

        var callQueryTPsWithMoreInfo = function(tpItemIds) {
            var deferred = $q.defer();
            ASI_CRM_CN_TP_MOTTradePlanListCtrl.queryRecord(tpItemIds, (result, event) => {
                if(event.statusCode == 200 ){

                    deferred.resolve(result.map((tpItem, index) => {
                        var channel = tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Channel__c ? tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Channel__r.Name : '';
                        if (channel.includes('amp;')) {
                            channel = channel.replace('amp;','');
                        }
                        return {
                            Id: index + 1,
                            PlanId: tpItem.item2.ASI_MFM_Plan__c,
                            PlanName: tpItem.item2.ASI_MFM_Plan__r.Name,
                            PlanLineItemId: tpItem.item2.Id,
                            KAAccountId: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_KA_Account__c,
                            CustomerId: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Customer__c,
                            CustomerName: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Customer__r.Name,
                            CustomerOwnerId: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Customer__r.OwnerId,
                            CustomerOwnerName: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Customer__r.Owner.Name,
                            KAAccountName: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_KA_Banner__c,
                            FiscalYear: tpItem.item2.ASI_MFM_Plan__r.ASI_MFM_Fiscal_year__c,
                            Region: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Region_P__c == 'Non-Central Region' ? '非中区' : tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Region__c ? tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Region__r.ASI_CRM_Chinese_Name__c : '',
                            AccountType: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Account_Type__c,
                            Channel: channel,
                            OutletCount : tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Outlet_Count__c,
                            CoverCity : tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Cover_City__c == null || tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Cover_City__c == '总部' ? '全国' : tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Cover_City__c,
                            PlanStartDate: tpItem.item2.ASI_MFM_Plan__r.ASI_MFM_Start_Date__c,
                            PlanEndDate: tpItem.item2.ASI_MFM_Plan__r.ASI_MFM_End_Date__c,
                            PlanStatus: tpItem.item2.ASI_MFM_Plan__r.ASI_MFM_Status__c,
                            POId: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Contract__c,
                            PONumber: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Contract__c ? tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Contract__r.ASI_CRM_CN_PO_No__c + '-' + tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Contract__r.ASI_CRM_CN_PO_Version__c : '',
                            POStatus: tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Contract__c ?  tpItem.item2.ASI_MFM_Plan__r.ASI_CRM_CN_TP_Contract__r.ASI_CRM_CN_Status__c : '',
                            Remark: tpItem.item2.ASI_MFM_Remarks__c,
                            Note: tpItem.item2.ASI_MFM_List_Item_Description__c,

                            SubbrandId: tpItem.item2.ASI_MFM_Sub_brand_Code__c,
                            SubbrandNumber: tpItem.item2.ASI_MFM_Sub_brand_Code__r.Name,
                            ItemGroupId: tpItem.item2.ASI_CRM_CN_TP_Promotion_Product__c,
                            ItemGroupName: tpItem.item2.ASI_CRM_CN_TP_Promotion_Product__c ? tpItem.item2.ASI_CRM_CN_TP_Promotion_Product__r.Name : null,
                            BottleSize: tpItem.item2.ASI_CRM_CN_TP_Bottle_Size__c,
                            PromotionMode: tpItem.item2.ASI_CRM_CN_TP_Promotion_Mode__c === 'intake price verification' ? '进价核销' : tpItem.item2.ASI_CRM_CN_TP_Promotion_Mode__c === 'intake price verification tax included' ? '进价核销(含税)' : tpItem.item2.ASI_CRM_CN_TP_Promotion_Mode__c === 'scan data tax included' ? 'scan data(含税)' : tpItem.item2.ASI_CRM_CN_TP_Promotion_Mode__c,
                            PromotionContent : tpItem.item2.ASI_CRM_CN_TP_Promotion_Content__c,
                            RetailPrice: tpItem.item2.ASI_CRM_CN_TP_Retail_Price__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Retail_Price__c,
                            PromotionUnitPrice: tpItem.item2.ASI_CRM_CN_TP_Promotion_Unit_Price__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Promotion_Unit_Price__c,
                            NormalPurchasePrice: tpItem.item2.ASI_CRM_CN_TP_Normal_Purchase_Price__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Normal_Purchase_Price__c,
                            T1Price : tpItem.item2.ASI_CRM_CN_TP_T1_Price__c,
                            PromotionPurchasePrice: tpItem.item2.ASI_CRM_CN_TP_Promotion_Purchase_Price__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Promotion_Purchase_Price__c,
                            LPP: tpItem.item2.ASI_CRM_CN_TP_LPP_Price__c,
                            PriceDiffer:tpItem.item2.ASI_CRM_CN_TP_Promotion_Unit_Price__c && tpItem.item2.ASI_CRM_CN_TP_LPP_Price__c ? (tpItem.item2.ASI_CRM_CN_TP_Promotion_Unit_Price__c - tpItem.item2.ASI_CRM_CN_TP_LPP_Price__c).toFixed(2) : '',
                            Subsidies: tpItem.item2.ASI_CRM_CN_TP_Subsidies__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Subsidies__c,
                            EstimatedQty: tpItem.item2.ASI_CRM_CN_TP_Estimated_Qty__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Estimated_Qty__c,
                            EstimatedAmount: tpItem.item2.ASI_CRM_CN_TP_Estimated_Amount__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Estimated_Amount__c,
                            PostersFee: tpItem.item2.ASI_CRM_CN_TP_Posters_Fee__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Posters_Fee__c,
                            DisplayFee: tpItem.item2.ASI_CRM_CN_TP_Display_Fee__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Display_Fee__c,
                            PlanFeePercent: tpItem.item2.ASI_CRM_CN_TP_Plan_Fee_Percent__c ? tpItem.item2.ASI_CRM_CN_TP_Plan_Fee_Percent__c + '%' : '',
                            Benchmark: tpItem.item2.ASI_CRM_CN_TP_LPP__c ? tpItem.item2.ASI_CRM_CN_TP_LPP__r.ASI_CRM_CN_TP_Benchmark__c + '%' : '',
                            PercentDiffers: tpItem.item2.ASI_CRM_CN_TP_Plan_Fee_Percent__c && tpItem.item2.ASI_CRM_CN_TP_LPP__c ? (tpItem.item2.ASI_CRM_CN_TP_LPP__r.ASI_CRM_CN_TP_Benchmark__c - tpItem.item2.ASI_CRM_CN_TP_Plan_Fee_Percent__c).toFixed(2) + '%' : '',
                            PercentDiffer : tpItem.item2.ASI_CRM_CN_TP_Plan_Fee_Percent__c && tpItem.item2.ASI_CRM_CN_TP_LPP__c ? (tpItem.item2.ASI_CRM_CN_TP_LPP__r.ASI_CRM_CN_TP_Benchmark__c - tpItem.item2.ASI_CRM_CN_TP_Plan_Fee_Percent__c).toFixed(2)  : 0,
                            TotalFeePercent: tpItem.item2.ASI_CRM_CN_TP_Total_Fee_Percent__c ? tpItem.item2.ASI_CRM_CN_TP_Total_Fee_Percent__c + '%' : '',
                            AdvicePromotionAmount: tpItem.item2.ASI_CRM_CN_TP_Advice_Amount__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Advice_Amount__c,
                            AdviceFixedCost: tpItem.item2.ASI_CRM_CN_TP_Fixed_Cost__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Fixed_Cost__c,
                            ActualFeePercent: tpItem.item2.ASI_CRM_CN_TP_Actual_Fee_Percent__c ? tpItem.item2.ASI_CRM_CN_TP_Actual_Fee_Percent__c + '%' : '',
                            ActualTotalFeePercent: tpItem.item2.ASI_CRM_CN_TP_Actual_Total_Fee_Percent__c ? tpItem.item2.ASI_CRM_CN_TP_Actual_Total_Fee_Percent__c + '%' : '',
                            PromotionPaymentAmount: tpItem.item2.ASI_CRM_CN_TP_Promotion_Payment_Amount__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Promotion_Payment_Amount__c,
                            FixedCostPaymentAmount: tpItem.item2.ASI_CRM_CN_TP_FixedCost_Payment_Amount__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_FixedCost_Payment_Amount__c,
                            TotalActualQty: tpItem.item2.ASI_CRM_CN_TP_Total_Actual_Vol__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Total_Actual_Vol__c,
                            ActualQty: 0,
                            ThisPromotionAmount: tpItem.promotionAmount,
                            ThisFixedCost: tpItem.fixedCost,
                            PaymentAmount : tpItem.item2.ASI_CRM_CN_TP_Payment_Amount__c == null ? 0 : tpItem.item2.ASI_CRM_CN_TP_Payment_Amount__c
                        }
                    }));
                }else{
                    deferred.reject(event);
                }
            }, { buffer: false });
            return deferred.promise;
        }

    }]);
    </script>
</apex:page>