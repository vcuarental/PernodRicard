<apex:component id="mcau" controller="ASI_TnE_KR_MassCreateAndUpdateController" allowDML="true">
    <apex:attribute name="disableDelete" description="Whether disable delete button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="pageController" description="The parent page controller" type="ASI_TnE_PageInterface" required="false" assignTo="{!pageController}"/>
    <apex:attribute name="componentKey" description="The key to identify this component" type="String" required="false" assignTo="{!componentKey}"/>
    <apex:attribute name="isFastMode" description="Whether use fast mode to improve performance" type="Boolean" default="false" required="false" assignTo="{!isFastModeBool}" />
    <apex:attribute name="sObjectType" description="The object to be edited in this page"  type="String" required="true" assignTo="{!sObjTypeStr}" />
    <apex:attribute name="displayFields" description="The list of fields to display in table. Format: field1, field2__c" type="String" required="false" assignTo="{!displayFieldsStr}"/>
    <apex:attribute name="defaultFieldValues" description="The list of defaul value fields to display in table. Format: field1=value, field2__c=value" type="String" required="false" assignTo="{!defaultFieldValuesStr}"/>
    <apex:attribute name="whereStatement" description="The where statement when selecting records from {sObjTypeStr} object" type="String" required="false"  assignTo="{!whereStatm}"/>
    <apex:attribute name="includeRecordTypes" description="list of record type enabled in the page" type="String" required="false" assignTo="{!includeRecordTypes}" />
    <apex:attribute name="fieldToURLParam" description="Default field values from url parameters. Format: Field1__c => param1" type="String" required="false" assignTo="{!fieldToURLParamStr}"/>
    <apex:attribute name="pageBlockTitle" description="The title of pageBlock" type="String" required="false" assignTo="{!pageBlockTitleStr}"/>
    <apex:attribute name="successLink" description="The link to redirect after successfully saved" type="String" required="true" assignTo="{!successLink}" />
    <apex:attribute name="cancelLink" description="The link to redirect when clicking cancel" type="String" required="true" assignTo="{!cancelLink}" />
    <apex:attribute name="mode" description="EDIT, NEW, BOTH" type="String" required="false" default="BOTH" assignTo="{!mode}" />
    <apex:attribute name="isDefaultEdit" description="Whether the existing records are shown as edit by default" type="Boolean" required="false" default="false" assignTo="{!isDefaultEditVal}" />
    <apex:attribute name="disableClone" description="Whether disable clone button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="disableAddNew" description="Whether disable add new button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="showAllRT" description="Whether show all record types in one page or use drop down list to switch" type="Boolean" default="true" required="false" assignTo="{!showAllRT}"/>
    <apex:attribute name="rowActionRenderList" description="List of render items when selecting object" type="String" default="emptyPanel" required="false"/>
    <apex:attribute name="pageBlockActionRenderList" description="List of render items when clicking page block buttons" type="String" default="wholeDataPanel" required="false"/>
    <apex:attribute name="rowRemoveStatus" description="The status component ID when removing row" type="String" default="headerStatusLoading" required="false"/>
    <apex:attribute name="pageBlockActionStatus" description="The status component ID for page block buttons" type="String" default="headerStatusLoading" required="false"/>
    <apex:attribute name="firstRowForNew" description="Whether append the new row before first row" type="Boolean" default="true" required="false" assignTo="{!isUseFirstRowForNew}"/>
    <apex:attribute name="altSObjectTypeName" description="Alternative name of this sojbect used by custom setting. Use it if object name and record type name is too long" type="String" required="false" assignTo="{!altSObjectTypeName}"/>
    <apex:attribute name="actionColWidth" description="Action column width string" default="150px" type="String" required="false"/>
    <apex:attribute name="displayPickList" description="ChangeTheLookupFieldToPickList" type="String" required="false" assignTo="{!lookupToPicklist}"/>  
    <apex:attribute name="languageSupported" description="Language Supported" type="String" required="false" assignTo="{!languageSupportedStr}"/>
    <apex:attribute name="claimType" description="Choose the display message" type="String" required="false" assignTo="{!claimType}"/>
    <apex:attribute name="payeeID" description="Get the payee Id from page" type="String" required="false" assignTo="{!payeeID}"/>

    <apex:stylesheet value="{!URLFOR($Resource.ASI_TnE_KR_JQuery, 'jquery-ui1.10.4.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ASI_TnE_KR_JQuery, 'jquery1.10.2.min.js')}"/>
	<apex:includeScript value="{!URLFOR($Resource.ASI_TnE_KR_JQuery, 'jquery-ui1.10.4.min.js')}"/>
    
    <style type="text/css">
        .customErrorMsg {
            color: #D74C3B;
        }
        .boldRedText {
            color:red;
        	font-weight:bold
        }
    </style>
    
    <script type="text/javascript">
    
    var customer = [];
    var subbrand = [];
    var salesman = [];
    var BC = [];
    
    $(function(){
           ASI_TnE_KR_MassCreateAndUpdateController.findSObjects('ASI_CRM_AccountsAdditionalField__c', 'ID#{!payeeID}', function(result, event){
               if(event.type == 'exception') {
                   alert(event.message);
               } else {
                   customer = result;
                   for(var i = 0, len = customer.length;i<len;i++ ){
                       customer[i] =  htmlEncode(customer[i]);
                   }
                     $(".lookupInput").each(function(){
                        $(this).find('.ASI_TnE_KR_Customer__c').autocomplete({
                            source: customer
                        });
                     })
               }
           });
        
           ASI_TnE_KR_MassCreateAndUpdateController.findSObjects('ASI_KOR_Sub_Brand__c', 'ASI_KOR_Active_for_A_P__c', function(result, event){
               if(event.type == 'exception') {
                   alert(event.message);
               } else {
                   subbrand = result;
                   for(var i = 0, len = subbrand.length;i<len;i++ ){
                       subbrand[i] =  htmlEncode(subbrand[i]);
                   }
                     $(".lookupInput").each(function(){
                        $(this).find('.ASI_TnE_KR_Sub_Brand__c').autocomplete({
                            source: subbrand
                        });
                     })
               }
           });
        
        /*ASI_TnE_KR_MassCreateAndUpdateController.findSObjects('User', 'User#{!payeeID}', function(result, event){
               if(event.type == 'exception') {
                   alert(event.message);
               } else {
                   salesman = result;
                   for(var i = 0, len = salesman.length;i<len;i++ ){
                       salesman[i] =  htmlEncode(salesman[i]);
                   }
                   $('[id$=salessearch]').autocomplete({
                       source: salesman
                   });
               }
           });*/
        
           ASI_TnE_KR_MassCreateAndUpdateController.findSObjects('ASI_CRM_AccountsAdditionalField__c', 'ASI_CRM_KR', function(result, event){
               if(event.type == 'exception') {
                   alert(event.message);
               } else {
                   customer = result;
                   for(var i = 0, len = customer.length;i<len;i++ ){
                       customer[i] =  htmlEncode(customer[i]);
                   }
                     $(".lookupInput").each(function(){
                        $(this).find('.ASI_TnE_Name_of_Customer_WS__c').autocomplete({
                            source: customer
                        });
                     })
               }
           });
        
           ASI_TnE_KR_MassCreateAndUpdateController.findSObjects('ASI_TnE_Branch_Channel__c', 'ASI_TnE_KR_Branch_Channel', function(result, event){
               if(event.type == 'exception') {
                   alert(event.message);
               } else {
                   BC = result;
                     $(".lookupInput").each(function(){
                        $(this).find('.ASI_TnE_Branch_code_Channel__c').autocomplete({
                            source: BC
                        });
                     })
               }
           });          
        });
    
    	function htmlEncode( input ) {
            var e = document.createElement('div');
          	e.innerHTML = input;
          	return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
          	//return String(input).replace(/\&amp;/g,'&').replace(/\&lt;/g,'<').replace(/\&rt;/g,'>');
        };
    	
        function startSubmitAction() {
            if (isSubmitting)
                return false;
            isSubmitting = true;
            return true;
        }
        
        function endSubmitAction() {
            if (!isDelaying) {
                isDelaying = true;
                setTimeout(function() {isSubmitting=false;isDelaying=false;}, 200);
            }
            
            $(".lookupInput").each(function(){
                $(this).find('.ASI_TnE_KR_Customer__c').autocomplete({
                    source: customer
                });
            });
            
            $(".lookupInput").each(function(){
                $(this).find('.ASI_TnE_KR_Sub_Brand__c').autocomplete({
                    source: subbrand
                });
            });
            
            /*$('[id$=salessearch]').autocomplete({
                source: salesman
            });*/
            
            $(".lookupInput").each(function(){
                $(this).find('.ASI_TnE_Name_of_Customer_WS__c').autocomplete({
                    source: customer
                });
            });
            
            $(".lookupInput").each(function(){
                $(this).find('.ASI_TnE_Branch_code_Channel__c').autocomplete({
                    source: BC
                });
            });
        }
    
        function displayLoadingRow(tableId) {
            if (startSubmitAction()) {
                var theTable = document.getElementById(tableId);
                if (theTable && theTable.tagName == 'TABLE' && theTable.tBodies && theTable.tBodies.length > 0) {
                    var theTBody = theTable.tBodies[0];
                    var loadingRow = null;
                    if ({!isUseFirstRowForNew} == true)
                        loadingRow = theTBody.insertRow(0);
                    else
                        loadingRow = theTBody.insertRow(-1);
                    loadingRow.innerHTML = '<td colspan="50" style="height:21px;text-align:center;vertical-align:middle;">Loading ...</td>';
                    return true;
                }
            }
            return false;
        }
        
        function removeRow(elementInRow) {
            if (startSubmitAction()) {
                var theRow = searchClosestParentByTagName(elementInRow, 'TR');
                if (theRow) {
                    theRow.style.display = 'none';
                    return true;
                }
            }
            return false;
        }
    
        function checkRequiredFieldsAndSave(isQuickSave) {
            removeAllRequiredFieldErrors();
            var allInputFields = document.getElementsByTagName("input");
            var allSelectFields = document.getElementsByTagName("select");
            var allFields = concatTwoElements(allInputFields, allSelectFields);
            var errorFound = false;
            for (var index in allFields) {
                var inputField = allFields[index];
                
                //alert(abc);
                if (inputField.className && inputField.className.indexOf("required") != -1
                    && hasEmptyValue(inputField)) {
                    var parentDiv = inputField.parentNode;
                    while (parentDiv.tagName != "DIV")
                        parentDiv = parentDiv.parentNode;
                    var divChildNodes = parentDiv.childNodes;
                    for (var childNodeIndex in divChildNodes) {
                        var childNode = divChildNodes[childNodeIndex];
                        if (childNode.className && childNode.className == "customErrorMsg") {
                            errorFound = true;
                            childNode.innerHTML = "<strong>Error: </strong>You must enter a value"
                        }
                    }
                }
            }
            if (errorFound) {
                return false;
            } else {
                return commitAll(isQuickSave);
            }
        }
        
        function removeAllRequiredFieldErrors() {
            var allErrorMsg = getElementsByClassName('customErrorMsg');
            for (var index in allErrorMsg) {
                allErrorMsg[index].innerHTML = "";
            }
        }
        
        function concatTwoElements(ele1, ele2) {
            result = [];
            for (var eleIndex in ele1) {
                result.push(ele1[eleIndex]);
            }
            for (var eleIndex in ele2) {
                result.push(ele2[eleIndex]);
            }
            return result;
        }
        
        function hasEmptyValue(field) {
            if (field.tagName == "INPUT") {
                return (field.value == null || field.value == "");
            } else if (field.tagName == "SELECT") {
                if (field.options) {
                    var selectValue = field.options[field.selectedIndex].value;
                    return (selectValue == null || selectValue == "");
                }
            }
        }
        
        function searchClosestParentByTagName(ele, theTagName) {
            if (!ele || !theTagName)
                return null;
            var result = ele;
            var theTagNameUpperCase = theTagName.toUpperCase();
            while (result != null && result.tagName != theTagNameUpperCase) {
                result = result.parentNode;
            }
            return result;
        }
        
        if (typeof document.getElementsByClassName === 'undefined') {
            document.getElementsByClassName = function(theClassName) {
                var result = [];
                var allEle = document.getElementsByTagName('*');
                for (var allEleIndex in allEle) {
                    var theEle = allEle[allEleIndex];
                    if (theEle.className && theEle.className && (' ' + theEle.className + ' ').replace(/[\n\t]/g, " ").indexOf(' ' + theClassName + ' ') > -1)
                        result.push(theEle);
                }
                return result;
            }
        }
        
        var isClicking = false;
        var isSubmitting = false;
        var isDelaying = false;
    </script>
    
        <apex:variable var="dummyV" value="{!dummyVar}" id="dummyVar"/>  
          <apex:pageBlock id="pageBlock" title="{!pageBlockTitleStr}">
            <apex:pageBlockButtons id="buttonArea" location="both">
                 <apex:commandButton id="saveAllBtn" value="Save All" onclick="checkRequiredFieldsAndSave('false')" reRender="saveAllBtn"/>
                <apex:commandButton action="{!URLFOR(cancelLink)}" value="Cancel" immediate="true"/> 
                <apex:repeat id="pbBtnRepeat" value="{!pageBlockActionBtnList}" var="btn">
                     <input type="button" class="btn" onclick="triggerPBAction('{!btn.id}');return false;" value="{!btn.label}"/>
                    
                </apex:repeat>
            </apex:pageBlockButtons>
            
            <apex:actionFunction name="triggerPBAction" action="{!triggerPageBlockAction}" rerender="{!pageBlockActionRenderList}" status="{!pageBlockActionStatus}">
                <apex:param name="PARAM_PB_BTN_ID" value=""/>
            </apex:actionFunction>
            <apex:outputPanel id="headerPanel">
                <apex:pageMessages />
                <apex:actionFunction name="refresh" action="{!refresh}" rerender="wholeDataPanel" status="headerStatusLoading"/>
                <apex:actionFunction name="commitAll" action="{!commitAll}" status="headerStatusLoading">
                    <apex:param name="isQuickSave" value=""/>
                </apex:actionFunction>
                <apex:outputPanel id="rtSelect" rendered="{!NOT(showAllRT) && (numOfRecordType > 1)}">
                    <apex:outputLabel value="Record Type: "/>
                    <apex:selectList value="{!selectedRecordType}" required="true" multiselect="false" size="1" onchange="refresh()" style="">
                        <apex:selectOptions value="{!recordTypeOptionList}" />
                    </apex:selectList>
                    <br/>
                </apex:outputPanel>
                <br/>
                <apex:actionStatus id="headerStatusLoading" startText="Loading..." startStyle="font-weight:bold;font-size:110%;"/>
                <br/>
            </apex:outputPanel>
            <apex:outputPanel id="wholeDataPanel">
                <apex:variable var="showNewBtn" value="{!mode != MODE_EDIT && NOT(disableAddNew)}" />
                <apex:repeat id="repeatRT" value="{!theRecordTypeElementList}" var="RTEle" >
                    <apex:variable var="rtDevName" value="{!RTEle.myRecordType.DeveloperName}" />
                    <apex:pageBlockSection id="pBlockSection" title="{!RTEle.myRecordType.Name}" columns="1" collapsible="false" rendered="{!showAllRT || rtDevName == selectedRecordType}" >
                        <apex:outputText styleClass="boldRedText" value="Mandatory Fields: Customer, Dept in Charge, Sub brand, Branch Code+Channel, Promotion Code, Sales Year, Sales Month, Supported Item" rendered="{!claimType = 'AnP'}"/>
                        <apex:actionStatus id="newRowStatus" onstart="displayLoadingRow('{!$Component.mcau_mainTable}');" />
                        <apex:outputPanel id="tablePanel" styleClass="tablePanel">
                            <apex:pageBlockTable id="mcau_mainTable" value="{!RTEle.myDisplayRecordList}" var="tableRow" rules="cols" styleClass="mainDataTable">
                                <apex:column width="{!actionColWidth}">
                                    <apex:facet name="header">
                                        <apex:outputPanel id="addNewPanel" rendered="{!mode != MODE_EDIT && NOT(disableAddNew)}">
                                            <apex:outputText value="Add New" style="text-decoration:underline;font-weight:normal;cursor:pointer;"/>
                                            <apex:actionSupport event="onclick" action="{!addNewRow}" reRender="tablePanel" status="newRowStatus" oncomplete="endSubmitAction();">
                                                <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            </apex:actionSupport>
                                        </apex:outputPanel>
                                    </apex:facet>
                                    <apex:outputPanel id="cloneActionPanel" rendered="{!NOT(disableClone)}">
                                        <apex:commandLink action="{!cloneRow}" value="Clone" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}" status="newRowStatus"
                                            oncomplete="endSubmitAction()">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="editActionPanel" rendered="{!NOT(tableRow.isEdit)}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!enableForEdit}" value="Edit" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="removeNewActionPanel" rendered="{!tableRow.isNew}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!removeNew}" value="Delete" rendered="{!NOT(disableDelete)}" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}" onclick="if (!startSubmitAction()) return false;" status="{!rowRemoveStatus}"
                                            oncomplete="endSubmitAction();">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="deleteOldActionPanel" rendered="{!NOT(tableRow.isNew)}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!deleteOld}" rendered="{!NOT(disableDelete)}" value="Delete" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}" onclick="if (!startSubmitAction()) return false;" status="{!rowRemoveStatus}"
                                            oncomplete="endSubmitAction();">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                </apex:column>
                                <apex:repeat id="showColsRepeat" value="{!RTEle.myDisplayColList}" var="displayCol">
                                    <apex:column headerValue="{!displayCol.colLabel}" width="{!displayCol.colWidth}" style="vertical-align: top;">
                                        <apex:repeat id="showFieldRepeat" value="{!displayCol.displayFieldList}" var="displayField">
                                            <apex:variable id="allowEditVar" var="allowEdit" value="{!AND(displayField.readonlyMode != 'a', OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}"/>
                                            <apex:outputLabel value="{!displayField.label}:" rendered="{!NOT(ISBLANK(displayField.label))}" style="font-weight:bold"/>
                                            <apex:outputField value="{!tableRow.mySObj[displayField.name]}" rendered="{!NOT(allowEdit)}" style="width: {!displayField.width}"/>
                                            <apex:actionSupport event="ondblclick" action="{!enableForEdit}" reRender="tablePanel" rendered="{!NOT(allowEdit)}">
                                                <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                                <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                            </apex:actionSupport>
                                            <!-- Due to unknown reason, the following outputPanel cannot use allowEdit as rendered value. Otherwise, it has bug. -->
                                            
                                            <!--<apex:outputPanel id="inputFieldPanel2" rendered="{!AND(displayField.readonlyMode != 'a', OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isTextSearch, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isTextSearch))}">
                                                <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                    <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                    <apex:inputText id="salessearch" title="{!displayField.name}" required="false" value="{!tableRow.mySObj[displayField.name].name}" styleClass="{!IF(displayField.isRequired, "required", "none")}" style="width: {!displayField.width}"/>                                      
                                                    <div class="customErrorMsg"></div>
                                                </div>                       
                                            </apex:outputPanel>-->
                                            
                                            <apex:outputPanel id="inputFieldPanel" rendered="{!AND(displayField.readonlyMode != 'a', OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}">
                                                <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                    <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                    <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, "required", "none")} {!displayField.name}" style="width: {!displayField.width}"/>
                                                    <div class="customErrorMsg"></div>
                                                </div>
                                            </apex:outputPanel>
                                        </apex:repeat>
                                    </apex:column>
                                </apex:repeat>
                            </apex:pageBlockTable>
                        </apex:outputPanel>
                    </apex:pageBlockSection>
                </apex:repeat>
            </apex:outputPanel>
        </apex:pageBlock>
        <apex:outputPanel id="emptyPanel"></apex:outputPanel>
        <apex:actionStatus id="dummyStatus"/>
</apex:component>