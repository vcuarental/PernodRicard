<apex:component id="mcau" controller="ASI_MFM_SC_MassCreateUpdateController" allowDML="true">
    <apex:attribute name="pageController" description="The parent page controller" type="ASI_MFM_PageInterface" required="false" assignTo="{!pageController}"/>
    <apex:attribute name="componentKey" description="The key to identify this component" type="String" required="false" assignTo="{!componentKey}"/>
    <apex:attribute name="isFastMode" description="Whether use fast mode to improve performance" type="Boolean" default="false" required="false" assignTo="{!isFastModeBool}" />
    <apex:attribute name="sObjectType" description="The object to be edited in this page"  type="String" required="true" assignTo="{!sObjTypeStr}" />
    <apex:attribute name="displayFields" description="The list of fields to display in table. Format: field1, field2__c" type="String" required="false" assignTo="{!displayFieldsStr}"/>
    <apex:attribute name="defaultFieldValues" description="The list of defaul value fields to display in table. Format: field1=value, field2__c=value" type="String" required="false" assignTo="{!defaultFieldValuesStr}"/>
    <apex:attribute name="whereStatement" description="The where statement when selecting records from {sObjTypeStr} object" type="String" required="false"  assignTo="{!whereStatm}"/>
    <apex:attribute name="includeRecordTypes" description="list of record type enabled in the page" type="String" required="false" assignTo="{!includeRecordTypes}" />
    <apex:attribute name="fieldToURLParam" description="Default field values from url parameters. Format: Field1__c => param1" type="String" required="false" assignTo="{!fieldToURLParamStr}"/>
    <apex:attribute name="pageBlockTitle" description="The title of pageBlock" type="String" required="false" assignTo="{!pageBlockTitleStr}"/>
    <apex:attribute name="successLink" description="The link to redirect after successfully saved" type="String" required="true" assignTo="{!successLink}" />
    <apex:attribute name="cancelLink" description="The link to redirect when clicking cancel" type="String" required="true" assignTo="{!cancelLink}" />
    <apex:attribute name="mode" description="EDIT, NEW, BOTH" type="String" required="false" default="BOTH" assignTo="{!mode}" />
    <apex:attribute name="isDefaultEdit" description="Whether the existing records are shown as edit by default" type="Boolean" required="false" default="false" assignTo="{!isDefaultEditVal}" />
    <apex:attribute name="disableClone" description="Whether disable clone button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="disableAddNew" description="Whether disable add new button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="disableDeleteOld" description="Whether disable delete old button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="showAllRT" description="Whether show all record types in one page or use drop down list to switch" type="Boolean" default="false" required="false" assignTo="{!showAllRT}"/>
    <apex:attribute name="rowActionRenderList" description="List of render items when selecting object" type="String" default="emptyPanel" required="false"/>
    <apex:attribute name="pageBlockActionRenderList" description="List of render items when clicking page block buttons" type="String" default="wholeDataPanel" required="false"/>
    <apex:attribute name="rowRemoveStatus" description="The status component ID when removing row" type="String" default="headerStatusLoading" required="false"/>
    <apex:attribute name="pageBlockActionStatus" description="The status component ID for page block buttons" type="String" default="headerStatusLoading" required="false"/>
    <apex:attribute name="firstRowForNew" description="Whether append the new row before first row" type="Boolean" default="true" required="false" assignTo="{!isUseFirstRowForNew}"/>
    <apex:attribute name="altSObjectTypeName" description="Alternative name of this sojbect used by custom setting. Use it if object name and record type name is too long" type="String" required="false" assignTo="{!altSObjectTypeName}"/>
    <apex:attribute name="actionColWidth" description="Action column width string" default="150px" type="String" required="false"/>
    <apex:attribute name="displayPickList" description="ChangeTheLookupFieldToPickList" type="String" required="false" default="hello,world" assignTo="{!lookupToPicklist}"/>  
    <apex:attribute name="languageSupported" description="Language Supported" type="String" required="false" assignTo="{!languageSupportedStr}"/>  
    <apex:attribute name="dateTimeFields" description="DetectDateTimeFieldsForLayoutCorrection" type="String" required="false" default="hello,world" assignTo="{!lookupDateFields}"/>
    <apex:attribute name="headerIDInput" description="Header Plan ID" type="String" required="false" default="" assignTo="{!headerPlanID}"/>

    <apex:includeScript id="jqueryScript" value="{!$Resource.ASI_HK_CRM_JQuery_130516}"/>
    <apex:stylesheet id="hpiStyleSheet" value="{!URLFOR($Resource.ASI_HK_CRM_HoverPopupInfo, '/hover-popup-info/css/common.css')}"/>
    <apex:includeScript id="hpiScript" value="{!URLFOR($Resource.ASI_HK_CRM_HoverPopupInfo, '/hover-popup-info/js/common.js')}"/>   
    
    <apex:variable var="dummyV" value="{!dummyVar}" id="dummyVar"/>
    
    <apex:inputTextarea value="{!dynamicAttributeFieldsPixels}" id="dynamicAttributeFieldsPixels" styleClass="setDynamicPixels" style="display:none;"/>
    
    <style type="text/css">
        .customErrorMsg {
            color: #D74C3B;
        }
    </style>
    
    <script type="text/javascript">
        var jsapSMap = JSON.parse('{!JsonMap}');
        
        
        var screenWidth = screen.width;
        $(".setDynamicPixels").val(screenWidth);
        //alert({!dynamicAttributeFieldsPixels});
        
        function startSubmitAction() {
            if (isSubmitting)
                return false;
            isSubmitting = true;
            return true;
        }
        
        function endSubmitAction() {
            if (!isDelaying) {
                isDelaying = true;
                setTimeout(function() {isSubmitting=false;isDelaying=false;onload();}, 200);
            }
        }
    
        function displayLoadingRow(tableId) {
            if (startSubmitAction()) {
                var theTable = document.getElementById(tableId);
                if (theTable && theTable.tagName == 'TABLE' && theTable.tBodies && theTable.tBodies.length > 0) {
                    var theTBody = theTable.tBodies[0];
                    var loadingRow = null;
                    if ({!isUseFirstRowForNew} == true)
                        loadingRow = theTBody.insertRow(0);
                    else
                        loadingRow = theTBody.insertRow(-1);
                    loadingRow.innerHTML = '<td colspan="50" style="height:21px;text-align:center;vertical-align:middle;">Loading ...</td>';
                    return true;
                }
            }
            return false;
        }
        
        
        
        function removeRow(elementInRow) {
            if (startSubmitAction()) {
                var theRow = searchClosestParentByTagName(elementInRow, 'TR');
                if (theRow) {
                    theRow.style.display = 'none';
                    return true;
                }
            }
            return false;
        }
    
        function checkRequiredFieldsAndSave() {
            removeAllRequiredFieldErrors();
            var allInputFields = document.getElementsByTagName("input");
            var allSelectFields = document.getElementsByTagName("select");
            var allFields = concatTwoElements(allInputFields, allSelectFields);
            var errorFound = false;
            for (var index in allFields) {
                var inputField = allFields[index];
                if (inputField.className && inputField.className.startsWith("required")&& hasEmptyValue(inputField)) {                    
                    var parentDiv = inputField.parentNode;
                    while (parentDiv.tagName != "DIV")
                        parentDiv = parentDiv.parentNode;
                    var divChildNodes = parentDiv.childNodes;
                    for (var childNodeIndex in divChildNodes) {
                        var childNode = divChildNodes[childNodeIndex];
                        if (childNode.className && childNode.className.startsWith("customErrorMsg")) {
                            errorFound = true;
                            childNode.innerHTML = "<strong>Error: </strong>You must enter a value"
                        }
                    }
                    
                    if(!errorFound && inputField.className== "required_user"){
                        parentDiv = parentDiv.parentNode;
                        var divChildNodes = parentDiv.childNodes;
                        for (var childNodeIndex in divChildNodes) {
                            var childNode = divChildNodes[childNodeIndex];
                            if (childNode.className && childNode.className.startsWith("customErrorMsg")) {
                                errorFound = true;
                                childNode.innerHTML = "<strong>Error: </strong>You must enter a value"
                            }
                        }
                    }
                }
            }
            if (errorFound) {
                return false;
            } else {
                return commitAll();
            }
        }
        
        function changeDependenciesAP(fieldControl,position)
        {
            var marker = "showColsRepeat";
            var index1 = fieldControl.id.indexOf(marker);
            
            var idSubstring = fieldControl.id.substring(index1,fieldControl.id.length);
            var idSplitted = idSubstring.split(':');
            
            //console.log('idSplitted ' + idSplitted[1]);
            
            var componentCounter = (idSplitted[1]*1)+position;

            //console.log('componentCounter ' + componentCounter);
            
            var midFixToBeReplaced = idSplitted[0]+':'+idSplitted[1];
            var midFixNewValue = idSplitted[0]+':'+componentCounter;
            
            var dependentFieldId = fieldControl.id.replace(midFixToBeReplaced,midFixNewValue).replace('lookupSelect','dependentLookupSelect');
            
            //console.log('New dependentFieldId ' + dependentFieldId);
            
            var dependentSelect = document.getElementById(dependentFieldId); 
            var dependentSelectValue = '';
            
            if (dependentSelect)
            {
                dependentSelectValue = dependentSelect.value;
            }
                       
            var clearDependentValue = true;          
            
            if (clearDependentValue)
            {
                removeOptions(dependentSelect);
            }
        }
        
        function removeOptions(selectType) {
            while(selectType.options.length > 0){                
                selectType.remove(0);
            }
        }    
        
        function removeAllRequiredFieldErrors() {
            var allErrorMsg = getElementsByClassName('customErrorMsg');
            for (var index in allErrorMsg) {
                allErrorMsg[index].innerHTML = "";
            }
        }
        
        function concatTwoElements(ele1, ele2) {
            result = [];
            for (var eleIndex in ele1) {
                result.push(ele1[eleIndex]);
            }
            for (var eleIndex in ele2) {
                result.push(ele2[eleIndex]);
            }
            return result;
        }
        
        function hasEmptyValue(field) {      
            if (field.tagName == "INPUT") {
                return (field.value == null || field.value == "" || field.value.length==0);
            } else if (field.tagName == "SELECT") {
                if (field.options) {       
                    var selectValue = field.options[field.selectedIndex].value;       
                    return (selectValue == null || selectValue == ""|| selectValue.length==0);
                }       
            }
        }
        
                        
                        
        function setSubLeger(fieldControl,position) {

            var index1 = fieldControl.id.indexOf("showColsRepeat");
            
            var idSubstring = fieldControl.id.substring(index1,fieldControl.id.length);
            var idSplitted = idSubstring.split(':');
           
            var componentCounter = (idSplitted[1]*1)+position;
            var midFixToBeReplaced = idSplitted[0]+':'+idSplitted[1];
            var midFixNewValue = idSplitted[0]+':'+componentCounter;
            
            var userFieldId = fieldControl.id.replace(midFixToBeReplaced,midFixNewValue).replace('aplookupSelect','j_id135');            
            var userField= document.getElementById(userFieldId ); 
                         
            if (userField){
            
                var HeadblockDiv = userField.parentNode.parentNode;
                var secDiv=HeadblockDiv.getElementsByTagName("div")[0];                
 
				var mand = new Boolean(jsapSMap[fieldControl.options[fieldControl.selectedIndex].text]);
                if(mand==true){            //fieldControl.options[fieldControl.selectedIndex].text.endsWith("_")){  
                    HeadblockDiv.className="requiredInput";   
                    secDiv.className="requiredBlock";  
                    userField.className="required_user";        
                }else{
                    HeadblockDiv.className="none";   
                    secDiv.className="none";  
                    userField.className="";    
                }               
            } 
        }
        
         function renderSelect(e) {
            e = e || window.event;
            var select = eTarget(e);
            if (e.type === 'mousedown') {
                var origWidth = select.style.width;
                select.style.width = 'auto';
                if (origWidth && origWidth.length > 0
                        && select.className && select.className.indexOf(" defWidth_") < 0)
                    select.className += " defWidth_" + origWidth;
            } else if (e.type === 'blur' || e.type === 'change') {
                if (select.className) {
                    var idx = select.className.indexOf(" defWidth_");
                    if (idx >= 0) {
                        select.style.width = select.className.substring(idx + 10).split(" ")[0];
                    }
                }
            }            
        }
        
        function eTarget(e) { return e.target ? e.target : e.srcElement; }
        
        function searchClosestParentByTagName(ele, theTagName) {
            if (!ele || !theTagName)
                return null;
            var result = ele;
            var theTagNameUpperCase = theTagName.toUpperCase();
            while (result != null && result.tagName != theTagNameUpperCase) {
                result = result.parentNode;
            }
            return result;
        }        
        
        
        if (typeof document.getElementsByClassName === 'undefined') {
            document.getElementsByClassName = function(theClassName) {
                var result = [];
                var allEle = document.getElementsByTagName('*');
                for (var allEleIndex in allEle) {
                    var theEle = allEle[allEleIndex];
                    if (theEle.className && theEle.className && (' ' + theEle.className + ' ').replace(/[\n\t]/g, " ").indexOf(' ' + theClassName + ' ') > -1)
                        result.push(theEle);
                }
                return result;
            }
        }    
      
        
        var isClicking = false;
        var isSubmitting = false;
        var isDelaying = false;
        
        function onload()
        {
            rerenderWholePanel(); //for fixing bug for existing record picklist error
            
          var Id = "{!$Component.pageBlock.repeatRT.pBlockSection.mcau_mainTable.showColsRepeat.showFieldRepeat.lookupSelect}";
          var newId = Id.replace('repeatRT:','repeatRT:0:').replace('showColsRepeat:','showColsRepeat:1:').replace('showFieldRepeat:','showFieldRepeat:0:'); 
          
          var i=0;
          var isValid = true;
          do 
          {
            var componentCounter = 'mcau_mainTable:'+i+':';
            var componentId  = newId.replace('mcau_mainTable:',componentCounter);
            //console.log('componentId ' + componentId);     
            var dependentSelect = document.getElementById(componentId); 
            if (dependentSelect)
            {
             //console.log('componentValue ' + dependentSelect.value); 
             changeDependencies(dependentSelect,1)
             i++;
            } else
            {
             isValid = false;
            }
          } while (isValid); 
        }
        
        
        //window.onload = onload();
        /*if (window.addEventListener) {  
           window.addEventListener('load', onload,false);
        } 
        else if(window.attachEvent) {  
           window.attachEvent('onload', onload);
        }*/ 
        
        if (window.addEventListener) {
            window.addEventListener("load",onload,false);
        }
        else {
           // window.onload = onload; 
            document.body.onload = onload;
           // window.attachEvent("onload", onload);
        }       
        
        function setFocusOnLoad() {}

        // DC - 02/09/2016 - Added logic for Payment Line Amount calculation.
        function calculateAmt(prefix, rowId) {
            // var unitPriceVar = $("[id$='" + prefix + "_unitPrice_" + rowId + "']").val();
            var unitPriceVar = $(event.target).parentsUntil(".dataRow").parent().find("."+ prefix + "_unitPrice_field").val();
            console.log('unitPriceVar1 =: ' + $("[id$='" + prefix + "_unitPrice_" + rowId + "']").val());
            // var quantityVar = $("[id$='" + prefix + "_quantity_" + rowId + "']").val();
            var quantityVar = $(event.target).parentsUntil(".dataRow").parent().find("."+ prefix + "_quantity_field").val();
            // console.log('quantityVar1 =: ' + $("[id$='" + prefix + "_quantity_" + rowId + "']").val());
            var lineAmtVar;
            if(unitPriceVar && quantityVar) {
                console.log('unitPriceVar =: ' + unitPriceVar);
                console.log('quantityVar =: ' + quantityVar);
                lineAmtVar = unitPriceVar * quantityVar;
            }
            // $("[id$='" + prefix + "_lineAmt_" + rowId + "']").attr("value", lineAmtVar);
            // $("[class$='" + prefix + "_lineAmt_" + rowId + "']").attr("value", lineAmtVar);
            $(event.target).parentsUntil(".dataRow").parent().find("."+ prefix + "_lineAmt_field").attr("value", lineAmtVar);
        }
    </script>
    
            <apex:pageBlock id="pageBlock" title="{!pageBlockTitleStr}">
            <apex:pageBlockButtons id="buttonArea" location="both">
                <apex:commandButton id="saveAllBtn" value="Save All" onclick="checkRequiredFieldsAndSave()" reRender="saveAllBtn"/>
                <apex:commandButton action="{!URLFOR(cancelLink)}" value="Cancel" immediate="true"/> 
                <apex:repeat id="pbBtnRepeat" value="{!pageBlockActionBtnList}" var="btn">
                     <input type="button" class="btn" onclick="triggerPBAction('{!btn.id}');return false;" value="{!btn.label}"/>
                    
                </apex:repeat>
            </apex:pageBlockButtons>
            
            <apex:actionFunction name="rerenderWholePanel" rerender="tablePanel" />
                
            <apex:actionFunction name="triggerPBAction" action="{!triggerPageBlockAction}" rerender="{!pageBlockActionRenderList}" status="{!pageBlockActionStatus}">
                <apex:param name="PARAM_PB_BTN_ID" value=""/>
            </apex:actionFunction>
            <apex:outputPanel id="headerPanel">
                <apex:pageMessages />
                <apex:actionFunction name="refresh" action="{!refresh}" rerender="wholeDataPanel" status="headerStatusLoading"/>
                <apex:actionFunction name="commitAll" action="{!commitAll}" status="headerStatusLoading"/>
                <apex:outputPanel id="rtSelect" rendered="{!NOT(showAllRT) && (numOfRecordType > 1)}">
                    <apex:outputLabel value="Record Type: "/>
                    <apex:selectList value="{!selectedRecordType}" required="true" multiselect="false" size="1" onchange="refresh()" style="">
                        <apex:selectOptions value="{!recordTypeOptionList}" />
                    </apex:selectList>
                    <br/>
                </apex:outputPanel>
                <br/>
                <apex:actionStatus id="headerStatusLoading" startText="Loading..." startStyle="font-weight:bold;font-size:110%;"/>
                <br/>
            </apex:outputPanel>
            <apex:outputPanel id="wholeDataPanel">
                <apex:variable var="showNewBtn" value="{!mode != MODE_EDIT && NOT(disableAddNew)}" />
                <apex:repeat id="repeatRT" value="{!theRecordTypeElementList}" var="RTEle" >
                    <apex:variable var="rtDevName" value="{!RTEle.myRecordType.DeveloperName}" />
                    
                    <apex:pageBlockSection id="pBlockSection" title="{!RTEle.myRecordType.Name}" columns="1" collapsible="false" rendered="{!showAllRT || rtDevName == selectedRecordType}" >
                        <apex:actionStatus id="newRowStatus" onstart="displayLoadingRow('{!$Component.mcau_mainTable}');" />
                        <apex:outputPanel id="tablePanel" styleClass="tablePanel">
                            <apex:variable var="rowId" value="{!0}"/>
                            <apex:pageBlockTable id="mcau_mainTable" value="{!RTEle.myDisplayRecordList}" var="tableRow" rules="cols" styleClass="mainDataTable">
                                <apex:column width="{!actionColWidth}">
                                    <apex:variable var="rowId" value="{!rowId + 1}"/>
                                    <apex:facet name="header">
                                        <apex:outputPanel id="addNewPanel" rendered="{!mode != MODE_EDIT && NOT(disableAddNew)}">
                                            <apex:outputText value="Add New" style="text-decoration:underline;font-weight:normal;cursor:pointer;"/>
                                            <apex:actionSupport event="onclick" action="{!addNewRow}" reRender="tablePanel" status="newRowStatus" oncomplete="endSubmitAction();">
                                                <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            </apex:actionSupport>
                                        </apex:outputPanel>
                                    </apex:facet>

                                    <apex:outputPanel id="cloneActionPanel" rendered="{!NOT(disableClone)}">
                                        <apex:commandLink action="{!cloneRow}" value="Clone" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}" status="newRowStatus"
                                            oncomplete="endSubmitAction()">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="editActionPanel" rendered="{!NOT(tableRow.isEdit)}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!enableForEdit}" value="Edit" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="removeNewActionPanel" rendered="{!tableRow.isNew}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!removeNew}" value="Delete" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}" onclick="if (!startSubmitAction()) return false;" status="{!rowRemoveStatus}"
                                            oncomplete="endSubmitAction();">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="deleteOldActionPanel" rendered="{!NOT(tableRow.isNew) && NOT(disableDeleteOld)}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!deleteOld}" value="Delete" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}" onclick="if (!startSubmitAction()) return false;" status="{!rowRemoveStatus}"
                                            oncomplete="endSubmitAction();">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                </apex:column>
                                <apex:repeat id="showColsRepeat" value="{!RTEle.myDisplayColList}" var="displayCol">
                                    <apex:column headerValue="{!displayCol.colLabel}" width="{!displayCol.colWidth}" style="vertical-align: top;">
                                        <apex:repeat id="showFieldRepeat" value="{!displayCol.displayFieldList}" var="displayField">
                                            <apex:variable id="allowEditVar" var="allowEdit" value="{!AND(displayField.readonlyMode != 'a', OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}"/>
                                            
                                            <!-- Due to unknown reason, the following outputPanel cannot use allowEdit as rendered value. Otherwise, it has bug. -->
                                            
                                            
                                            
                                            <apex:outputPanel id="inputFieldPanel1_dcplan" rendered="{!AND(sObjTypeStr == 'ASI_MFM_Plan_Line_Item__c', OR(displayField.name == 'ASI_MFM_Quantity__c',displayField.name == 'ASI_MFM_Unit_Price__c',displayField.name == 'ASI_MFM_Total_Cost__c'))}">
                                                <apex:outputLabel value="{!displayField.label}:" rendered="{!NOT(ISBLANK(displayField.label))}" style="font-weight:bold"/>
                                                <apex:outputField value="{!tableRow.mySObj[displayField.name]}" rendered="{!NOT(allowEdit)}" style="width: {!displayField.width}"/>
                                                <apex:actionSupport event="ondblclick" action="{!enableForEdit}" reRender="tablePanel" rendered="{!NOT(allowEdit)}">
                                                    <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                                    <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                                </apex:actionSupport>
                                                <!-- Due to unknown reason, the following outputPanel cannot use allowEdit as rendered value. Otherwise, it has bug. -->
                                                
                                                <apex:outputPanel id="inputFieldPanel2_dcplan" rendered="{!AND(displayField.dependentField==null||displayField.dependentField==''||ISBLANK(displayField.dependentField), OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="lookupSelect_dcplan" title="{!displayField.name}" onchange="renderSelect(event);changeDependencies(this,1)" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList>                                                  
                                                        <div class="customErrorMsg1"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                
                                                <apex:outputPanel id="inputFieldPanel3_dcplan" rendered="{!AND(displayField.dependentField!=null&&displayField.dependentField!=''&&!ISBLANK(displayField.dependentField),OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>                                                
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="dependentLookupSelect_dcplan" title="{!displayField.name}" onchange="renderSelect(event);" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList> 
                                                                                
                                                        <div class="customErrorMsg2"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                
                                                <apex:outputPanel id="inputFieldPanel_dcplan" rendered="{!AND(displayField.readonlyMode != 'a' && !displayField.isPickList , OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                            <apex:outputPanel rendered="{!displayField.name == 'ASI_MFM_Quantity__c'}">
                                                                <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, 'required plan_quantity_field', 'none plan_quantity_field')}" style="width: {!displayField.width}" onBlur="calculateAmt('plan', {!rowId});"/>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!displayField.name == 'ASI_MFM_Unit_Price__c'}">
                                                                <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, 'required plan_unitPrice_field', 'none plan_unitPrice_field')}" style="width: {!displayField.width}" onBlur="calculateAmt('plan', {!rowId});"/>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!displayField.name == 'ASI_MFM_Total_Cost__c'}">
                                                                <!-- id="plan_lineAmt_{!rowId}" -->
                                                                <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, 'required plan_lineAmt_field', 'none plan_lineAmt_field')}" style="width: {!displayField.width}"/>
                                                            </apex:outputPanel> 
                                                        <div class="customErrorMsg3"></div>
                                                    </div>
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                            
                                            <apex:outputPanel id="inputFieldPanel1_dcpo" rendered="{!AND(sObjTypeStr == 'ASI_MFM_PO_Line_Item__c', OR(displayField.name == 'ASI_MFM_Quantity__c',displayField.name == 'ASI_MFM_Unit_Price__c',displayField.name == 'ASI_MFM_Amount__c'))}">
                                                <apex:outputLabel value="{!displayField.label}:" rendered="{!NOT(ISBLANK(displayField.label))}" style="font-weight:bold"/>
                                                <apex:outputField value="{!tableRow.mySObj[displayField.name]}" rendered="{!NOT(allowEdit)}" style="width: {!displayField.width}"/>
                                                <apex:actionSupport event="ondblclick" action="{!enableForEdit}" reRender="tablePanel" rendered="{!NOT(allowEdit)}">
                                                    <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                                    <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                                </apex:actionSupport>
                                                <!-- Due to unknown reason, the following outputPanel cannot use allowEdit as rendered value. Otherwise, it has bug. -->
                                                
                                                <apex:outputPanel id="inputFieldPanel2_dcpo" rendered="{!AND(displayField.dependentField==null||displayField.dependentField==''||ISBLANK(displayField.dependentField), OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="lookupSelect_dcpo" title="{!displayField.name}" onchange="renderSelect(event);changeDependencies(this,1)" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList>                                                  
                                                        <div class="customErrorMsg4"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                
                                                <apex:outputPanel id="inputFieldPanel3_dcpo" rendered="{!AND(displayField.dependentField!=null&&displayField.dependentField!=''&&!ISBLANK(displayField.dependentField),OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>                                                
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="dependentLookupSelect_dcpo" title="{!displayField.name}" onchange="renderSelect(event);" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList> 
                                                                                
                                                        <div class="customErrorMsg5"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                
                                                <apex:outputPanel id="inputFieldPanel_dcpo" rendered="{!AND(displayField.readonlyMode != 'a' && !displayField.isPickList , OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                            <apex:outputPanel rendered="{!displayField.name == 'ASI_MFM_Quantity__c'}">
                                                                <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, 'required po_quantity_field', 'none po_quantity_field')}" style="width: {!displayField.width}" onBlur="calculateAmt('po', {!rowId});"/>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!displayField.name == 'ASI_MFM_Unit_Price__c'}">
                                                                <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, 'required po_unitPrice_field', 'none po_unitPrice_field')}" style="width: {!displayField.width}" onBlur="calculateAmt('po', {!rowId});"/>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!displayField.name == 'ASI_MFM_Amount__c'}">
                                                                <!-- id="po_lineAmt_{!rowId}" -->
                                                                <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, 'required po_lineAmt_field', 'none po_lineAmt_field')}" style="width: {!displayField.width}"/>
                                                            </apex:outputPanel> 
                                                        <div class="customErrorMsg6"></div>
                                                    </div>
                                                </apex:outputPanel>
                                            </apex:outputPanel>

                                            <apex:outputPanel id="inputFieldPanel1" rendered="{!NOT(OR(AND(sObjTypeStr == 'ASI_MFM_PO_Line_Item__c', OR(displayField.name == 'ASI_MFM_Quantity__c',displayField.name == 'ASI_MFM_Unit_Price__c',displayField.name == 'ASI_MFM_Amount__c')), AND(sObjTypeStr == 'ASI_MFM_Plan_Line_Item__c', OR(displayField.name == 'ASI_MFM_Quantity__c',displayField.name == 'ASI_MFM_Unit_Price__c',displayField.name == 'ASI_MFM_Total_Cost__c'))))}">
                                                <apex:outputLabel value="{!displayField.label}:" rendered="{!NOT(ISBLANK(displayField.label))}" style="font-weight:bold"/>
                                                <apex:outputField value="{!tableRow.mySObj[displayField.name]}" rendered="{!NOT(allowEdit)}" style="width: {!displayField.width}"/>
                                                <apex:actionSupport event="ondblclick" action="{!enableForEdit}" reRender="tablePanel" rendered="{!NOT(allowEdit)}">
                                                    <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                                    <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                                </apex:actionSupport>
                                                <!-- Due to unknown reason, the following outputPanel cannot use allowEdit as rendered value. Otherwise, it has bug. -->
                                                
                                             
                                                
                                                
                                                
                                                <apex:outputPanel id="inputFieldPanel2" rendered="{!AND(displayField.name != 'ASI_MFM_AP_Code__c',displayField.dependentField==null||displayField.dependentField==''||ISBLANK(displayField.dependentField), OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="lookupSelect" title="{!displayField.name}" onchange="renderSelect(event);changeDependencies(this,1)" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList>                                                  
                                                        <div class="customErrorMsg7"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                

                                                
                                                <apex:outputPanel id="inputFieldPanel3" rendered="{!AND(displayField.dependentField!=null&&displayField.dependentField!=''&&!ISBLANK(displayField.dependentField),OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>                                                
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="dependentLookupSelect" title="{!displayField.name}" onchange="renderSelect(event);" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList> 
                                                                                
                                                        <div class="customErrorMsg8"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                 
                                             <!--    <apex:outputPanel id="inputFieldPanelPoAP" rendered="{!AND(sObjTypeStr == 'ASI_MFM_PO_Line_Item__c',displayField.name == 'ASI_MFM_AP_Code__c',displayField.dependentField==null||displayField.dependentField==''||ISBLANK(displayField.dependentField), OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="aplookupSelect" title="{!displayField.name}" onchange="renderSelect(event);setSubLeger(this,1);changeDependencies(this,1)" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList>                                             
                                                        <div class="customErrorMsg9"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                                -->
                                                
                                                <apex:outputPanel id="inputFieldPanel" rendered="{!AND(displayField.readonlyMode != 'a' && !displayField.isPickList  , OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                        <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, "required", "none")}" style="width: {!displayField.width}"/>
                                                        <div class="customErrorMsg10"></div>
                                                    </div>
                                                </apex:outputPanel>
                                                
                                               <!--  
                                                <apex:outputPanel id="inputFieldPanelPlanAP" rendered="{!AND(sObjTypeStr == 'ASI_MFM_Plan_Line_Item__c',displayField.name== 'ASI_MFM_AP_Code__c',displayField.dependentField==null||displayField.dependentField==''||ISBLANK(displayField.dependentField), OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
                                                    <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                        <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                     <apex:selectList id="lookupSelectplanap" title="{!displayField.name}" onchange="renderSelect(event);changeDependenciesAP(this,1)" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                        <apex:selectOptions value="{!allLookPickList[displayField.name].pickList}"  /> 
                                                     </apex:selectList>                                                  
                                                        <div class="customErrorMsg11"></div>
                                                    </div>                       
                                                </apex:outputPanel>
                                           		-->
                                           		 
	                                           <!--    <apex:outputPanel id="inputFieldPanelAPGroup" rendered="{!AND(sObjTypeStr == 'ASI_MFM_PO_Line_Item__c',displayField.name == 'ASI_MFM_AP_Group__c', OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o'))}">
	                                                  
		                                                <div class="col-xs-3">
							                                <apex:outputLabel value="" />
							                                <apex:outputPanel >
								                                <apex:selectList html-class="form-control" value="{!selectedApGroup}" size="1" id="apGroupList">
								                                    <apex:selectOptions value="{!apGroupOptionList}" />
								                                    <apex:actionSupport event="onchange" reRender="reloadAll" action="{!getAPCodes}"/>
							                                	</apex:selectList>
							                                </apex:outputPanel>
							                            </div>
												</apex:outputPanel>
												
												 -->
												 <!-- 
												<apex:outputPanel id="inputFieldPanelPoAP1" > 
													 <apex:outputPanel rendered="{!AND(sObjTypeStr == 'ASI_MFM_PO_Line_Item__c',displayField.name == 'ASI_MFM_AP_Code__c',displayField.dependentField==null||displayField.dependentField==''||ISBLANK(displayField.dependentField), OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList))}">
		                                                
							                            <div class="col-xs-3">
							                                <apex:selectList html-class="form-control" value="{!tableRow.mySObj[displayField.name]}" size="1" id="apCodeList">
							                                    <apex:selectOptions value="{!apCodeOptionList}"/> 
							                                </apex:selectList>   
							                            </div>
		                                             </apex:outputPanel>
	                                           </apex:outputPanel>    
	                                            --> 
	                                            
                                           
                                            </apex:outputPanel>
                                        </apex:repeat>
                                    </apex:column>
                                </apex:repeat>
                            </apex:pageBlockTable>
                        </apex:outputPanel>
                    </apex:pageBlockSection>
                </apex:repeat>
            </apex:outputPanel>
        </apex:pageBlock>
        <apex:outputPanel id="emptyPanel"></apex:outputPanel>
        <apex:actionStatus id="dummyStatus"/>
</apex:component>