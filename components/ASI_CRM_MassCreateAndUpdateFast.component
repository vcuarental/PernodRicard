<apex:component id="mcau" controller="ASI_MFM_MassCreateAndUpdateController" allowDML="true">
    <apex:attribute name="pageController" description="The parent page controller" type="ASI_CRM_PageInterface" required="false" assignTo="{!pageController}"/>
    <apex:attribute name="componentKey" description="The key to identify this component" type="String" required="false" assignTo="{!componentKey}"/>
    <apex:attribute name="isFastMode" description="Whether use fast mode to improve performance" type="Boolean" default="true" required="false" assignTo="{!isFastModeBool}" />
    <apex:attribute name="sObjectType" description="The object to be edited in this page"  type="String" required="true" assignTo="{!sObjTypeStr}" />
    <apex:attribute name="displayFields" description="The list of fields to display in table. Format: field1, field2__c" type="String" required="false" assignTo="{!displayFieldsStr}"/>
    <apex:attribute name="whereStatement" description="The where statement when selecting records from {sObjTypeStr} object" type="String" required="false"  assignTo="{!whereStatm}"/>
    <apex:attribute name="includeRecordTypes" description="list of record type enabled in the page" type="String" required="false" assignTo="{!includeRecordTypes}" />
    <apex:attribute name="fieldToURLParam" description="Default field values from url parameters. Format: Field1__c => param1" type="String" required="false" assignTo="{!fieldToURLParamStr}"/>
    <apex:attribute name="pageBlockTitle" description="The title of pageBlock" type="String" required="false" assignTo="{!pageBlockTitleStr}"/>
    <apex:attribute name="successLink" description="The link to redirect after successfully saved" type="String" required="true" assignTo="{!successLink}" />
    <apex:attribute name="cancelLink" description="The link to redirect when clicking cancel" type="String" required="true" assignTo="{!cancelLink}" />
    <apex:attribute name="mode" description="EDIT, NEW, BOTH" type="String" required="false" default="BOTH" assignTo="{!mode}" />
    <apex:attribute name="isDefaultEdit" description="Whether the existing records are shown as edit by default" type="Boolean" required="false" default="false" assignTo="{!isDefaultEditVal}" />
    <apex:attribute name="disableClone" description="Whether disable clone button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="disableAddNew" description="Whether disable add new button" type="Boolean" required="false" default="false"/>
    <apex:attribute name="showAllRT" description="Whether show all record types in one page or use drop down list to switch" type="Boolean" default="true" required="false" assignTo="{!showAllRT}"/>
    <apex:attribute name="rowActionRenderList" description="List of render items when selecting object" type="String" default="emptyPanel" required="false"/>
    <apex:attribute name="pageBlockActionRenderList" description="List of render items when clicking page block buttons" type="String" default="wholeDataPanel" required="false"/>
    <apex:attribute name="rowRemoveStatus" description="The status component ID when removing row" type="String" default="headerStatusLoading" required="false"/>
    <apex:attribute name="pageBlockActionStatus" description="The status component ID for page block buttons" type="String" default="headerStatusLoading" required="false"/>
    <apex:attribute name="firstRowForNew" description="Whether append the new row before first row" type="Boolean" default="true" required="false" assignTo="{!isUseFirstRowForNew}"/>
    <apex:attribute name="altSObjectTypeName" description="Alternative name of this sojbect used by custom setting. Use it if object name and record type name is too long" type="String" required="false" assignTo="{!altSObjectTypeName}"/>
    <apex:attribute name="actionColWidth" description="Action column width string" default="150px" type="String" required="false"/>
    <apex:attribute name="displayPickList" description="ChangeTheLookupFieldToPickList" type="String" required="false" default="hello,world" assignTo="{!lookupToPicklist}"/>  
    
    <style type="text/css">
        .customErrorMsg {
            color: #D74C3B;
        }
        .rtid {
            display: none;
        }
        .blankAndHidden {
            display: none;
        }
    </style>
    
    <script type="text/javascript">
        function startSubmitAction() {
            if (isSubmitting)
                return false;
            isSubmitting = true;
            return true;
        }
        
        function endSubmitAction() {
            if (!isDelaying) {
                isDelaying = true;
                setTimeout(function() {isSubmitting=false;isDelaying=false;unlockTableAction();}, 200);
            }
        }
        
        function lockTableAction() {
            if (isLockedTableAction)
                return false;
            isLockedTableAction = true;
            return true;
        }
        function unlockTableAction() {
            if (isLockedTableAction)
                isLockedTableAction = false;
        }
    
        function displayLoadingRow(tableId) {
            if (startSubmitAction()) {
                var theTable = document.getElementById(tableId);
                if (theTable && theTable.tagName == 'TABLE' && theTable.tBodies && theTable.tBodies.length > 0) {
                    var theTBody = theTable.tBodies[0];
                    var loadingRow = null;
                    if ({!isUseFirstRowForNew} == true)
                        loadingRow = theTBody.insertRow(0);
                    else
                        loadingRow = theTBody.insertRow(-1);
                    loadingRow.innerHTML = '<td colspan="50" style="height:21px;text-align:center;vertical-align:middle;">Loading ...</td>';
                    return true;
                }
            }
            return false
        }
        
        function addNewRow(tableId, tablePanelId, cloneFromInputs) {
            if (lockTableAction()) {
                var theTable = document.getElementById(tableId);
                var returnVal = false;
                if (theTable && theTable.tagName == 'TABLE' && theTable.tBodies && theTable.tBodies.length > 0) {
                    var theTBody = theTable.tBodies[0];
                    var newRow = null;
                    var allRows = theTBody.rows;
                    var numOfRows = allRows.length;
                    var isInsertFirstRow = {!firstRowForNew};
                    var needAddMoreRows = false;
                    for (var i = 0; i < numOfRows; i++) {
                        var curRow = allRows[i];
                        var isBlankAndHidden = curRow.className && (' ' + curRow.className + ' ').indexOf(' blankAndHidden ') > -1;
                        if (isInsertFirstRow) {
                            if (!isBlankAndHidden) {
                                newRow = i > 0 ? allRows[i - 1] : null;
                                needAddMoreRows = i == 1;
                                break;
                            }
                        } else if (isBlankAndHidden) {
                            newRow = curRow;
                            if (i == (numOfRows - 1))
                                needAddMoreRows = true;
                            break;
                        }
                    }
                    if (isInsertFirstRow && newRow == null) {
                        newRow = allRows[numOfRows - 1];
                    }
                    
                    if (newRow) {
                        if (!(needAddMoreRows))
                            newRow.className = newRow.className.replace(/\bblankAndHidden\b/, '');
                        var bAndHPanel = searchFirstAppearChildByClassName(newRow, 'blankAndHiddenPanel', 3);
                        if (bAndHPanel) {
                            bAndHPanel.childNodes[0].value = "false";
                        }
                        if (cloneFromInputs) {
                            cloneInputs(cloneFromInputs, allInputsFromElement(newRow, 'skip-clone'));
                        }
                    }
                    if (needAddMoreRows && tablePanelId && tablePanelId.length > 0) {
                        var theTablePanel = document.getElementById(tablePanelId);
                        var rtidSpan = searchFirstAppearChildByClassName(theTablePanel, 'rtid', 1);
                        if (rtidSpan && startSubmitAction()) {
                            addMoreNewRows(rtidSpan.innerHTML, cloneFromInputs ? 0 : 1);
                            return true;
                        }
                    }
                    if (newRow) returnVal = newRow;
                }
                unlockTableAction();
                return returnVal;
            }
            return false;
        }
        
        function removeRow(deleteInputPanelId) {
            if (lockTableAction()) {
                var returnVal = false;
                var deleteInputPanel = document.getElementById(deleteInputPanelId);
                if (deleteInputPanel) {
                    var theRow = searchClosestParentByTagName(deleteInputPanel, 'TR');
                    if (theRow) {
                        theRow.style.display = 'none';
                        var isDeleteHiddenInput = deleteInputPanel.childNodes[0];
                        isDeleteHiddenInput.value = "true";
                        returnVal = true;
                    }
                }
                unlockTableAction();
                return returnVal;
            }
            return false;
        }
        
        function cloneRow(cloneBtn) {
            var theTable = searchClosestParentByTagName(cloneBtn, 'TABLE');
            var theTablePanel = searchClosestParentByClassName(theTable, 'tablePanel');
            if (theTable && theTablePanel && theTable.id && theTablePanel.id) {
                var cloneFromRow = searchClosestParentByTagName(cloneBtn, 'TR');
                if (cloneFromRow) {
                    var cloneFromInputs = allInputsFromElement(cloneFromRow, 'skip-clone');
                    addNewRow(theTable.id, theTablePanel.id, cloneFromInputs);
                }
            }
        }
        function cloneInputs(cloneFromInputs, cloneToInputs) {
            if (cloneFromInputs && cloneToInputs && cloneFromInputs.length == cloneToInputs.length) {
                var inputSize = cloneFromInputs.length;
                for (var i = 0; i < inputSize; i++) {
                    var cloneToInput = cloneToInputs[i];
                    if (cloneToInput.id && cloneToInput.id.indexOf('_mod') == cloneToInput.id.length - 4 && cloneToInput.tagName == 'INPUT' && cloneToInput.type == 'hidden')
                        cloneToInput.value = "1";
                    else
                        cloneToInput.value = cloneFromInputs[i].value;
                }
            }
        }
    
        function checkRequiredFieldsAndSave() {
            removeAllRequiredFieldErrors();
            var allInputFields = document.getElementsByTagName("input");
            var allSelectFields = document.getElementsByTagName("select");
            var allFields = concatTwoElements(allInputFields, allSelectFields);
            var errorFound = false;
            for (var index in allFields) {
                var inputField = allFields[index];
                if (inputField.className && inputField.className == "required"
                    && hasEmptyValue(inputField) && isRowVisible(inputField)) {
                    var parentDiv = inputField.parentNode;
                    while (parentDiv.tagName != "DIV")
                        parentDiv = parentDiv.parentNode;
                    var divChildNodes = parentDiv.childNodes;
                    for (var childNodeIndex in divChildNodes) {
                        var childNode = divChildNodes[childNodeIndex];
                        if (childNode.className && childNode.className == "customErrorMsg") {
                            errorFound = true;
                            childNode.innerHTML = "<strong>Error: </strong>You must enter a value"
                        }
                    }
                }
            }
            if (errorFound) {
                return false;
            } else {
                return commitAll();
            }
        }
        
        function removeAllRequiredFieldErrors() {
            var allErrorMsg = getElementsByClassName('customErrorMsg');
            for (var index in allErrorMsg) {
                allErrorMsg[index].innerHTML = "";
            }
        }
        
        function concatTwoElements(ele1, ele2) {
            result = [];
            for (var eleIndex in ele1) {
                result.push(ele1[eleIndex]);
            }
            for (var eleIndex in ele2) {
                result.push(ele2[eleIndex]);
            }
            return result;
        }
        
        function hasEmptyValue(field) {
            if (field.tagName == "INPUT") {
                return (field.value == null || field.value == "");
            } else if (field.tagName == "SELECT") {
                if (field.options) {
                    var selectValue = field.options[field.selectedIndex].value;
                    return (selectValue == null || selectValue == "");
                }
            }
        }
        
        function isRowVisible(ele) {
            var parentRow = searchClosestParentByTagName(ele, 'TR');
            return !(parentRow && parentRow.className && (' ' + parentRow.className + ' ').indexOf(' blankAndHidden ') >= 0)
        }
        
        function searchClosestParentByClassName(ele, theClassName) {
            if (!ele || !theClassName)
                return null;
            var result = ele;
            while (result != null && result.className && (' ' + result.className + ' ').replace(/[\n\t]/g, " ").indexOf(' ' + theClassName + ' ') < 0) {
                result = result.parentNode;
            }
            return result;
        }
        
        function searchClosestParentByTagName(ele, theTagName) {
            if (!ele || !theTagName)
                return null;
            var result = ele;
            var theTagNameUpperCase = theTagName.toUpperCase();
            while (result != null && result.tagName != theTagNameUpperCase) {
                result = result.parentNode;
            }
            return result;
        }
        
        function searchFirstAppearChildByClassName(ele, theClassName, maxSearchLevel) {
            if (ele && theClassName) {
                if (ele.className && (' ' + ele.className + ' ').replace(/[\n\t]/g, " ").indexOf(' ' + theClassName + ' ') > -1)
                    return ele
                if ((typeof ele.getElementsByClassName) === 'function') {
                    var foundEleList = ele.getElementsByClassName(theClassName);
                    if (foundEleList && foundEleList.length > 0) {
                        return foundEleList[0];
                    }
                } else {
                    var nodes = ele.childNodes;
                    if (nodes && nodes.length > 0 && maxSearchLevel && maxSearchLevel > 0) {
                        for (var nodeIndex in nodes) {
                            var node = nodes[nodeIndex];
                            var childResult = searchFirstAppearChildByClassName(node, theClassName, maxSearchLevel - 1);
                            if (childResult) return childResult;
                        }
                    }
                }
            }
            return null;
        }
        
        function allInputsFromElement(ele, skipClass) {
            if (ele) {
                var inputs = ele.getElementsByTagName('input');
                var selects = ele.getElementsByTagName('select');
                var result = [];
                if (inputs) {
                    for (var i = 0; i < inputs.length; i++) {
                        var input = inputs[i];
                        if (!(skipClass && hasClass(input, skipClass)))
                            result.push(input);
                    }
                }
                if (selects) {
                    for (var i = 0; i < selects.length; i++) {
                        var select = selects[i];
                        if (!(skipClass && hasClass(select, skipClass)))
                            result.push(select);
                    }
                }
                return result;
            }
            return [];
        }
        
        function renderSelect(e) {
            e = e || window.event;
            var select = eTarget(e);
            if (e.type === 'mousedown') {
                var origWidth = select.style.width;
                select.style.width = 'auto';
                if (origWidth && origWidth.length > 0
                        && select.className && select.className.indexOf(" defWidth_") < 0)
                    select.className += " defWidth_" + origWidth;
            } else if (e.type === 'blur' || e.type === 'change') {
                if (select.className) {
                    var idx = select.className.indexOf(" defWidth_");
                    if (idx >= 0) {
                        select.style.width = select.className.substring(idx + 10).split(" ")[0];
                    }
                }
            }
        }
        
        function hasClass(ele, className) {
            return ele && ele.className && className && (' ' + ele.className + ' ').replace(/[\n\t]/g, " ").indexOf(' ' + className + ' ') > -1;
        }
        
        function eTarget(e) { return e.target ? e.target : e.srcElement; }
        
        if (typeof document.getElementsByClassName === 'undefined') {
            document.getElementsByClassName = function(theClassName) {
                var result = [];
                var allEle = document.getElementsByTagName('*');
                for (var allEleIndex in allEle) {
                    var theEle = allEle[allEleIndex];
                    if (theEle.className && theEle.className && (' ' + theEle.className + ' ').replace(/[\n\t]/g, " ").indexOf(' ' + theClassName + ' ') > -1)
                        result.push(theEle);
                }
                return result;
            }
        }
        
        var isLockedTableAction = false;
        var isSubmitting = false;
        var isDelaying = false;
    </script>
    
        <apex:variable var="dummyV" value="{!dummyVar}" id="dummyVar"/>
        <apex:pageBlock id="pageBlock" title="{!pageBlockTitleStr}">
            <apex:pageBlockButtons id="buttonArea" location="both">
                <apex:commandButton id="saveAllBtn" value="Save All" onclick="checkRequiredFieldsAndSave()" reRender="saveAllBtn"/>
                <apex:commandButton action="{!URLFOR(cancelLink)}" value="Cancel" immediate="true"/>
                <apex:repeat id="pbBtnRepeat" value="{!pageBlockActionBtnList}" var="btn">
                    <input type="button" class="btn" onclick="triggerPBAction('{!btn.id}');return false;" value="{!btn.label}"/>
                </apex:repeat>
            </apex:pageBlockButtons>
            <apex:actionFunction name="triggerPBAction" action="{!triggerPageBlockAction}" rerender="{!pageBlockActionRenderList}" status="{!pageBlockActionStatus}">
                <apex:param name="PARAM_PB_BTN_ID" value=""/>
            </apex:actionFunction>
            <apex:outputPanel id="headerPanel">
                <apex:pageMessages />
                <apex:actionFunction name="refresh" action="{!refresh}" rerender="wholeDataPanel" status="headerStatusLoading"/>
                <apex:actionFunction name="commitAll" action="{!commitAll}" status="headerStatusLoading"/>
                <apex:actionFunction name="addMoreNewRows" action="{!addMoreBlankRows}" reRender="tablePanel" status="headerStatusLoading" oncomplete="endSubmitAction();">
                    <apex:param name="{!PARAM_RTID}" value=""/>
                    <apex:param name="{!PARAM_NUM_OF_SHOW_ROW}" value=""/>
                </apex:actionFunction>
                <apex:outputPanel id="rtSelect" rendered="{!NOT(showAllRT) && (numOfRecordType > 1)}">
                    <apex:outputLabel value="Record Type: "/>
                    <apex:selectList value="{!selectedRecordType}" required="true" multiselect="false" size="1" onchange="refresh()">
                        <apex:selectOptions value="{!recordTypeOptionList}" />
                    </apex:selectList>
                    <br/>
                </apex:outputPanel>
                <br/>
                <apex:actionStatus id="headerStatusLoading" startText="Loading..." startStyle="font-weight:bold;font-size:110%;"/>
            </apex:outputPanel>
            <apex:outputPanel id="wholeDataPanel">
                <apex:variable var="showNewBtn" value="{!mode != MODE_EDIT && NOT(disableAddNew)}" />
                <apex:repeat id="repeatRT" value="{!theRecordTypeElementList}" var="RTEle" >
                    <apex:variable var="rtDevName" value="{!RTEle.myRecordType.DeveloperName}" />
                    <apex:pageBlockSection id="pBlockSection" title="{!RTEle.myRecordType.Name}" columns="1" collapsible="false" rendered="{!showAllRT || RTEle.myRecordType.DeveloperName == selectedRecordType}" >
                        <apex:actionStatus id="newRowStatus" onstart="displayLoadingRow('{!$Component.mcau_mainTable}');" />
                        <apex:outputPanel id="tablePanel" styleClass="tablePanel">
                            <apex:outputPanel styleClass="rtid">{!rtDevName}</apex:outputPanel>
                            <apex:pageBlockTable id="mcau_mainTable" value="{!RTEle.myDisplayRecordList}" var="tableRow" rules="cols" styleClass="mainDataTable">
                                <apex:column width="{!actionColWidth}">
                                    <apex:facet name="header">
                                        <apex:outputPanel id="addNewPanel" rendered="{!showNewBtn}" layout="block" style="width:{!actionColWidth}">
                                            <span style="text-decoration:underline;font-weight:normal;cursor:pointer;" onclick="addNewRow('{!$Component.mcau_mainTable}', '{!$Component.tablePanel}');">Add New</span>
                                        </apex:outputPanel>
                                    </apex:facet>
                                    <apex:outputPanel styleClass="blankAndHiddenPanel">
                                        <apex:inputHidden value="{!tableRow.isBlankAndHidden}"/>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="isDeletePanel">
                                        <apex:inputHidden value="{!tableRow.isDelete}"/>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="cloneActionPanel" rendered="{!NOT(disableClone)}">
                                        <span style="text-decoration:underline;font-weight:normal;cursor:pointer;" onclick="cloneRow(this);">Clone</span>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="editActionPanel" rendered="{!NOT(tableRow.isEdit)}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <apex:commandLink action="{!enableForEdit}" value="Edit" reRender="tablePanel,{!BLANKVALUE(rowActionRenderList, 'emptyPanel')}">
                                            <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                            <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                        </apex:commandLink>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="removeNewActionPanel" rendered="{!tableRow.isNew}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <span style="text-decoration:underline;font-weight:normal;cursor:pointer;" onclick="removeRow('{!$Component.isDeletePanel}');">Delete</span>
                                    </apex:outputPanel>
                                    <apex:outputPanel id="deleteOldActionPanel" rendered="{!NOT(tableRow.isNew)}">
                                        <apex:outputText value=" | " rendered="{!NOT(disableClone)}"/>
                                        <span style="text-decoration:underline;font-weight:normal;cursor:pointer;" onclick="removeRow('{!$Component.isDeletePanel}');">Delete</span>
                                    </apex:outputPanel>
                                </apex:column>
                                <apex:repeat id="showColsRepeat" value="{!RTEle.myDisplayColList}" var="displayCol">
                                    <apex:column headerValue="{!displayCol.colLabel}" width="{!displayCol.colWidth}" style="vertical-align: top;">
                                        <apex:repeat id="showFieldRepeat" value="{!displayCol.displayFieldList}" var="displayField">
                                            <apex:variable id="allowEditVar" var="allowEdit" value="{!OR(tableRow.isEdit && displayField.readonlyMode != 'n', tableRow.isNew && displayField.readonlyMode != 'o')}"/>
                                            <apex:outputLabel value="{!displayField.label}:" rendered="{!NOT(ISBLANK(displayField.label))}" style="font-weight:bold"/>
                                            <apex:outputField value="{!tableRow.mySObj[displayField.name]}" rendered="{!NOT(allowEdit)}" style="width: {!displayField.width}"/>
                                            <apex:actionSupport event="ondblclick" action="{!enableForEdit}" reRender="tablePanel" rendered="{!NOT(allowEdit)}">
                                                <apex:param name="{!PARAM_RTID}" value="{!rtDevName}"/>
                                                <apex:param name="{!PARAM_TRID}" value="{!tableRow.id}"/>
                                            </apex:actionSupport>
                                            <!-- Due to unknown reason, the following outputPanel cannot use allowEdit as rendered value. Otherwise, it has bug. -->

                                            <apex:outputPanel id="inputFieldPanel2" rendered="{!OR(tableRow.isEdit && displayField.readonlyMode != 'n' && displayField.isPickList, tableRow.isNew && displayField.readonlyMode != 'o' && displayField.isPickList)}">
                                            <!--      <apex:inputField value="{!tableRow.mySObj["BU Code"]}" />     -->
                                                <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                    <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                               <!--      <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, "required", "none")}" style="width: {!displayField.width}"/>
                                                -->
                                                 <apex:selectList id="lookupSelect" title="{!displayField.name}" onchange="renderSelect(event)" onblur="renderSelect(event)" onmousedown="renderSelect(event)" value="{!tableRow.mySObj[displayField.name]}" size="1" style="width: {!displayField.width}" styleClass="{!IF(displayField.isRequired, 'required', 'none')}{!IF(displayField.skipClone, ' skip-clone', '')}">
                                                    <apex:selectOptions value="{!allLookPickList[displayField.name]}"  /> 
                                                 </apex:selectList> 
                                                    <div class="customErrorMsg"></div>
                                                </div>                       
                                            </apex:outputPanel> 



                                            <apex:outputPanel id="inputFieldPanel" rendered="{!OR(tableRow.isEdit && displayField.readonlyMode != 'n' && Not(displayField.isPickList), tableRow.isNew && displayField.readonlyMode != 'o' && Not(displayField.isPickList))}">                                  
                                                <div class='{!IF(displayField.isRequired, "requiredInput", "none")}'>
                                                    <div class='{!IF(displayField.isRequired, "requiredBlock", "none")}'></div>
                                                    <apex:inputField value="{!tableRow.mySObj[displayField.name]}" required="false" styleClass="{!IF(displayField.isRequired, "required", "none")}{!IF(displayField.skipClone, ' skip-clone', '')}" style="width: {!displayField.width}"/>

                                                    <div class="customErrorMsg"></div>
                                                </div>
                                            </apex:outputPanel>
                                        </apex:repeat>
                                    </apex:column>
                                </apex:repeat>
                            </apex:pageBlockTable>
                            <script type="text/javascript">
                                var bAndHArr = document.getElementsByClassName('blankAndHiddenPanel');
                                if (bAndHArr && bAndHArr.length > 0) {
                                    for (var i = 0; i < bAndHArr.length; i++) {
                                        var bAndH = bAndHArr[i];
                                        if (bAndH.childNodes[0].value == 'true') {
                                            var theRow = searchClosestParentByTagName(bAndH, 'TR');
                                            if (theRow) {
                                                if (!(theRow.className && (' ' + theRow.className + ' ').indexOf(' blankAndHidden ') > -1))
                                                    theRow.className = theRow.className += ' blankAndHidden';
                                            }
                                        }
                                    }
                                }
                            </script>
                        </apex:outputPanel>
                    </apex:pageBlockSection>
                </apex:repeat>
            </apex:outputPanel>
        </apex:pageBlock>
        <apex:outputPanel id="emptyPanel"></apex:outputPanel>
        <apex:actionStatus id="dummyStatus"/>
</apex:component>