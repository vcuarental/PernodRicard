<apex:component controller="ASI_CRM_JP_DataTableController" allowDML="true">

    <apex:attribute name="componentId" description="" type="String" required="true"/>
    <apex:attribute name="title" description="" type="String" required="true"/>

    <apex:attribute name="recordId" description="" type="Id" required="true"
                    assignTo="{! attributeRecordId }"/>
    <apex:attribute name="sObjectName" description="" type="String" required="true"
                    assignTo="{! pageRequest.sObjectName }"/>
    <apex:attribute name="selectFields" description="" type="String" required="true"
                    assignTo="{! pageRequest.selectFields }"/>
    <apex:attribute name="customCriteria" description="" type="String" required="true"
                    assignTo="{! pageRequest.customCriteria }"/>

    <apex:attribute name="defaultSortField" description="" type="String" required="false"
                    assignTo="{! pageRequest.defaultSortField }" default="Id"/>
    <apex:attribute name="defaultSortOrder" description="" type="String" required="false"
                    assignTo="{! pageRequest.defaultSortOrder }" default="ASC"/>

    <apex:attribute name="temporaryRows" description="Temp rows" type="String"
                    assignTo="{! unSavedRecordsJsonString }"/>

    <apex:attribute name="dataTableClasses" description="" type="String" required="false"
                    default="display compact hover"/>
    <apex:attribute name="enableActionButtons" description="" type="Boolean" required="false"
                    default="false"/>
    <apex:attribute name="enableSearch" description="" type="Boolean" required="false"
                    default="false"/>
    <apex:attribute name="enableSort" description="" type="Boolean" required="false"
                    default="false"/>

    <script>
        'use strict';

        $(document).ready(function () {
            if (typeof DataTableService !== 'object') {
                console.error('Please define configuration object for datatable components');
            }

            const componentId = '{! componentId }';

            DataTableService.initializeDataTable(componentId);
            DataTableService.createSearchElements(componentId);
            DataTableService.createSortElements(componentId);
            DataTableService.setDefaultPageRequest(componentId, JSON.parse(`{! JSENCODE(pageRequestString) }`));

            {! componentId }_callApexFindRecords();

            $('.comparerSearchElementContainer').on('change', '.operator', function (element) {
                const componentId = $($(element.currentTarget)[0]).data('componentId');
                const operator = element.currentTarget.value;

                if (operator === 'between') {
                    $($(this).siblings()[2]).prop('disabled', false);
                } else {
                    $($(this).siblings()[2]).prop('disabled', true);
                }
            });

        });

        function {! componentId }_callApexFindRecords() {
            const componentId = '{! componentId }';
            const findRecords = DataTableUtil.getApexFunction(componentId, 'findRecords');
            const pageRequest = DataTableService.createPageRequest(componentId);

            DataTableUtil.showSpinner(componentId);
            findRecords(JSON.stringify(pageRequest));
        }

        function {! componentId }_callApexUpdateRecords() {
            const componentId = '{! componentId }';
            const updateRecords = DataTableUtil.getApexFunction(componentId, 'updateRecords');
            const data = DataTableUtil.getDataTableData(componentId);

            function removeKeys(rows, nullifyId) {
                const newArray = rows.map(item => ({...item}));
                newArray.forEach((row) => {
                    if (nullifyId === true) row.Id = null;
                    delete row.isCloned;
                    delete row.isAdded;
                });
                return newArray;
            }

            const recordList = data.filter(row => row.Id && !row.isCloned && !row.isAdded);
            let clonedRecordList = data.filter(row => row.isCloned === true && !row.isAdded);
            let addedRecordList = data.filter(row => !row.isCloned && row.isAdded === true);
            let addedClonedRecordList = data.filter(row => row.isCloned === true && row.isAdded === true);

            clonedRecordList = removeKeys(clonedRecordList);
            addedRecordList = removeKeys(addedRecordList, true);
            addedClonedRecordList = removeKeys(addedClonedRecordList, true);

            console.log('recordList', recordList);
            console.log('clonedRecordList', clonedRecordList);
            console.log('addedRecordList', addedRecordList);
            console.log('addedClonedRecordList', addedClonedRecordList);

//            DataTableUtil.showSpinner(componentId);
            updateRecords(
                        JSON.stringify(recordList),
                        JSON.stringify(clonedRecordList),
                        JSON.stringify(addedRecordList),
                        JSON.stringify(addedClonedRecordList)
                );
        }

    	function {! componentId }_callApexUpdateAndRedirectToRecords() {
            const componentId = '{! componentId }';
            const updateAndRedirectRecords = DataTableUtil.getApexFunction(componentId, 'updateAndRedirectToRecords');
            const data = DataTableUtil.getDataTableData(componentId);

            function removeKeys(rows, nullifyId) {
                const newArray = rows.map(item => ({...item}));
                newArray.forEach((row) => {
                    if (nullifyId === true) row.Id = null;
                    delete row.isCloned;
                    delete row.isAdded;
                });
                return newArray;
            }

            const recordList = data.filter(row => row.Id && !row.isCloned && !row.isAdded);
            let clonedRecordList = data.filter(row => row.isCloned === true && !row.isAdded);
            let addedRecordList = data.filter(row => !row.isCloned && row.isAdded === true);
            let addedClonedRecordList = data.filter(row => row.isCloned === true && row.isAdded === true);

            clonedRecordList = removeKeys(clonedRecordList);
            addedRecordList = removeKeys(addedRecordList, true);
            addedClonedRecordList = removeKeys(addedClonedRecordList, true);

            console.log('recordList', recordList);
            console.log('clonedRecordList', clonedRecordList);
            console.log('addedRecordList', addedRecordList);
            console.log('addedClonedRecordList', addedClonedRecordList);

            updateAndRedirectRecords(
                        JSON.stringify(recordList),
                        JSON.stringify(clonedRecordList),
                        JSON.stringify(addedRecordList),
                        JSON.stringify(addedClonedRecordList)
                );

//            const redirectToRecord = DataTableUtil.getApexFunction(componentId, 'redirectToRecord');
//            redirectToRecord();
        }
    
        function {! componentId }_callApexCloneRecord(rowIndex) {
            const componentId = '{! componentId }';
            const data = DataTableUtil.getDataTableRowData(componentId, rowIndex);

            data.isCloned = true;
            console.log(data);
            DataTableUtil.appendData(componentId, [data]);
            DataTableUtil.showSpinner(componentId);
        }

        function {! componentId }_callApexDeleteRecord(rowIndex) {
            const componentId = '{! componentId }';
            const deleteRecord = DataTableUtil.getApexFunction(componentId, 'deleteRecord');
            const data = DataTableUtil.getDataTableRowData(componentId, rowIndex);

            if (data.isAdded === true || data.isCloned === true) {
                DataTableUtil.softDeleteDataTableRow(componentId, rowIndex)
                return;
            }

            DataTableUtil.showSpinner(componentId);
            deleteRecord(JSON.stringify(data));
        }

        function {! componentId }_onComplete(dataTableId, recordsJsonString, unsavedRecordsJsonString) {
            const records = JSON.parse(recordsJsonString);
            const unsavedRecords = JSON.parse(unsavedRecordsJsonString);

            console.log('records', records);
            console.log('unsavedRecords', unsavedRecords);

            $('#' + dataTableId).DataTable().clear().rows.add(records).draw();
            // $('#' + dataTableId).DataTable().clear().rows.add(records.concat(unsavedRecords)).draw();
            DataTableUtil.hideSpinner(dataTableId);
        }

        function {! componentId }_redirectToRecord() {
            const componentId = '{! componentId }';
            const redirectToRecord = DataTableUtil.getApexFunction(componentId, 'redirectToRecord');
            redirectToRecord();
        }

        function {! componentId }_afterSaveAction(hasError, action, redirect) {
            if(hasError == true) {
                return;
            }
            if(action == 'quickSave') {
                {! componentId }_callApexFindRecords();
            }
            if(redirect) {
                const componentId = '{! componentId }';
                const redirectToRecord = DataTableUtil.getApexFunction(componentId, 'redirectToRecord');
                redirectToRecord();
            }
        }

    </script>

    <apex:form styleClass="{!componentId}-form">
        <apex:pageBlock title="{! title }" mode="edit">
            <apex:actionFunction name="{! componentId }_findRecords" action="{! findRecords }"
                                 oncomplete="{! componentId }_onComplete('{! componentId }', '{! JSENCODE(recordsJsonString) }', '{! JSENCODE(unSavedRecordsJsonString) }')">
                <apex:param name="pageRequest" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="{! componentId }_updateRecords" action="{! updateRecords }" reRender="errorMsg"
                                 oncomplete="{! componentId }_afterSaveAction({!hasError}, 'quickSave', false)">
                <apex:param name="recordList" value=""/>
                <apex:param name="clonedRecordList" value=""/>
                <apex:param name="addedRecordList" value=""/>
                <apex:param name="addedClonedRecordList" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="{! componentId }_updateAndRedirectToRecords" action="{! updateRecords }" reRender="errorMsg"
                                 oncomplete="{! componentId }_afterSaveAction({!hasError}, 'save', true)">
                <apex:param name="recordList" value=""/>
                <apex:param name="clonedRecordList" value=""/>
                <apex:param name="addedRecordList" value=""/>
                <apex:param name="addedClonedRecordList" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="{! componentId }_cloneRecord" action="{! cloneRecord }"
                                 oncomplete="{! componentId }_callApexFindRecords()">
                <apex:param name="recordId" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="{! componentId }_deleteRecord" action="{! deleteRecord }"
                                 oncomplete="{! componentId }_callApexFindRecords()">
                <apex:param name="record" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="{! componentId }_redirectToRecord" action="{! redirectToRecord }">
            </apex:actionFunction>

            <apex:pageBlockButtons location="top" rendered="{! enableActionButtons }">
                <apex:commandButton value="{!$Label.ASI_CRM_JP_Save}" onclick="{! componentId }_callApexUpdateAndRedirectToRecords();return false;"/>
                <apex:commandButton value="{!$Label.ASI_CRM_JP_Quick_Save}" onclick="{! componentId }_callApexUpdateRecords();return false;"/>
                <apex:commandButton value="{!$Label.ASI_CRM_JP_Exit}" onclick="{! componentId }_redirectToRecord(); return false;"/>
            </apex:pageBlockButtons>

            <div class="dataTableContainer">
                <div id="{!componentId}-dataTableSearchForm" class="dataTableSearchForm">
                    <div class="dataTableSearchFormInputContainer">

                    </div>
                    <div class="searchElementContainer">
                        <!--<input type="button" class="btn dataTableSearchButton" data-component-id="{! componentId }"-->
                        <!--onclick="return false;" value="Search"/>-->

                        <apex:commandButton value="{!$Label.ASI_CRM_JP_Search}"
                                            onclick="{! componentId }_callApexFindRecords(); return false;"
                                            rendered="{! enableSearch }"/>
                        <apex:commandButton value="{!$Label.ASI_CRM_JP_Select_All}"
                                            onclick="addAllInvoiceLineItem(); return false;"
                                            rendered="{! enableSearch }"/>
                        <span id="{! componentId }_spinner"> Loading Data </span>
                    </div>
                    <apex:pageMessages id="errorMsg"/>
                </div>
                <div id="{!componentId}-dataTableSortForm" class="dataTableSearchForm">
                    <div class="searchElementContainer">
                        <label>Order By:</label>
                        <select id="{!componentId}-sortFieldSelectInput">
                            <option value="Id">N/A</option>
                        </select>
                        <input type="hidden" id="{!componentId}-sortOrderFieldInput" value=""/>
                        <input type="button" class="btn dataTableSortButton" data-component-id="{! componentId }"
                               onclick="return false;" value="{!$Label.ASI_CRM_JP_Ascending}"/>
                        <input type="button" class="btn dataTableSortButton" data-component-id="{! componentId }"
                               onclick="return false;" value="{!$Label.ASI_CRM_JP_Descending}"/>
                    </div>
                </div>

                <table id="{!componentId}" class="{!dataTableClasses}" width="100%"></table>
                <!-- style="table-layout: fixed" -->
            </div>
        </apex:pageBlock>
    </apex:form>
</apex:component>