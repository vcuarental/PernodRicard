<apex:component >

    <script id="manageContract.app.js">
        (function () {
            'use strict';

            angular.module('manageContract', []);

            angular.module('manageContract').run(function ($rootScope) {
                $rootScope.READ_ONLY_MODE = DataHelper.isReadOnlyMode();
            });

            angular.module('manageContract')
                    .constant('RecordType', {
                        PaymentSchedule: {
                            PurchaseIncentive: 'ASI_CRM_PH_Purchase_Incentive',
                            ContractFundScheme: 'ASI_CRM_PH_Contract_Fund'
                        },
                        Contract: {
                            CONTRACT_READONLY_RT: 'CONTRACT_READONLY_RT',
                            ASI_CRM_PH_Contract_Read_Only: 'ASI_CRM_PH_Contract_Read_Only'
                        }
                    })
                    .constant('DateFormat', {
                        DefaultFormat: 'YYYY-MM-DD'
                    });

            angular.module('manageContract')
                    .filter('purchaseIncentiveSchemeItem', purchaseIncentiveSchemeItemFilter);

            purchaseIncentiveSchemeItemFilter.$inject = ['DateFormat', 'moment'];

            function purchaseIncentiveSchemeItemFilter(DateFormat, moment) {

                return function (purchaseIncentiveSchemes, purchaseIncentiveSchemeHeader) {

                    let headerStartDate = moment(purchaseIncentiveSchemeHeader.ASI_CRM_Target_Start_Date__c, DateFormat.DefaultFormat);
                    let headerEndDate = moment(purchaseIncentiveSchemeHeader.ASI_CRM_Target_End_Date__c, DateFormat.DefaultFormat);

                    return purchaseIncentiveSchemes.filter(scheme => {

                        let schemeStartDate = moment(scheme.ASI_CRM_Target_Start_Date__c, DateFormat.DefaultFormat);
                        let schemeEndDate = moment(scheme.ASI_CRM_Target_End_Date__c, DateFormat.DefaultFormat);

                        let isNotParentRecord = (scheme.ASI_CRM_Sys_Parent_Record__c !== true);
                        let isWithinHeaderDateRange = (
                                schemeStartDate.isSameOrAfter(headerStartDate)
                                && schemeStartDate.isSameOrBefore(headerEndDate)
                                && schemeEndDate.isSameOrAfter(headerStartDate)
                                && schemeEndDate.isSameOrBefore(headerEndDate)
                        );

                        return isNotParentRecord && isWithinHeaderDateRange;
                    });
                };
            }
        })();
    </script>
    <script id="manageContractMainController.controller.js">
        (function () {
            'use strict';

            angular.module('manageContract')
                    .controller('ManageContractController', ManageContract);

            ManageContract.$inject = ['DataService', 'ContractFundSchemeService', 'IncentiveSchemeService'];

            function ManageContract(DataService, ContractFundSchemeService, IncentiveSchemeService) {
                let vm = this;

                refreshData();

                vm.validateSchemeHeaderItemCount = () => IncentiveSchemeService.validateSchemeHeaderItemCount(vm.purchaseIncentiveSchemes);
                vm.validateSchemeHeaderWithoutIncentiveItemCount = () => IncentiveSchemeService.validateSchemeHeaderItemCount(vm.purchaseIncentiveSchemes);
                vm.validateIncentiveToIssueValues = () => IncentiveSchemeService.validateIncentiveToIssueValues(vm.purchaseIncentiveSchemes);
                vm.validatePurchaseIncentiveSchemeMissingFields = () => IncentiveSchemeService.validateMissingFields(vm.purchaseIncentiveSchemes);
                vm.validatePurchaseIncentiveSchemeHeaderMissingFields = () => IncentiveSchemeService.validateHeaderMissingFields(vm.purchaseIncentiveSchemes);
                vm.validatePurchaseIncentiveSchemeHeaderDates = () => IncentiveSchemeService.validateHeaderDates(vm.purchaseIncentiveSchemes);

                vm.getContractFundSchemes = () => ContractFundSchemeService.parseContractFundSchemes(vm.contractFundSchemes);
                vm.getDeleteContractFundSchemeIds = () => vm.deleteContractFundSchemeIds;
                vm.getPurchaseIncentiveSchemes = () => IncentiveSchemeService.parsePurchaseIncentiveSchemes(vm.purchaseIncentiveSchemes);
                vm.getDeletePurchaseIncentiveSchemeIds = () => vm.deletePurchaseIncentiveSchemeIds;

                vm.refreshData = refreshData;

                function refreshData() {
                    vm.contractTargets = DataService.getContractTargets();
                    vm.contract = DataService.getContract();
                    vm.purchaseIncentiveSchemes = DataService.getPurchaseIncentiveSchemes();
                    vm.deletePurchaseIncentiveSchemeIds = [];

                    vm.contractFundSchemes = DataService.getContractFundSchemes();
                    vm.deleteContractFundSchemeIds = [];
                }
            }
        })();
    </script>
    <script id="manageContractFoc.component.js">
        (function () {
            'use strict';

            const template = `
                    <table>
                        <thead>
                        <tr>
                            <th>SKU</th>
                            <th>Sub-Brand</th>
                            <th>FOC</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr ng-repeat="contractTarget in $ctrl.contractTargets track by $index">
                            <td>{{ contractTarget.ASI_CRM_SKU__r.Name }}</td>
                            <td>{{ contractTarget.ASI_CRM_SKU__r.ASI_MFM_Sub_brand__r.Name }}</td>
                            <td><input ng-model="contractTarget.ASI_CRM_FOC__c" type="text" class="form-control" /></td>
                        </tr>
                        </tbody>
                    </table>
                `;

            ManageContractFocController.$inject = [];

            function ManageContractFocController() {
                let vm = this;

            }

            angular.module('manageContract').component('manageContractFoc', {
                template: template,
                // templateUrl: 'temp1',
                controller: ManageContractFocController,
                bindings: {
                    contractTargets: '<',
                    onUpdate: '&'
                }
            });
        })();

    </script>
    <script id="purchaseIncentiveScheme.component.js">
        (function () {
            'use strict';

            const template = `
                    <button ng-if="!$ctrl.READ_ONLY_MODE" ng-click="$ctrl.clonePurchaseIncentiveSchemeItems()" class="btn btn-default">Replicate Items</button>
                    <div ng-repeat="header in $ctrl.purchaseIncentiveSchemes | filter: {ASI_CRM_Sys_Parent_Record__c : true}">
                        <form class="form-inline" novalidate>
                            <button ng-if="!$ctrl.READ_ONLY_MODE" ng-click="$ctrl.addPurchaseIncentiveScheme(header)" class="btn btn-default">Add Row</button>
                            <div class="form-group">
                                <label>Target Start Date</label>
                                <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="header.ASI_CRM_Target_Start_Date__c" type="date" class="form-control" ng-change="$ctrl.updateSchemeDate(header, '{{header.ASI_CRM_Target_Start_Date__c}}', 'START_DATE')" />
                                <span ng-if="$ctrl.READ_ONLY_MODE" >{{header.ASI_CRM_Target_Start_Date__c | date: 'yyyy-MM-dd'}}</span>
                            </div>
                            <div class="form-group">
                                <label>Target End Date</label>
                                <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="header.ASI_CRM_Target_End_Date__c" type="date" class="form-control" ng-change="$ctrl.updateSchemeDate(header, '{{header.ASI_CRM_Target_End_Date__c}}', 'END_DATE')" />
                                <span ng-if="$ctrl.READ_ONLY_MODE" >{{header.ASI_CRM_Target_End_Date__c | date: 'yyyy-MM-dd'}}</span>
                            </div>
                            <div class="form-group">
                                <label>Incentive Amount</label>
                                <input ng-if="!$ctrl.READ_ONLY_MODE"  ng-model="header.ASI_CRM_Sponsorship__c"
                                type="number" class="form-control" />
                                <span ng-if="$ctrl.READ_ONLY_MODE" >{{header.ASI_CRM_Sponsorship__c}}</span>
                            </div>
                        </form>
                        <table class="dataTable no-footer" width="100%">
                            <thead>
                            <tr>
                                <th ng-if="!$ctrl.READ_ONLY_MODE">Action</th>
                                <th>Target Purchase Amount - From</th>
                                <th>Target Purchase Amount - To</th>
                                <th>Incentive % to Issue</th>
                                <th>Payout Amount</th>
                                <th>Achieved</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr ng-repeat="scheme in $ctrl.purchaseIncentiveSchemes | purchaseIncentiveSchemeItem: header" ng-init="scheme.parentId = header.$$hashKey">
                                <td ng-if="!$ctrl.READ_ONLY_MODE">
                                    <button ng-click="$ctrl.removePurchaseIncentiveScheme(scheme)">Delete</button>
                                </td>
                                <td>
                                    <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="scheme.ASI_CRM_Target_Purchase_Amount_From__c"
                                        type="number" class="form-control" />
                                    <span ng-if="$ctrl.READ_ONLY_MODE">
                                        {{scheme.ASI_CRM_Target_Purchase_Amount_From__c}}
                                    </span>
                                </td>
                                <td>
                                    <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="scheme.ASI_CRM_Target_Purchase_Amount_To__c"
                                    type="number" class="form-control" />
                                    <span ng-if="$ctrl.READ_ONLY_MODE"> {{scheme.ASI_CRM_Target_Purchase_Amount_To__c}} </span>
                                </td>
                                <td>
                                    <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="scheme.ASI_CRM_Incentive_to_issue__c"
                                    type="number" class="form-control" />
                                    <span ng-if="$ctrl.READ_ONLY_MODE">
                                        {{scheme.ASI_CRM_Incentive_to_issue__c}}
                                    </span>
                                </td>
                                <td>
                                    <input ng-if="!$ctrl.READ_ONLY_MODE" ng-disabled="true" value="{{ header.ASI_CRM_Sponsorship__c * (scheme.ASI_CRM_Incentive_to_issue__c/100) }}"
                                    type="text" class="form-control" />
                                    <span ng-if="$ctrl.READ_ONLY_MODE">
                                        {{header.ASI_CRM_Sponsorship__c * (scheme.ASI_CRM_Incentive_to_issue__c/100)}}
                                    </span>
                                </td>
                                <td>
                                    <span>{{ scheme.ASI_CRM_Issuable__c ? 'Yes' : 'No' }}</span>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                `;

            IncentiveSchemeComponentController.$inject = ['$rootScope', 'IncentiveSchemeService', 'DataService', 'RecordType', 'moment'];

            function IncentiveSchemeComponentController($rootScope, IncentiveSchemeService, DataService, RecordType, moment) {
                let vm = this;
                let contract = DataService.getContract();

                vm.purchaseIncentiveSchemeHeaders = [];
                vm.quarters = [];
                vm.READ_ONLY_MODE = $rootScope.READ_ONLY_MODE || contract.RecordType.DeveloperName === RecordType.Contract.ASI_CRM_PH_Contract_Read_Only;

                vm.$onInit = initialize;
                vm.addPurchaseIncentiveScheme = addPurchaseIncentiveScheme;
                vm.removePurchaseIncentiveScheme = removePurchaseIncentiveScheme;
                vm.updateSchemeDate = updateSchemeDate;
                vm.clonePurchaseIncentiveSchemeItems = clonePurchaseIncentiveSchemeItems;

                function initialize() {
                    IncentiveSchemeService.fixData(vm.purchaseIncentiveSchemes, vm.contract);

                    let missingHeaders = IncentiveSchemeService
                            .getMissingHeaders(vm.purchaseIncentiveSchemes, vm.contract);

                    if (missingHeaders.length > 0) {
                        vm.purchaseIncentiveSchemes.push.apply(vm.purchaseIncentiveSchemes, missingHeaders);
                    }
                }

                function addPurchaseIncentiveScheme(purchaseIncentiveSchemeHeader) {
                    vm.purchaseIncentiveSchemes.push(IncentiveSchemeService.createPurchaseIncentiveScheme(purchaseIncentiveSchemeHeader));
                }

                function removePurchaseIncentiveScheme(purchaseIncentiveScheme) {
                    let index = vm.purchaseIncentiveSchemes.findIndex(item => item.$$hashKey === purchaseIncentiveScheme.$$hashKey);

                    if (purchaseIncentiveScheme.Id) {
                        vm.deletePurchaseIncentiveSchemeIds.push(purchaseIncentiveScheme.Id);
                    }

                    vm.purchaseIncentiveSchemes.splice(index, 1);
                }

                function updateSchemeDate(header, oldHeaderDate, type) {

                    let oldDate = new Date(oldHeaderDate.replace('"', '').replace('"', ''));//Improve
                    let otherHeaders = vm.purchaseIncentiveSchemes
                            .filter(item => header.$$hashKey !== item.$$hashKey && item.ASI_CRM_Sys_Parent_Record__c === true);
                    let headerStartDate = header.ASI_CRM_Target_Start_Date__c;
                    let headerEndDate = header.ASI_CRM_Target_End_Date__c;
                    let isValid = true;

                    otherHeaders.forEach(item => {
                        let startDate = moment(item.ASI_CRM_Target_Start_Date__c);
                        let endDate = moment(item.ASI_CRM_Target_End_Date__c);

                        if (type === 'START_DATE') {
                            if ((moment(headerStartDate).isSameOrAfter(startDate) && moment(headerStartDate).isSameOrBefore(endDate))) {
                                isValid = false;
                            }
                            if (!isValid) header.ASI_CRM_Target_Start_Date__c = oldDate;
                        } else if (type === 'END_DATE') {
                            if ((moment(headerEndDate).isSameOrAfter(startDate) && moment(headerEndDate).isSameOrBefore(endDate))) {
                                isValid = false;
                            }
                            if (!isValid) header.ASI_CRM_Target_End_Date__c = oldDate;
                        }
                    });


                    if (!isValid) {
                        alert('Start or end date cannot overlap other with other quarter dates');
                        return;
                    }

                    vm.purchaseIncentiveSchemes.forEach(item => {
                        if (header.$$hashKey === item.parentId) {
                            if (type === 'START_DATE') {
                                item.ASI_CRM_Target_Start_Date__c = header.ASI_CRM_Target_Start_Date__c;
                            } else if (type === 'END_DATE') {
                                item.ASI_CRM_Target_End_Date__c = header.ASI_CRM_Target_End_Date__c;
                            }
                        }
                    });

                    console.log('vm.purchaseIncentiveSchemes', vm.purchaseIncentiveSchemes);

                }

                function clonePurchaseIncentiveSchemeItems() {
                    let schemeHeaders = vm.purchaseIncentiveSchemes.filter(item => item.ASI_CRM_Sys_Parent_Record__c === true);
                    let mainSchemeHeader = schemeHeaders[0];
                    let mainSchemeItems = vm.purchaseIncentiveSchemes.filter(item => item.parentId === mainSchemeHeader.$$hashKey);

                    for (let counter = vm.purchaseIncentiveSchemes.length - 1; counter >= 0; counter--) {
                        let scheme = vm.purchaseIncentiveSchemes[counter];

                        if (scheme.ASI_CRM_Sys_Parent_Record__c === true) continue;
                        if (scheme.parentId === mainSchemeHeader.$$hashKey) continue;

                        vm.purchaseIncentiveSchemes.splice(counter, 1);
                    }

                    mainSchemeItems.forEach(item => {
                        schemeHeaders
                                .filter(header => header.$$hashKey !== mainSchemeHeader.$$hashKey)
                                .forEach(header => {

                                    let newItem = JSON.parse(JSON.stringify(item));
                                    newItem.$$hashKey = null;
                                    newItem.ASI_CRM_Target_End_Date__c = header.ASI_CRM_Target_End_Date__c;
                                    newItem.ASI_CRM_Target_Start_Date__c = header.ASI_CRM_Target_Start_Date__c;

                                    vm.purchaseIncentiveSchemes.push(newItem);
                                });
                    });
                }
            }

            angular.module('manageContract').component('manageContractPurchaseIncentiveScheme', {
                template: template,
                controller: IncentiveSchemeComponentController,
                bindings: {
                    contract: '<',
                    purchaseIncentiveSchemes: '<',
                    deletePurchaseIncentiveSchemeIds: '<'
                }
            });
        })();

    </script>
    <script id="purchaseIncentiveSchemeService.service.js">
        (function () {
            'use strict';

            angular.module('manageContract').factory('IncentiveSchemeService', IncentiveSchemeService);

            IncentiveSchemeService.$inject = ['DateFormat', 'moment'];

            function IncentiveSchemeService(DateFormat, moment) {

                const createPurchaseIncentiveScheme = (purchaseIncentiveSchemeHeader) => {
                    return {
                        ASI_CRM_Target_Start_Date__c: purchaseIncentiveSchemeHeader.ASI_CRM_Target_Start_Date__c,
                        ASI_CRM_Target_End_Date__c: purchaseIncentiveSchemeHeader.ASI_CRM_Target_End_Date__c,
                        ASI_CRM_Sys_Parent_Record__c: false,
                        ASI_CRM_Sponsorship__c: 0,
                        ASI_CRM_Target_Achievement_Amount__c: 0,
                        ASI_CRM_Incentive_to_issue__c: 0
                    };
                };

                const getMissingHeaders = (purchaseIncentiveSchemes, contract) => {
                    let missingHeaders = [];
                    let isSpecialContract = contract.ASI_CRM_Special_Contract__c;
                    let quarters = getQuarters(contract.ASI_TH_CRM_Start_Date__c, contract.ASI_TH_CRM_End_Date__c, isSpecialContract);
                    let purchaseIncentiveSchemeHeaders = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c === true);

                    if (quarters.length === purchaseIncentiveSchemeHeaders.length) return missingHeaders;

                    quarters.forEach(quarter => {

                        let quarterStartDate = moment(quarter.startDate, DateFormat.DefaultFormat);
                        let quarterEndDate = moment(quarter.endDate, DateFormat.DefaultFormat);

                        let headers = purchaseIncentiveSchemeHeaders.filter(header => {

                            let headerStartDate = moment(header.ASI_CRM_Target_Start_Date__c, DateFormat.DefaultFormat);
                            let headerEndDate = moment(header.ASI_CRM_Target_End_Date__c, DateFormat.DefaultFormat);

                            return (headerStartDate.isSame(quarterStartDate) && headerEndDate.isSame(quarterEndDate));
                        });

                        if (headers.length > 0) {
                            return;
                        }

                        missingHeaders.push({
                            ASI_CRM_Target_Start_Date__c: new Date(quarter.startDate),
                            ASI_CRM_Target_End_Date__c: new Date(quarter.endDate),
                            ASI_CRM_Sys_Parent_Record__c: true,
                            ASI_CRM_Sponsorship__c: 0,
                            ASI_CRM_Target_Achievement_Amount__c: 0
                            // ASI_CRM_Incentive_to_issue__c: 0
                        });
                    });

                    return missingHeaders;
                };

                const setDefaultValuesForSchemeItems = (purchaseIncentiveSchemes, contract) => {
                    let isSpecialContract = contract.ASI_CRM_Special_Contract__c;

                    purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c !== true)
                            .forEach(scheme => {
                                scheme.ASI_CRM_Sponsorship__c = 0;
                                if (isSpecialContract) {
                                    scheme.ASI_CRM_Target_Start_Date__c = contract.ASI_TH_CRM_Start_Date__c;
                                    scheme.ASI_CRM_Target_End_Date__c = contract.ASI_TH_CRM_End_Date__c;
                                }
                            });
                };

                const validateIncentiveToIssueValues = (purchaseIncentiveSchemes) => {
                    let isValidIncentiveToIssueValue = true;

                    purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c !== true)
                            .forEach(scheme => {
                                if (isNaN(scheme.ASI_CRM_Incentive_to_issue__c)) {
                                    isValidIncentiveToIssueValue = false;
                                    return;
                                }

                                let value = parseInt(scheme.ASI_CRM_Incentive_to_issue__c);
                                if (value < 0 || value > 100) isValidIncentiveToIssueValue = false;
                            });

                    return isValidIncentiveToIssueValue;
                };

                const validateSchemeHeaderItemCount = (purchaseIncentiveSchemes) => {
                    let schemeHeaders = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c === true)
                            .sort((scheme1, scheme2) => {
                                let dateTime1 = new Date(scheme1.ASI_CRM_Target_Start_Date__c).getTime();
                                let dateTime2 = new Date(scheme2.ASI_CRM_Target_Start_Date__c).getTime();
                                return dateTime1 - dateTime2;
                            });

                    let schemeItems = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c !== true);
                    let itemsCount = getItemCountForSchemeHeaders(schemeHeaders, schemeItems);
                    let invalidItems = itemsCount.filter((count, index) => {
                        return (schemeHeaders[index].ASI_CRM_Sponsorship__c !== 0 && count < 1);
                    });

                    return (invalidItems.length === 0);
                };

                const validateSchemeHeaderWithoutIncentiveItemCount = (purchaseIncentiveSchemes) => {
                    let schemeHeaders = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c === true)
                            .sort((scheme1, scheme2) => {
                                let dateTime1 = new Date(scheme1.ASI_CRM_Target_Start_Date__c).getTime();
                                let dateTime2 = new Date(scheme2.ASI_CRM_Target_Start_Date__c).getTime();
                                return dateTime1 - dateTime2;
                            });

                    let schemeItems = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c !== true);
                    let itemsCount = getItemCountForSchemeHeaders(schemeHeaders, schemeItems);
                    let invalidItems = itemsCount.filter((count, index) => {
                        return (schemeHeaders[index].ASI_CRM_Sponsorship__c === 0 && count > 0);
                    });

                    return (invalidItems.length === 0);
                };

                const validateHeaderMissingFields = (purchaseIncentiveSchemes) => {

                    let headerWithMissingFields = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c === true)
                            .find(scheme => (scheme.ASI_CRM_Sponsorship__c === null || scheme.ASI_CRM_Sponsorship__c === undefined || scheme.ASI_CRM_Sponsorship__c === ''));

                    return !headerWithMissingFields;
                };

                const validateMissingFields = (purchaseIncentiveSchemes) => {

                    let schemeWithMissingFields = purchaseIncentiveSchemes
                            .filter(scheme => scheme.ASI_CRM_Sys_Parent_Record__c !== true)
                            .find(scheme => !scheme.ASI_CRM_Incentive_to_issue__c || !scheme.ASI_CRM_Target_Purchase_Amount_From__c);

                    return !schemeWithMissingFields;
                };

                const validateHeaderDates = (purchaseIncentiveSchemes) => {

                    let purchaseIncentiveSchemeHeaders = purchaseIncentiveSchemes
                            .filter(item => item.ASI_CRM_Sys_Parent_Record__c === true)
                            .sort((scheme1, scheme2) => {
                                let dateTime1 = new Date(scheme1.ASI_CRM_Target_Start_Date__c).getTime();
                                let dateTime2 = new Date(scheme2.ASI_CRM_Target_Start_Date__c).getTime();
                                return dateTime1 - dateTime2;
                            });

                    console.log('purchaseIncentiveSchemeHeaders', purchaseIncentiveSchemeHeaders);

                    let isValid = true;
                    purchaseIncentiveSchemeHeaders.forEach((scheme, index) => {
                        let incentiveSchemeStartDate = moment(scheme.ASI_CRM_Target_Start_Date__c);
                        let incentiveSchemeEndDate = moment(scheme.ASI_CRM_Target_End_Date__c);

                        if (incentiveSchemeStartDate.isAfter(incentiveSchemeEndDate)) isValid = false;
                        if (!isValid) return false;

                        for (let counter = 0; counter < index; counter++) {
                            let schemeStartDate = moment(purchaseIncentiveSchemeHeaders[counter].ASI_CRM_Target_Start_Date__c);
                            let schemeEndDate = moment(purchaseIncentiveSchemeHeaders[counter].ASI_CRM_Target_End_Date__c);
                            let overlapsWithOtherHeader = (
                                    (incentiveSchemeStartDate.isSameOrAfter(schemeStartDate) && incentiveSchemeStartDate.isSameOrBefore(schemeEndDate))
                                    || (incentiveSchemeEndDate.isSameOrAfter(schemeStartDate) && incentiveSchemeEndDate.isSameOrBefore(schemeEndDate))
                            );

                            if (overlapsWithOtherHeader) isValid = false;
                        }
                    });

                    return isValid;
                };

                const getQuarters = (contractStartDate, contractEndDate, isSpecialContract) => {

                    if (!contractStartDate || !contractEndDate) return [];

                    let quarters = [];
                    let startDate = moment(contractStartDate);
                    let endDate = moment(contractEndDate);

                    if (isSpecialContract) {
                        let quarter = {
                            startDate: startDate.format(DateFormat.DefaultFormat),
                            endDate: endDate.format(DateFormat.DefaultFormat)
                        };
                        quarters.push(quarter);
                        return quarters;
                    }

                    let markerDate = startDate;

                    while (endDate.diff(markerDate, 'months', true) > 0) {
                        let quarter = {};
                        quarter.startDate = markerDate.startOf('month').format(DateFormat.DefaultFormat);
                        quarter.endDate = markerDate.add(2, 'months').endOf('month').format(DateFormat.DefaultFormat);

                        quarters.push(quarter);
                        markerDate.add(1, 'months').startOf('month');
                    }

                    return quarters;
                };

                const getItemCountForSchemeHeaders = (purchaseIncentiveSchemeHeaders, purchaseIncentiveSchemeItems) => {
                    let itemsCount = [];
                    purchaseIncentiveSchemeHeaders.forEach((schemeHeader, index) => {
                        let headerStartDate = moment(schemeHeader.ASI_CRM_Target_Start_Date__c, DateFormat.DefaultFormat);
                        let headerEndDate = moment(schemeHeader.ASI_CRM_Target_End_Date__c, DateFormat.DefaultFormat);

                        if (itemsCount[index] === undefined) itemsCount[index] = 0;

                        purchaseIncentiveSchemeItems
                                .forEach(scheme => {
                                    let schemeStartDate = moment(scheme.ASI_CRM_Target_Start_Date__c, DateFormat.DefaultFormat);
                                    let schemeEndDate = moment(scheme.ASI_CRM_Target_End_Date__c, DateFormat.DefaultFormat);

                                    let isWithinHeaderDateRange = (
                                            schemeStartDate.isSameOrAfter(headerStartDate)
                                            && schemeStartDate.isSameOrBefore(headerEndDate)
                                            && schemeEndDate.isSameOrAfter(headerStartDate)
                                            && schemeEndDate.isSameOrBefore(headerEndDate)
                                    );

                                    if (isWithinHeaderDateRange) ++itemsCount[index];
                                });
                    });
                    return itemsCount;
                };

                const parsePurchaseIncentiveSchemes = (purchaseIncentiveSchemes) => {
                    let parsedSchemes = [];
                    purchaseIncentiveSchemes.forEach(scheme => {
                        scheme.ASI_CRM_Target_Start_Date__c = moment(scheme.ASI_CRM_Target_Start_Date__c).format(DateFormat.DefaultFormat);
                        scheme.ASI_CRM_Target_End_Date__c = moment(scheme.ASI_CRM_Target_End_Date__c).format(DateFormat.DefaultFormat);
                        parsedSchemes.push(scheme);
                    });
                    return parsedSchemes;
                };

                return {
                    fixData: setDefaultValuesForSchemeItems,
                    getMissingHeaders: getMissingHeaders,
                    createPurchaseIncentiveScheme: createPurchaseIncentiveScheme,
                    validateIncentiveToIssueValues: validateIncentiveToIssueValues,
                    validateSchemeHeaderItemCount: validateSchemeHeaderItemCount,
                    validateSchemeHeaderWithoutIncentiveItemCount: validateSchemeHeaderWithoutIncentiveItemCount,
                    validateHeaderMissingFields: validateHeaderMissingFields,
                    validateMissingFields: validateMissingFields,
                    validateHeaderDates: validateHeaderDates,
                    parsePurchaseIncentiveSchemes: parsePurchaseIncentiveSchemes
                };
            }
        })();

    </script>
    <script id="contractFundScheme.component.js">
        (function () {
            'use strict';

            const template = `
                    <form class="form-inline">
                        <div class="form-group">
                            <button ng-if="!$ctrl.READ_ONLY_MODE" ng-click="$ctrl.add()">Add Row</button>
                        </div>
                        <div class="form-group">
                            <label>Target Type</label>
                            <select ng-if="!$ctrl.READ_ONLY_MODE && $ctrl.contractFundSchemes.length < 1"
                            ng-model="$ctrl.targetType" class="form-control" >
                                <option ng-repeat="type in $ctrl.targetTypes" ng-value="type"> {{type.label}} </option>
                            </select>
                            <span ng-if="$ctrl.READ_ONLY_MODE || $ctrl.contractFundSchemes.length > 0">{{$ctrl.targetType.value}}</span>
                        </div>
                    </form>

                    <table class="dataTable no-footer" width="100%">
                        <thead>
                            <tr>
                            <td ng-if="!$ctrl.READ_ONLY_MODE">Action</td>
                            <td>Target ({{$ctrl.targetType.value}})</td>
                            <td>Fund Amount</td>
                            <td>Achieved?</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="contractFundScheme in $ctrl.contractFundSchemes track by $index">
                                <td ng-if="!$ctrl.READ_ONLY_MODE">
                                    <button ng-click="$ctrl.remove($index)">Delete</button>
                                </td>
                                <td>
                                    <span ng-if="contractFundScheme.ASI_CRM_Type__c !== 'Bottle' && contractFundScheme.ASI_CRM_Type__c !== 'Date'">
                                        <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="contractFundScheme.ASI_CRM_Target_Achievement_Amount__c"
                                        type="text" class="form-control" />
                                        <span ng-if="$ctrl.READ_ONLY_MODE">{{contractFundScheme.ASI_CRM_Target_Achievement_Amount__c}}</span>
                                    </span>
                                    <span ng-if="contractFundScheme.ASI_CRM_Type__c === 'Bottle'">
                                        <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="contractFundScheme.ASI_CRM_Target_Bottle__c"
                                        type="text" class="form-control" />
                                        <span ng-if="$ctrl.READ_ONLY_MODE">{{contractFundScheme.ASI_CRM_Target_Bottle__c}}</span>
                                    </span>
                                    <span ng-if="contractFundScheme.ASI_CRM_Type__c === 'Date'">
                                        <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="contractFundScheme.ASI_CRM_Schedule_Date__c"
                                        type="date" class="form-control" />
                                        <span ng-if="$ctrl.READ_ONLY_MODE">{{contractFundScheme.ASI_CRM_Schedule_Date__c | date: 'yyyy-MM-dd'}}</span>
                                    </span>
                                </td>
                                <td>
                                    <input ng-if="!$ctrl.READ_ONLY_MODE" ng-model="contractFundScheme.ASI_CRM_Sponsorship__c"
                                    type="text" class="form-control" />
                                    <span ng-if="$ctrl.READ_ONLY_MODE">{{contractFundScheme.ASI_CRM_Sponsorship__c}}</span>
                                </td>
                                <td>
                                    <span>{{ contractFundScheme.ASI_CRM_Issuable__c ? 'Yes' : 'No' }}</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                `;

            ContractFundSchemeComponentController.$inject = ['$rootScope', 'DataService', 'RecordType'];

            function ContractFundSchemeComponentController($rootScope, DataService, RecordType) {
                let vm = this;
                let contract = DataService.getContract();

                vm.READ_ONLY_MODE = $rootScope.READ_ONLY_MODE || contract.RecordType.DeveloperName === RecordType.Contract.ASI_CRM_PH_Contract_Read_Only;
                vm.targetTypes = [
                    {value: 'Value', label: 'Value'},
                    {value: 'Bottle', label: 'Bottle'},
                    {value: 'Date', label: 'Date'}
                ];
                vm.targetType = vm.targetTypes[0];

                vm.$onInit = initialize;
                vm.add = addContractFundScheme;
                vm.remove = removeContractFundScheme;

                function initialize() {
                    if (vm.contractFundSchemes.length > 0) {
                        vm.targetType = vm.targetTypes.find(targetType => targetType.value === vm.contractFundSchemes[0].ASI_CRM_Type__c);
                    }
                }

                function addContractFundScheme() {
                    let contractFundScheme = {
                        ASI_CRM_Type__c: vm.targetType.value,
                        ASI_CRM_Contract__c: null,
                        ASI_CRM_Sys_Parent_Record__c: false,
                        ASI_CRM_Sponsorship__c: 0,
                        ASI_CRM_Target_Achievement_Amount__c: 0
                    };

                    vm.contractFundSchemes.push(contractFundScheme);
                    console.log('vm.contractFundSchemes', vm.contractFundSchemes);
                }

                function removeContractFundScheme(index) {
                    if (vm.contractFundSchemes[index].Id) {
                        vm.deleteContractFundSchemeIds.push(vm.contractFundSchemes[index].Id);
                    }

                    vm.contractFundSchemes.splice(index, 1);
                }
            }

            angular.module('manageContract').component('manageContractFundScheme', {
                template: template,
                controller: ContractFundSchemeComponentController,
                bindings: {
                    contractFundSchemes: '<',
                    deleteContractFundSchemeIds: '<'
                }
            });
        })();

    </script>
    <script id="contractFundScheme.service.js">
        (function () {
            'use strict';

            angular.module('manageContract').factory('ContractFundSchemeService', ContractFundSchemeService);

            ContractFundSchemeService.$inject = ['DateFormat', 'moment'];

            function ContractFundSchemeService(DateFormat, moment) {

                const parseContractFundSchemes = (contractFundSchemes) => {
                    let parsedSchemes = [];
                    contractFundSchemes.forEach(scheme => {
                        if (scheme.ASI_CRM_Type__c === 'Date' && scheme.ASI_CRM_Schedule_Date__c) {
                            scheme.ASI_CRM_Schedule_Date__c = moment(scheme.ASI_CRM_Schedule_Date__c).format(DateFormat.DefaultFormat)
                        }
                        parsedSchemes.push(scheme);
                    });
                    return parsedSchemes;
                };

                return {
                    parseContractFundSchemes: parseContractFundSchemes
                };
            }
        })();

    </script>
    <script id="dataService.service.js">
        (function () {
            'use strict';

            angular.module('manageContract').factory('DataService', DataService);

            DataService.$inject = ['RecordType', 'DateFormat', 'moment'];

            function DataService(RecordType, DateFormat, moment) {

                const getSkuList = () => DataHelper.getSkuList();
                const getSkuMap = () => DataHelper.getSkuMap();
                const getContract = () => DataHelper.getContract();
                const getContractTargets = () => DataHelper.getContractTargets();
                const getPurchaseIncentiveSchemes = () => {
                    // return
                    DataHelper.getPurchaseIncentiveSchemes()
                            .forEach(item => {
                                if (item.RecordType.DeveloperName !== RecordType.PaymentSchedule.PurchaseIncentive) return;

                                item.ASI_CRM_Target_Start_Date__c = moment(item.ASI_CRM_Target_Start_Date__c).toDate();
                                item.ASI_CRM_Target_End_Date__c = moment(item.ASI_CRM_Target_End_Date__c).toDate();
                            });

                    return DataHelper.getPurchaseIncentiveSchemes()
                            .filter(item => item.RecordType.DeveloperName === RecordType.PaymentSchedule.PurchaseIncentive)
                };
                const getContractFundSchemes = () => {
                    DataHelper.getContractFundSchemes().forEach(scheme => {
                        if (scheme.ASI_CRM_Type__c === 'Date' && scheme.ASI_CRM_Schedule_Date__c) {
                            scheme.ASI_CRM_Schedule_Date__c = moment(scheme.ASI_CRM_Schedule_Date__c).toDate();//.format(DateFormat.DefaultFormat)
                        }
                    });
                    return DataHelper.getContractFundSchemes();
                };

                return {
                    getSkuList: getSkuList,
                    getAllSKU: getSkuMap,
                    getContract: getContract,
                    getContractTargets: getContractTargets,
                    getPurchaseIncentiveSchemes: getPurchaseIncentiveSchemes,
                    getContractFundSchemes: getContractFundSchemes
                };
            }
        })();

    </script>
    <script id="externalLibraries.service.js">
        (function () {
            'use strict';

            angular.module('manageContract').factory('moment', function ($window) {
                return $window.moment;
            });

        })();
    </script>

</apex:component>