global with sharing class ASI_MFM_HK_GenPOReceipt_Sche implements Schedulable {
/********************************
 * Created by: Linus @Introv    
 * Created Date: 2017-08-01
 * Objective: Schedule job to auto generate PO receipt with PO line which G/L Date is today
 * Module: MFM HK
******************************/
    
    public void execute(SchedulableContext SC){
        system.debug('execute start');
        init();
        system.debug('execute end');
    }    
    
    public void init(){
        system.debug('Start running Gen PO Receipt scheduler');        
        
        Id HKPORrtId = Global_RecordTypeCache.getRtId('ASI_MFM_PO_Receipt__cASI_MFM_HK_PO_Receipt');               system.debug('HK PO Receipt RtId: ' + HKPORrtId);
        Id HKPORIrtId = Global_RecordTypeCache.getRtId('ASI_MFM_PO_Receipt_Item__cASI_MFM_HK_PO_Receipt_Item');    system.debug('HK PO Receipt Item RtId: ' + HKPORIrtId);
        Id HKPOLrtId = Global_RecordTypeCache.getRtId('ASI_MFM_PO_Line_Item__cASI_MFM_HK_PO_Line_Item');           system.debug('HK PO Line Item RtId: ' + HKPOLrtId);       
        
        // Create PO receipt header
        Set<Id> PORHeaderid = new Set<id>();
        List<ASI_MFM_PO_Receipt__c> poReceiptList = new List<ASI_MFM_PO_Receipt__c>();
        ASI_MFM_PO_Receipt__c HKPOR = new ASI_MFM_PO_Receipt__c(ASI_MFM_Remarks__c = 'Generated by batch at ' + Datetime.Now().format('yyyy-MM-dd HH:mm:ss',  UserInfo.getTimeZone().getID()),
                                                                    ASI_MFM_Status__c = 'Final',
                                                                    recordtypeId = HKPORrtId);
                                                          
        poReceiptList.add(HKPOR);
        
        Savepoint sp = Database.setSavepoint();
        Database.SaveResult[] srList = Database.insert(poReceiptList, false);
        
        Id HKPORHeaderId;
        for(Database.SaveResult sr: srList){
            if(sr.isSuccess()){
                system.debug('PO Receipt header creates successful'); 
                PORHeaderid.add(sr.getId());
            }else{
                for(Database.Error err : sr.getErrors()) {
                    System.debug('The following error has occurred.');                   
                    System.debug(err.getStatusCode() + ': ' + err.getMessage());
                    System.debug('PO Receipt fields that affected this error: ' + err.getFields());        
                }
                Database.rollback(sp);
            }
        }
        system.debug('PORHeaderID size: ' + PORHeaderId.size());
        if(PORHeaderId.size() != 0){
            for(ASI_MFM_PO_Receipt__c POR: [Select id, recordtypeId from ASI_MFM_PO_Receipt__c where id IN :PORHeaderId]){            

                HKPORHeaderId = POR.id;
            }
            if(HKPORHeaderId != null)
                database.executeBatch(new ASI_MFM_HK_GenPOReceipt_Batch(HKPORHeaderId, HKPOLrtId, HKPORIrtId));
        }
        
    }

}