global with sharing class ASI_MFM_TR_GenPOReceipt_Sche implements Schedulable {
/********************************
 * Created by: Linus @Introv    
 * Created Date: 2017-08-01
 * Objective: Schedule job to auto generate PO receipt with PO line which G/L Date is today
 * Module: MFM TR
******************************/
    
    public void execute(SchedulableContext SC){
        system.debug('execute start');
        init();
        system.debug('execute end');
    }    
    
    public void init(){
        system.debug('Start running Gen PO Receipt scheduler');        
                
        Id TRPORrtId = Global_RecordTypeCache.getRtId('ASI_MFM_PO_Receipt__cASI_MFM_TR_PO_Receipt');               system.debug('TR PO Receipt rtId: ' + TRPORrtId);
        Id TRPORIrtId = Global_RecordTypeCache.getRtId('ASI_MFM_PO_Receipt_Item__cASI_MFM_TR_PO_Receipt_Item');    system.debug('TR PO Receipt Item rtId: ' + TRPORrtId);          
        Id TRPOLrtId = Global_RecordTypeCache.getRtId('ASI_MFM_PO_Line_Item__cASI_MFM_TR_PO_Line_Item');           system.debug('TR PO Line Item rtId: ' + TRPOLrtId);
        
        // Create PO receipt header
        Set<Id> PORHeaderid = new Set<id>();
        List<ASI_MFM_PO_Receipt__c> poReceiptList = new List<ASI_MFM_PO_Receipt__c>();

        ASI_MFM_PO_Receipt__c TRPOR = new ASI_MFM_PO_Receipt__c(ASI_MFM_Remarks__c = 'Generated by batch at ' + Datetime.Now(),
                                                                    ASI_MFM_Status__c = 'Final',
                                                                    recordtypeId = TRPORrtId);                                                            
        poReceiptList.add(TRPOR);
        
        Savepoint sp = Database.setSavepoint();
        Database.SaveResult[] srList = Database.insert(poReceiptList, false);
        
        Id TRPORHeaderId;
        for(Database.SaveResult sr: srList){
            if(sr.isSuccess()){
                system.debug('PO Receipt header creates successful'); 
                PORHeaderid.add(sr.getId());
            }else{
                for(Database.Error err : sr.getErrors()) {
                    System.debug('The following error has occurred.');                   
                    System.debug(err.getStatusCode() + ': ' + err.getMessage());
                    System.debug('PO Receipt fields that affected this error: ' + err.getFields());        
                }
                Database.rollback(sp);
            }
        }
        system.debug('PORHeaderID size: ' + PORHeaderId.size());
        if(PORHeaderId.size() != 0){
            for(ASI_MFM_PO_Receipt__c POR: [Select id, recordtypeId from ASI_MFM_PO_Receipt__c where id IN :PORHeaderId]){            
                
                TRPORHeaderId = POR.id;                
            }
            if(TRPORHeaderId != null)
                database.executeBatch(new ASI_MFM_TR_GenPOReceipt_Batch(TRPORHeaderId, TRPOLrtId));
        }
        
    }

}