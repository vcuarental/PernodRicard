//Generated by wsdl2apex

public class LAT_WS_CustomerHandler {
  public class port {
    public String endpoint_x;
    public Map<String,String> inputHttpHeaders_x;
    public Map<String,String> outputHttpHeaders_x;
    public String clientCertName_x;
    public String clientCert_x;
    public String clientCertPasswd_x;
    public Integer timeout_x;
    private String[] ns_map_type_info = new String[]{'http://www.pernod-ricard.com/soa/crm/customer/handler/types', 'LAT_WS_CustomerHandlerTypes', 'http://www.pernod-ricard.com/IntegrationRequestResponseTypes', 'LAT_WS_CustomerHandlerRequestResponseTyp', 'http://pernod-ricard.com/sca/soapservice/BPELPernodRicardApp/CustomerHandlerBPEL/CustomerHandlerWS', 'LAT_WS_CustomerHandler'};

    // Modified to receive the endpoint as a param
    public LAT_WS_CustomerHandlerRequestResponseTyp.AsyncIntegrationResponseType operation(LAT_WS_CustomerHandlerTypes.ClientInfoType clientInfo, LAT_WS_CustomerHandlerTypes.CustomerHandlerArgumentsType arguments, String receivedEndpoint, Boolean requireAuth, String customerID) {
        
      // Add received params to the request
      LAT_WS_CustomerHandlerTypes.CustomerHandlerRequestType request_x = new LAT_WS_CustomerHandlerTypes.CustomerHandlerRequestType();
      request_x.clientInfo = clientInfo;
      request_x.arguments = arguments;

      CS001_JDEInterfaceCredentials__c cred = LAT_WS_Utils.getHeaderKey(ClientInfo.country);

      // Always default to max timeout possible
      this.timeout_x = 120000; // 120 sec is max timeout possible

      // Add Basic Auth if required
      if (requireAuth && !Test.isRunningTest()) {
        this.inputHttpHeaders_x = new Map <String, String>();
        this.inputHttpHeaders_x.put('Authorization', LAT_WS_Utils.getAuthorizationHeader());
        this.inputHttpHeaders_x.put('api_key',cred.MASHERY_HEADER_KEY__c);
      }
      
      // Load Response maps       
      LAT_WS_CustomerHandlerRequestResponseTyp.AsyncIntegrationResponseType response_x;
      Map<String, LAT_WS_CustomerHandlerRequestResponseTyp.AsyncIntegrationResponseType> response_map_x = new Map<String, LAT_WS_CustomerHandlerRequestResponseTyp.AsyncIntegrationResponseType>();
      response_map_x.put('response_x', response_x);
      
      // Load endpoint eceived by param
      endpoint_x = receivedEndpoint;

      
        WebServiceCallout.invoke(
          this,
          request_x,
          response_map_x,
          new String[]{endpoint_x,
          'operation',
          'http://www.pernod-ricard.com/soa/crm/customer/handler/types',
          'customerHandlerRequest',
          'http://www.pernod-ricard.com/soa/crm/customer/handler/types',
          'customerHandlerResponse',
          'LAT_WS_CustomerHandlerRequestResponseTyp.AsyncIntegrationResponseType'}
        );
      
      
      response_x = response_map_x.get('response_x');
      return response_x;
    }
  }
}