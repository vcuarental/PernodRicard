//Generated by wsdl2apex

public class SalesOrderHandler {
    public class execute_pt {
        //public String endpoint_x = 'http://205.207.154.84/CRM/AsyncSalesOrderHandler/AsyncSalesOrderHandlerProxy';
        public String endpoint_x;
        public Map<String,String> inputHttpHeaders_x;
        public Map<String,String> outputHttpHeaders_x;
        public String clientCertName_x;
        public String clientCert_x;
        public String clientCertPasswd_x;
        public Integer timeout_x;
        private String[] ns_map_type_info = new String[]{'http://www.pernod-ricard.com/soa/crm/salesorder/handler/async/types', 'SalesOrderHandlerTypes', 'http://www.pernod-ricard.com/sca/soapservice/PernodRicardApp/AsyncSalesOrderHandlerBPEL/AsyncSalesOrderHandlerWS', 'SalesOrderHandler'};
        
        public Integer execute(SalesOrderHandlerTypes.ClientInfoType client,SalesOrderHandlerTypes.SalesOrderHeaderRequestType header,SalesOrderHandlerTypes.SalesOrderItemRequestType[] item) 
        {
            SalesOrderHandlerTypes.SalesOrderHandlerRequestType request_x = new SalesOrderHandlerTypes.SalesOrderHandlerRequestType();
            SalesOrderHandlerTypes.SalesOrderHandlerResponseType response_x;
            request_x.client = client;
            request_x.header = header;
            request_x.item = item;

            CS001_JDEInterfaceCredentials__c cred = LAT_WS_Utils.getHeaderKey(client.country);

            
            this.inputHttpHeaders_x = new Map <String, String>();
            this.inputHttpHeaders_x.put('api_key',cred.MASHERY_HEADER_KEY__c);
            
            Map<String, SalesOrderHandlerTypes.SalesOrderHandlerResponseType> response_map_x = new Map<String, SalesOrderHandlerTypes.SalesOrderHandlerResponseType>();
            response_map_x.put('response_x', response_x);
            
            try{endpoint_x = cred.EndPoint_SalesOrderHandler__c;}catch(exception e){}
            
            try{

                  WebServiceCallout.invoke(
                  this,
                  request_x,
                  response_map_x,
                  new String[]{endpoint_x,
                  'execute',
                  'http://www.pernod-ricard.com/soa/crm/salesorder/handler/async/types',
                  'salesOrderHandlerRequest',
                  'http://www.pernod-ricard.com/soa/crm/salesorder/handler/async/types',
                  'salesOrderHandlerResponse',
                  'SalesOrderHandlerTypes.SalesOrderHandlerResponseType'}
                );

                response_x = response_map_x.get('response_x');
                return response_x.returnCode;

              }catch (exception e){

                LAT_DebugUtil debug = new LAT_DebugUtil();
                debug.setOrigin('SalesOrderHandler');
                debug.addTitle('LAT_Opportunity');
                debug.addData('Opportunity id: ', request_x.header.orderNumberForeign);
                debug.addData('Exception: ', e.getMessage());
                debug.insertDebug();

                String[] mails  = LAT_GeneralConfigDao.getValueAsStringArray('OPP_Verification_Email_Recipients',',');

                String html = '';
                String subject = 'Ha fallado un pedido al intentar integrar';

                html += 'El siguiente pedido ha fallado: <br>';

                html += ' https://' + URL.getSalesforceBaseUrl().getHost() + '/' + request_x.header.orderNumberForeign + '<br>';
                
                html += '<br><br>Muchas gracias! <br><br>Equipo CRM ';

                Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                email.setToAddresses(mails);
                email.setSaveAsActivity(false);
                email.setHtmlBody(html);
                email.setBccSender(false);
                email.setSubject(subject);
                email.setUseSignature(false);
                Messaging.SendEmailResult [] r = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {email});

                Throw new OpportunityException(e);

              }
            
        }
    }

    public class OpportunityException extends Exception {}


}