/*********************************************************************************
 * Name: ASI_CRM_SG_ManagePayment_Controller
 * Description: Controller class
 *
 * Version History
 * Date             Developer               Comments
 * ---------------  --------------------    --------------------------------------------------------------------------------
 * 2015-01-08       Laputa: Conrad          Created
 * 2016-02-25       Laputa: Vincent Lam     [VL 1.0] Cater the new design for ValidationHelper
 * 2016-04-07		Laputa: Vincent Lam     [VL 2.0] Calculate ROI
 * 2016-05-04		Laputa: Vincent Lam     [VL 3.0] If payment request header is generated by system, user can edit nothing
 * 2017-11-08		Wilken Lee			    [WL 4.0] P4.1A Display different type for old Contract vs RTM Contract
 * 2017-11-14		Laputa: Vincent Lam	    [VL 5.0] P4.1A Handle back rebates
 * 2018-03-21		Laputa: Vincent Lam	    [VL 6.0] P4.2 Handle wholesaler back rebate
 * 2018-04-14		Laputa: Vincent Lam		[VL 7.0] P4.2 Handle promotion
 */


public with sharing class ASI_CRM_SG_ManagePayment_Controller extends ASI_CRM_SG_PageControllerBase {
        
    public ApexPages.StandardController standardController {get;set;}
        
	/* [VL 6.0] BEGIN */
	public static final String BACKREBATEPAYMENT_REMARK = 'Wholesaler Back Rebate Payment';
	/* [VL 6.0] END */
	
	/* [VL 7.0] BEGIN */
	public static final String PROMOTION_REMARK = 'SG Promotion';
	/* [VL 7.0] END */
	
    public ASI_TH_CRM_PaymentRequest__c Header {get;set;}
    public static String PREFIX_TABLE {get{ return 'PAYMENTREQUESTTABLE_';}}
        
    public Map<String, ASI_TH_CRM_PaymentRequestLineItem__c> allLineItemMap {get;set;}{allLineItemMap = new Map<String, ASI_TH_CRM_PaymentRequestLineItem__c>();}
        
    public Map<String, ASI_MFM_Sub_brand__c> allSubBrandMap {get;set;}{allSubBrandMap = new Map<String, ASI_MFM_Sub_brand__c>();}
    //public Map<String, ASI_MFM_Sub_brand__c> addedSubBrandMap {get;set;}{addedSubBrandMap = new Map<String, ASI_MFM_Sub_brand__c>();}
        
    //Attributes used for filtering SKU
    public String subBrandNameFilter {get;set;}

    public Boolean isEdit {get;set;}{isEdit = false;}

    /* [VL 3.0] BEGIN */
    public Boolean isSysGenerated {get;set;}
    /* [VL 3.0] END */
	
    /* [VL 6.0] BEGIN */
    public Boolean isWholesalerBackRebate {get;set;}
    /* [VL 6.0] END */
    /* [VL 7.0] BEGIN */
    public Boolean isPromotion {get;set;}
    /* [VL 7.0] END */
	
	/*[WL 4.0] BEGIN*/
	public List<SelectOption> paymentTypeSelectOptions {get;set;}
	/*[WL 4.0] END*/
	
    public Boolean isBottleIncentive {get; set;}
	/* [VL 5.0] BEGIN */
    public Boolean isBackRebates {get; set;}
	/* [VL 5.0] END */

    public List<ASI_TH_CRM_PaymentRequestLineItem__c> deleteLineItemList {get;set;}{deleteLineItemList = new List<ASI_TH_CRM_PaymentRequestLineItem__c>();}
    
    //Track how many sub brands has been added
    Map<String, Integer> subBrandCountMap {get;set;}{subBrandCountMap = new Map<String, Integer>();}

    // Attributes to keep track of newly added Payment Schedule record
    public static String LINE_ITEM_NEWRECORD_PREFIX {get{ return 'zzzzzITEMLINEZ';}}
    public Integer LINE_ITEM_NEWRECORD_COUNTER {get;set;}
        
    public ASI_CRM_SG_ManagePayment_Controller(ApexPages.StandardController standardController){
        this.standardController = standardController;
        
        isEdit = true;
        isBottleIncentive = false;
		/* [VL 5.0] BEGIN */
		isBackRebates = false;
		/* [VL 5.0] END */
        
        Map<String, String> params = ApexPages.currentPage().getParameters();
        String isEditStr = params.get('IS_EDIT');
        
        List<ASI_TH_CRM_PaymentRequest__c> headerList = (List<ASI_TH_CRM_PaymentRequest__c>)queryAll(((ASI_TH_CRM_PaymentRequest__c)standardController.getRecord()).id, 'ASI_TH_CRM_PaymentRequest__c', '', 'ID', '');
        
        if(headerList.size() > 0) {   
            Header = headerList.get(0);
        }
        
        /* [VL 3.0] BEGIN */
        isSysGenerated = (header.ASI_CRM_System_Generated__c) ? true : false;
        /* [VL 3.0] END */
        
        /* [VL 6.0] BEGIN */
        isWholesalerBackRebate = (header.ASI_CRM_System_Remark__c == BACKREBATEPAYMENT_REMARK) ? true : false;
        /* [VL 6.0] END */
        
		/* [VL 7.0] BEGIN */
		isPromotion = (header.ASI_CRM_System_Remark__c == PROMOTION_REMARK) ? true : false;
		/* [VL 7.0] END */
		
        List<ASI_TH_CRM_PaymentRequestLineItem__c> lineItemList = queryAll(
			Header.id,
			'ASI_TH_CRM_PaymentRequestLineItem__c', 
			', ASI_CRM_Promotion_Detail__r.ASI_HK_CRM_Promotion__r.ASI_CRM_Promotion_Plan__c',
			'ASI_TH_CRM_Payment_Request__c', 
			''
		);
        
        for(ASI_TH_CRM_PaymentRequestLineItem__c soItem : lineItemList) {
            String uniqueId = (String)(soItem.ID);
            
            Integer count = 0;
            
            if(!subBrandCountMap.containsKey((String)(soItem.ASI_CRM_SG_Sub_brand__c))) {
                subBrandCountMap.put((String)(soItem.ASI_CRM_SG_Sub_brand__c), 0);
            } else {
                count = subBrandCountMap.get((String)(soItem.ASI_CRM_SG_Sub_brand__c));
                count++;
                subBrandCountMap.put((String)(soItem.ASI_CRM_SG_Sub_brand__c), count);
            }
            
            allLineItemMap.put(uniqueId, soItem);

            if(isSysGenerated && soItem.ASI_CRM_SG_Type__c == 'Bottle Incentive') {
                isBottleIncentive = true;
            }
			/* [VL 5.0] BEGIN */
            if(isSysGenerated && soItem.ASI_CRM_SG_Type__c == 'Back Rebates'
				/* [VL 6.0] BEGIN */
				&& !isWholesalerBackRebate
				/* [VL 6.0] END */
			) {
                isBackRebates = true;
            }
			/* [VL 5.0] END */
			
        }
        
		/*[WL 4.0] BEGIN*/
		setpaymentTypeSelectOptions();
		/*[WL 4.0] END*/
    }
    
    public List<sObject> queryAll(ID filterID, String sObjectName, string extraSelection, String filteringField, String extraQuery) {
    
        List<sObject> sObjectList = new List<sObject>();
        Map<String , Schema.SObjectType> globalDescription = Schema.getGlobalDescribe();  
        Schema.sObjectType sObjType = globalDescription.get(sObjectName);  
        Schema.DescribeSObjectResult r1 = sObjType.getDescribe();  
        
        Map<String, Schema.SObjectField> sObjectFieldMap = r1.fields.getMap();
        String theQuery = 'Select ';
        
        for(String fields  : sObjectFieldMap.keySet()){
            theQuery += fields + ' ,';
        }
        thequery = theQuery.subString(0,theQuery.length()-1);
		/* [VL 7.0] BEGIN */
		if(extraSelection != '') thequery += extraSelection;
		/* [VL 7.0] END */
        thequery +=' From '+sObjectName+' where '+filteringField+' = \''+ filterID + '\' ' + extraQuery;
                
        sObjectList = Database.query(theQuery);
        
        return sObjectList;
    }
    
    public Map<String, ASI_MFM_Sub_brand__c> retrieveSubBrand(Map<String, ASI_TH_CRM_PaymentRequestLineItem__c> requestItemsTargetMap){
        
        Map<String, ASI_MFM_Sub_brand__c> PAYMENTLINEItemSKUMap = new Map <String, ASI_MFM_Sub_brand__c>();
        if (Header != null){
            
            Map<String, Schema.SObjectField> subBrandFieldsMap = Schema.SObjectType.ASI_MFM_Sub_brand__c.fields.getMap();
            String theQuery = 'Select ';
        
            for(String fields  : subBrandFieldsMap.keySet()){
                theQuery += fields + ' ,';
            }
            thequery = theQuery.subString(0,theQuery.length()-1);
            thequery +=' From ASI_MFM_Sub_brand__c  where recordtype.developername = \'ASI_CRM_SG_Sub_brand\' ';
                
            if (subBrandNameFilter != null && subBrandNameFilter.trim() != '') {
                thequery += ' and name like \'%' + String.escapeSingleQuotes(subBrandNameFilter.trim()) + '%\'';
            }       
                
            thequery += ' ORDER BY Name ';   
                
            List<ASI_MFM_Sub_brand__c> subBrandList = (List<ASI_MFM_Sub_brand__c>)Database.query(theQuery);   
                
            for(ASI_MFM_Sub_brand__c subBrand : subBrandList){
                //if(!requestItemsTargetMap.containsKey(subBrand.id)) {
                    PAYMENTLINEItemSKUMap.put(subBrand.id, subBrand);
                //}    
            }
                
        }
        return PAYMENTLINEItemSKUMap ;
    }
    
    public void retrieveSubBrandbySubBrand(){
        allSubBrandMap = retrieveSubBrand(allLineItemMap);
    }
    
    public PageReference saveLinetems(){
        PageReference pageRef = null;
        
        Map<String, String> params = ApexPages.currentPage().getParameters();
        String isQuickSaveStr = params.get('IS_QUICK_SAVE');

        Boolean isQuickSave = (isQuickSaveStr==null)?false:Boolean.valueOf(isQuickSaveStr);
            
        Database.upsertResult[] upsertTarget;
        Database.deleteResult[] deleteTarget;
        
        List<ASI_TH_CRM_PaymentRequestLineItem__c> upsertTargetList = new List<ASI_TH_CRM_PaymentRequestLineItem__c>();
        for(String key : allLineItemMap.keySet()){
            upsertTargetList.add(allLineItemMap.get(key));
        }
        
        system.debug('saveLinetems');
        system.debug(allLineItemMap.keySet());

        /* [VL 6.0] BEGIN */
		if(!isWholesalerBackRebate && Header.ASI_TH_CRM_Contract__c != null){
		/* [VL 6.0] END */
        // Validate the amount first
        //if(Header.ASI_TH_CRM_Status__c == 'Approved') {
            /* [VL 1.0] BEGIN */
            /*
            ASI_CRM_SG_Payment_ValidationHelper validateHelper = new ASI_CRM_SG_Payment_ValidationHelper(true, Header, upsertTargetList);
			*/
            ASI_CRM_SG_Payment_ValidationHelper_V2 validateHelper = new ASI_CRM_SG_Payment_ValidationHelper_V2(true, header, upsertTargetList);
            /* [VL 1.0] END */
            String validateAmount = validateHelper.validateAmountExceed();
        	System.debug('Debug Message : ' + validateAmount);
            if(validateAmount != '') {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, validateAmount));
                return null;
            }
        //}
		/* [VL 6.0] BEGIN */
		}
		/* [VL 6.0] END */
        
        System.Savepoint pSavepoint = Database.setSavepoint();
        try{
            if(deleteLineItemList.size()>0)
                deleteTarget = Database.delete(deleteLineItemList);

            /*List<ASI_TH_CRM_PaymentRequestLineItem__c> upsertTargetList = new List<ASI_TH_CRM_PaymentRequestLineItem__c>();
            for(String key : allLineItemMap.keySet()){
                upsertTargetList.add(allLineItemMap.get(key));
            }
            
            // Validate the amount first
            if(Header.ASI_TH_CRM_Status__c == 'Approved') {
                ASI_CRM_SG_Payment_ValidationHelper validateHelper = new ASI_CRM_SG_Payment_ValidationHelper(true, Header, upsertTargetList);
                String validateAmount = validateHelper.validateAmountExceed();
                if(validateAmount != '') {
                    Database.rollback(pSavepoint); 
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, validateAmount));
                    return null;
                }
            }*/
            
            if(upsertTargetList.size()>0)
                upsertTarget = Database.upsert(upsertTargetList);
            
            /* [VL 2.0] BEGIN */
            /* [VL 6.0] BEGIN */
			if(!isWholesalerBackRebate){
            /* [VL 6.0] END */
				List<ASI_TH_CRM_PaymentRequest__c> list_header = new List<ASI_TH_CRM_PaymentRequest__c>();
				list_header.add(header);
				ASI_CRM_SG_ROI_Helper roi = new ASI_CRM_SG_ROI_Helper(list_header);
				roi.calculateROI();
            /* [VL 6.0] BEGIN */
			}
            /* [VL 6.0] END */
            /* [VL 2.0] END */
                
        }
        catch(Exception e){
            pageRef = null;
            Database.rollback(pSavepoint);      
            String strError = e.getMessage() +'|'+ String.valueOf(e.getLineNumber());
            //ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, strError));
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.Fatal,e.getDmlMessage(0)));
            return null;
        }
            
        if (!isQuickSave){
            pageRef = new PageReference('/'+Header.Id);
            pageRef.setRedirect(true);
        }
        return pageRef;
            
    }
    
    public void addLineItem(){

        Map<String, String> params = ApexPages.currentPage().getParameters();
        String param_SourceItemId = params.get('PARAM_PAYMENTLINE_SOURCE_ITEM_ID');
                
        if(allSubBrandMap.containsKey(param_SourceItemId)){
        
            ASI_MFM_Sub_brand__c subBrandTemp = allSubBrandMap.get(param_SourceItemId);
            
            String uniqueSourceItemID = param_SourceItemId;
            Integer count = 0;
            
            if(!subBrandCountMap.containsKey(uniqueSourceItemID)) {
                subBrandCountMap.put(uniqueSourceItemID, 0);
            } else {
                count = subBrandCountMap.get(uniqueSourceItemID);
                count++;
                subBrandCountMap.put(uniqueSourceItemID, count);
            }
            
            if(count > 0) {
                for(Integer i = 0; i < count; i++) {
                    uniqueSourceItemID += 'z';
                }
            }
            
            string newIDCounter = newCounterCreatorLine();

            allLineItemMap.put(LINE_ITEM_NEWRECORD_PREFIX+newIDCounter,
                new ASI_TH_CRM_PaymentRequestLineItem__c(
                    ASI_TH_CRM_Payment_Request__c = Header.id,
                    recordtypeid = Global_RecordTypeCache.getRTId('ASI_TH_CRM_PaymentRequestLineItem__cASI_CRM_SG_Payment_Request_Detail'),
                    ASI_CRM_SG_Sub_brand__c = param_SourceItemId
                )
            );
            
            //addedSubBrandMap.put(param_SourceItemId, allSubBrandMap.get(param_SourceItemId));
            //allSubBrandMap.remove(param_SourceItemId);
        }
        system.debug('addLineItem');
        system.debug(allLineItemMap.keySet());
        
    }
    
    public void removeLineItem(){
    
        Map<String, String> params = ApexPages.currentPage().getParameters();
        String param_Id = params.get('PARAM_PAYMENTLINE_SUBBRAND_ID');
            
        if(allLineItemMap.containsKey(param_Id)){

            ASI_TH_CRM_PaymentRequestLineItem__c delTarget = allLineItemMap.get(param_Id);
            String subBrandID = delTarget.ASI_CRM_SG_Sub_brand__c;

            if(subBrandCountMap.containsKey(subBrandID)) { 
                Integer count = subBrandCountMap.get(subBrandID);
                count--;
                subBrandCountMap.put(subBrandID, count);
            }
            
            if(delTarget.id != null){
                deleteLineItemList.add(delTarget);
            }
            else{
                //allSubBrandMap.put(param_Id, addedSubBrandMap.get(param_Id));
                //addedSubBrandMap.remove(param_Id);
            }
            allLineItemMap.remove(param_Id);
        }
        system.debug('removeLineItem');
        system.debug(allLineItemMap.keySet());
    
    }
    
    public PageReference cancel() {
        Pagereference ref;
        ref = new PageReference('/'+Header.Id);
        ref.setRedirect(true);
        return ref;
    }

    public String newCounterCreatorLine() {

        String idNew;
        IF(LINE_ITEM_NEWRECORD_COUNTER == null) {
            LINE_ITEM_NEWRECORD_COUNTER = 0;
        }
        else {
            LINE_ITEM_NEWRECORD_COUNTER+=1;
        }
    
        String zParser = '';
        Integer oneDigitCounter = LINE_ITEM_NEWRECORD_COUNTER;
    
        if(LINE_ITEM_NEWRECORD_COUNTER > 9) {
            Integer zNumber = LINE_ITEM_NEWRECORD_COUNTER/10;
            for (Integer i = 0; i < zNumber; i++) {
                zParser += 'z';
            }
            oneDigitCounter = Math.mod(LINE_ITEM_NEWRECORD_COUNTER, 10);
        }
    
        idNew = zParser + string.valueof(oneDigitCounter);
        return idNew;
    
    }
    
	/*[WL 4.0] BEGIN */
	public void setpaymentTypeSelectOptions() 
    {
        List<SelectOption> result = new List<SelectOption>();
        
		//result.add(new SelectOption('', ''));
		
		/* [VL 6.0] BEGIN */
		if(Header.ASI_TH_CRM_Contract__c != null){
		/* [VL 6.0] END */
		
			if (Header.ASI_CRM_Contract_Exist_Before_RTM__c){
				//Old contract created before RTM
				
				if (Header.ASI_CRM_System_Generated__c){
					//System Payment, only show 3 types
					result.add(new SelectOption('Cash - Upfront', 'Cash - Upfront'));
					result.add(new SelectOption('Cash - Target Achieved', 'Cash - Target Achieved'));
					result.add(new SelectOption('Bottle Incentive', 'Bottle Incentive'));
				}
				else {
					//Manual Payment, show a list of Types
					result.add(new SelectOption('Ad-hoc Promotions', 'Ad-hoc Promotions'));
					result.add(new SelectOption('Advertising Spot', 'Advertising Spot'));
					result.add(new SelectOption('Events', 'Events'));
					result.add(new SelectOption('Product Branding Display', 'Product Branding Display'));
					result.add(new SelectOption('Sales Support', 'Sales Support'));
					result.add(new SelectOption('Signages', 'Signages'));
					result.add(new SelectOption('Trade Incentive Trips', 'Trade Incentive Trips'));
				}
			}
			else {
				//New contract created after RTM
				if (Header.ASI_CRM_System_Generated__c){
					//System Payment, only show 3 types
					result.add(new SelectOption('Cash - Upfront', 'Cash - Upfront'));
					result.add(new SelectOption('Cash - Target Achieved', 'Cash - Target Achieved'));
					result.add(new SelectOption('Back Rebates', 'Back Rebates'));
				}
				else {
					//Manual Payment, only show 3 types
					result.add(new SelectOption('A&P Fund', 'A&P Fund'));
					result.add(new SelectOption('Sales Support', 'Sales Support'));
				}
			}   
		/* [VL 6.0] BEGIN */
		} else {
			result.add(new SelectOption('Back Rebates', 'Back Rebates'));
		}
		/* [VL 6.0] END */
		
        paymentTypeSelectOptions = result;
    }
	/*[WL 4.0] END */
}