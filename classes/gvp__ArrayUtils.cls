/*
This file is generated and isn't the actual source code for this
managed global class.
This read-only file shows the class's global constructors,
methods, variables, and properties.
To enable code to compile, all methods return null.
*/
global class ArrayUtils {
    global static List<String> EMPTY_STRING_ARRAY;
    global static Integer MAX_NUMBER_OF_ELEMENTS_IN_LIST {
        get;
    }
    global ArrayUtils() {

    }
    global static void assertArraysAreEqual(List<Object> expected, List<Object> actual) {

    }
    global static void assertArraysAreEqual(List<SObject> expected, List<SObject> actual) {

    }
    global static List<SObject> createEmptySObjectList(SObject prototype) {
        return null;
    }
    global static Boolean isEmpty(List<Object> objectArray) {
        return null;
    }
    global static Boolean isEmpty(List<SObject> objectArray) {
        return null;
    }
    global static Boolean isNotEmpty(List<Object> objectArray) {
        return null;
    }
    global static Boolean isNotEmpty(List<SObject> objectArray) {
        return null;
    }
    global static List<String> lowerCase(List<String> strs) {
        return null;
    }
    global static List<Object> merg(List<Object> list1, List<Object> list2) {
        return null;
    }
    global static List<SObject> merg(List<SObject> list1, List<SObject> list2) {
        return null;
    }
    global static List<Object> mergex(List<Object> array1, List<Object> array2) {
        return null;
    }
    global static List<SObject> mergex(List<SObject> array1, List<SObject> array2) {
        return null;
    }
    global static List<String> objectToString(List<Object> objects) {
        return null;
    }
    global static List<Datetime> pluckDateTime(List<SObject> objectArray, Schema.SObjectField field) {
        return null;
    }
    global static List<Date> pluckDate(List<SObject> objectArray, Schema.SObjectField field) {
        return null;
    }
    global static List<Decimal> pluckDecimal(List<SObject> objectArray, Schema.SObjectField field) {
        return null;
    }
    global static List<Id> pluckId(List<SObject> objectArray, Schema.SObjectField field) {
        return null;
    }
    global static List<String> pluckString(List<SObject> objectArray, Schema.SObjectField field) {
        return null;
    }
    global static List<Object> pluck(List<SObject> objectArray, String fieldName) {
        return null;
    }
    global static List<Object> qsort(List<Object> theList) {
        return null;
    }
    global static List<Object> qsort(List<Object> theList, Boolean sortAsc) {
        return null;
    }
    global static List<Object> qsort(List<Object> theList, gvp.ObjectComparator comparator) {
        return null;
    }
    global static List<Object> qsort(List<Object> theList, gvp.ObjectComparator comparator, Boolean sortAsc) {
        return null;
    }
    global static List<SObject> qsort(List<SObject> theList, gvp.ISObjectComparator comparator) {
        return null;
    }
    global static List<SObject> qsort(List<SObject> theList, gvp.ISObjectComparator comparator, Boolean sortAsc) {
        return null;
    }
    global static List<Object> reverse(List<Object> anArray) {
        return null;
    }
    global static List<SObject> reverse(List<SObject> anArray) {
        return null;
    }
    global static List<Object> subset(List<Object> aList, Integer count) {
        return null;
    }
    global static List<Object> subset(List<Object> list1, Integer startIndex, Integer count) {
        return null;
    }
    global static List<SObject> subset(List<SObject> aList, Integer count) {
        return null;
    }
    global static List<SObject> subset(List<SObject> list1, Integer startIndex, Integer count) {
        return null;
    }
    global static String toString(List<Object> objectArray) {
        return null;
    }
    global static String toString(List<SObject> objectArray) {
        return null;
    }
    global static List<String> trim(List<String> strs) {
        return null;
    }
    global static List<String> upperCase(List<String> strs) {
        return null;
    }
}
